
MACH_TRUNG_TAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002968  0800cd78  0800cd78  0000dd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6e0  0800f6e0  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6e0  0800f6e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6e8  0800f6e8  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6e8  0800f6e8  000106e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f6ec  0800f6ec  000106ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800f6f0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200001f0  0800f8e0  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800f8e0  0001178c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d6c  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002960  00000000  00000000  00023f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000268f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc0  00000000  00000000  00027a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018948  00000000  00000000  00028840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ae  00000000  00000000  00041188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094299  00000000  00000000  00055836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  000e9b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ef6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd5c 	.word	0x0800cd5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800cd5c 	.word	0x0800cd5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	486d      	ldr	r0, [pc, #436]	@ (80010a8 <ILI9488_Init+0x1c0>)
 8000ef2:	f005 ff71 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f005 f8b2 	bl	8006060 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	4869      	ldr	r0, [pc, #420]	@ (80010a8 <ILI9488_Init+0x1c0>)
 8000f02:	f005 ff69 	bl	8006dd8 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000f06:	4b69      	ldr	r3, [pc, #420]	@ (80010ac <ILI9488_Init+0x1c4>)
 8000f08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f0c:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000f0e:	4b68      	ldr	r3, [pc, #416]	@ (80010b0 <ILI9488_Init+0x1c8>)
 8000f10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000f14:	801a      	strh	r2, [r3, #0]
//	ILI9488WriteReg( 0x11);
//  	HAL_Delay(120);
//	ILI9488WriteReg( 0x29);


	lcd_write_command(0xE0); //P-Gamma
 8000f16:	20e0      	movs	r0, #224	@ 0xe0
 8000f18:	f000 fa3a 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fadf 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x13);
 8000f22:	2013      	movs	r0, #19
 8000f24:	f000 fadc 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x18);
 8000f28:	2018      	movs	r0, #24
 8000f2a:	f000 fad9 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x04);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f000 fad6 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0F);
 8000f34:	200f      	movs	r0, #15
 8000f36:	f000 fad3 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f000 fad0 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x3A);
 8000f40:	203a      	movs	r0, #58	@ 0x3a
 8000f42:	f000 facd 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x56);
 8000f46:	2056      	movs	r0, #86	@ 0x56
 8000f48:	f000 faca 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x4D);
 8000f4c:	204d      	movs	r0, #77	@ 0x4d
 8000f4e:	f000 fac7 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x03);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 fac4 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0A);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f000 fac1 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000f5e:	2006      	movs	r0, #6
 8000f60:	f000 fabe 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x30);
 8000f64:	2030      	movs	r0, #48	@ 0x30
 8000f66:	f000 fabb 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x3E);
 8000f6a:	203e      	movs	r0, #62	@ 0x3e
 8000f6c:	f000 fab8 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0F);
 8000f70:	200f      	movs	r0, #15
 8000f72:	f000 fab5 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8000f76:	20e1      	movs	r0, #225	@ 0xe1
 8000f78:	f000 fa0a 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 faaf 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x13);
 8000f82:	2013      	movs	r0, #19
 8000f84:	f000 faac 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x18);
 8000f88:	2018      	movs	r0, #24
 8000f8a:	f000 faa9 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x01);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 faa6 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x11);
 8000f94:	2011      	movs	r0, #17
 8000f96:	f000 faa3 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f000 faa0 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x38);
 8000fa0:	2038      	movs	r0, #56	@ 0x38
 8000fa2:	f000 fa9d 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x34);
 8000fa6:	2034      	movs	r0, #52	@ 0x34
 8000fa8:	f000 fa9a 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x4D);
 8000fac:	204d      	movs	r0, #77	@ 0x4d
 8000fae:	f000 fa97 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000fb2:	2006      	movs	r0, #6
 8000fb4:	f000 fa94 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0D);
 8000fb8:	200d      	movs	r0, #13
 8000fba:	f000 fa91 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0B);
 8000fbe:	200b      	movs	r0, #11
 8000fc0:	f000 fa8e 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x31);
 8000fc4:	2031      	movs	r0, #49	@ 0x31
 8000fc6:	f000 fa8b 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x37);
 8000fca:	2037      	movs	r0, #55	@ 0x37
 8000fcc:	f000 fa88 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0F);
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f000 fa85 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xC0);
 8000fd6:	20c0      	movs	r0, #192	@ 0xc0
 8000fd8:	f000 f9da 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x18);
 8000fdc:	2018      	movs	r0, #24
 8000fde:	f000 fa7f 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x16);
 8000fe2:	2016      	movs	r0, #22
 8000fe4:	f000 fa7c 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xC1);
 8000fe8:	20c1      	movs	r0, #193	@ 0xc1
 8000fea:	f000 f9d1 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x45);
 8000fee:	2045      	movs	r0, #69	@ 0x45
 8000ff0:	f000 fa76 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 8000ff4:	20c5      	movs	r0, #197	@ 0xc5
 8000ff6:	f000 f9cb 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fa70 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x63);
 8001000:	2063      	movs	r0, #99	@ 0x63
 8001002:	f000 fa6d 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x01);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 fa6a 	bl	80014e0 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 800100c:	2036      	movs	r0, #54	@ 0x36
 800100e:	f000 f9bf 	bl	8001390 <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
//	if(LANDSCAPE)
		lcd_write_data(0xF8);
 8001012:	20f8      	movs	r0, #248	@ 0xf8
 8001014:	f000 fa64 	bl	80014e0 <lcd_write_data>
//	else
//		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8001018:	203a      	movs	r0, #58	@ 0x3a
 800101a:	f000 f9b9 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x66); //16-bit serial mode
 800101e:	2066      	movs	r0, #102	@ 0x66
 8001020:	f000 fa5e 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 8001024:	20b0      	movs	r0, #176	@ 0xb0
 8001026:	f000 f9b3 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	f000 fa58 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 8001030:	20b1      	movs	r0, #177	@ 0xb1
 8001032:	f000 f9ad 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00); //
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fa52 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x10);
 800103c:	2010      	movs	r0, #16
 800103e:	f000 fa4f 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xB4);
 8001042:	20b4      	movs	r0, #180	@ 0xb4
 8001044:	f000 f9a4 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x02);
 8001048:	2002      	movs	r0, #2
 800104a:	f000 fa49 	bl	80014e0 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 800104e:	20b6      	movs	r0, #182	@ 0xb6
 8001050:	f000 f99e 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x02);
 8001054:	2002      	movs	r0, #2
 8001056:	f000 fa43 	bl	80014e0 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 800105a:	20e9      	movs	r0, #233	@ 0xe9
 800105c:	f000 f998 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 fa3d 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xF7);
 8001066:	20f7      	movs	r0, #247	@ 0xf7
 8001068:	f000 f992 	bl	8001390 <lcd_write_command>
	lcd_write_data(0xA9);
 800106c:	20a9      	movs	r0, #169	@ 0xa9
 800106e:	f000 fa37 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x51);
 8001072:	2051      	movs	r0, #81	@ 0x51
 8001074:	f000 fa34 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x2C);
 8001078:	202c      	movs	r0, #44	@ 0x2c
 800107a:	f000 fa31 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x82);
 800107e:	2082      	movs	r0, #130	@ 0x82
 8001080:	f000 fa2e 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0x11);
 8001084:	2011      	movs	r0, #17
 8001086:	f000 f983 	bl	8001390 <lcd_write_command>
	HAL_Delay(120);
 800108a:	2078      	movs	r0, #120	@ 0x78
 800108c:	f004 ffe8 	bl	8006060 <HAL_Delay>
	lcd_write_command(0x21);
 8001090:	2021      	movs	r0, #33	@ 0x21
 8001092:	f000 f97d 	bl	8001390 <lcd_write_command>


	HAL_Delay(120);
 8001096:	2078      	movs	r0, #120	@ 0x78
 8001098:	f004 ffe2 	bl	8006060 <HAL_Delay>
	lcd_write_command(0x29);
 800109c:	2029      	movs	r0, #41	@ 0x29
 800109e:	f000 f977 	bl	8001390 <lcd_write_command>


}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020400 	.word	0x40020400
 80010ac:	2000020c 	.word	0x2000020c
 80010b0:	2000020e 	.word	0x2000020e

080010b4 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	4603      	mov	r3, r0
 80010c8:	80bb      	strh	r3, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 80010d2:	202a      	movs	r0, #42	@ 0x2a
 80010d4:	f000 f938 	bl	8001348 <writecommand>
	writedata(x0 >> 8);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f9d9 	bl	8001498 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f9d4 	bl	8001498 <writedata>
	writedata(x1 >> 8);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f9cd 	bl	8001498 <writedata>
	writedata(x1 & 0xFF);     // XEND
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f9c8 	bl	8001498 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8001108:	202b      	movs	r0, #43	@ 0x2b
 800110a:	f000 f91d 	bl	8001348 <writecommand>
	writedata(y0 >> 8);
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f9be 	bl	8001498 <writedata>
	writedata(y0 & 0xff);     // YSTART
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f9b9 	bl	8001498 <writedata>
	writedata(y1 >> 8);
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f9b2 	bl	8001498 <writedata>
	writedata(y1 & 0xff);     // YEND
 8001134:	883b      	ldrh	r3, [r7, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f9ad 	bl	8001498 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 800113e:	202c      	movs	r0, #44	@ 0x2c
 8001140:	f000 f902 	bl	8001348 <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <setAddrWindow+0xb0>)
 800114c:	f005 fe44 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2102      	movs	r1, #2
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <setAddrWindow+0xb0>)
 8001156:	f005 fe3f 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	40020400 	.word	0x40020400

08001168 <fillRect>:
      err += dx;
    }
  }
}
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8001186:	4b41      	ldr	r3, [pc, #260]	@ (800128c <fillRect+0x124>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001190:	429a      	cmp	r2, r3
 8001192:	da76      	bge.n	8001282 <fillRect+0x11a>
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <fillRect+0x128>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	da6f      	bge.n	8001282 <fillRect+0x11a>
		return;
	if ((x + w - 1) >= _width)
 80011a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a37      	ldr	r2, [pc, #220]	@ (800128c <fillRect+0x124>)
 80011ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	dd07      	ble.n	80011c6 <fillRect+0x5e>
		w = _width - x;
 80011b6:	4b35      	ldr	r3, [pc, #212]	@ (800128c <fillRect+0x124>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 80011c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <fillRect+0x128>)
 80011d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dd07      	ble.n	80011ea <fillRect+0x82>
		h = _height - y;
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <fillRect+0x128>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80011ea:	88f8      	ldrh	r0, [r7, #6]
 80011ec:	88b9      	ldrh	r1, [r7, #4]
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	4413      	add	r3, r2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29c      	uxth	r4, r3
 80011fa:	88ba      	ldrh	r2, [r7, #4]
 80011fc:	883b      	ldrh	r3, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	3b01      	subs	r3, #1
 8001204:	b29b      	uxth	r3, r3
 8001206:	4622      	mov	r2, r4
 8001208:	f7ff ff54 	bl	80010b4 <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <fillRect+0x12c>)
 8001212:	f005 fde1 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121c:	481d      	ldr	r0, [pc, #116]	@ (8001294 <fillRect+0x12c>)
 800121e:	f005 fddb 	bl	8006dd8 <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 8001222:	883b      	ldrh	r3, [r7, #0]
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	e016      	b.n	8001256 <fillRect+0xee>
		for (x = w; x > 0; x--) {
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	e009      	b.n	8001242 <fillRect+0xda>

			write16BitColor(color);
 800122e:	8b3b      	ldrh	r3, [r7, #24]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f8d1 	bl	80013d8 <write16BitColor>
		for (x = w; x > 0; x--) {
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dcf1      	bgt.n	800122e <fillRect+0xc6>
	for (y = h; y > 0; y--) {
 800124a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	80bb      	strh	r3, [r7, #4]
 8001256:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	dce4      	bgt.n	8001228 <fillRect+0xc0>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <fillRect+0x12c>)
 8001266:	f005 fdb7 	bl	8006dd8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4809      	ldr	r0, [pc, #36]	@ (8001294 <fillRect+0x12c>)
 8001270:	f005 fdb2 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <fillRect+0x12c>)
 800127c:	f005 fdac 	bl	8006dd8 <HAL_GPIO_WritePin>
 8001280:	e000      	b.n	8001284 <fillRect+0x11c>
		return;
 8001282:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	2000020c 	.word	0x2000020c
 8001290:	2000020e 	.word	0x2000020e
 8001294:	40020400 	.word	0x40020400

08001298 <setRotation>:
void setRotation(uint8_t r)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 80012a2:	2036      	movs	r0, #54	@ 0x36
 80012a4:	f000 f850 	bl	8001348 <writecommand>
	rotation = r % 4; // can't be higher than 3
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <setRotation+0xa4>)
 80012b2:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <setRotation+0xa4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d83b      	bhi.n	8001334 <setRotation+0x9c>
 80012bc:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <setRotation+0x2c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012ed 	.word	0x080012ed
 80012cc:	08001305 	.word	0x08001305
 80012d0:	0800131d 	.word	0x0800131d
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 80012d4:	2048      	movs	r0, #72	@ 0x48
 80012d6:	f000 f8df 	bl	8001498 <writedata>
		_width = ILI9488_TFTWIDTH;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <setRotation+0xa8>)
 80012dc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012e0:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <setRotation+0xac>)
 80012e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012e8:	801a      	strh	r2, [r3, #0]
		break;
 80012ea:	e023      	b.n	8001334 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 80012ec:	2028      	movs	r0, #40	@ 0x28
 80012ee:	f000 f8d3 	bl	8001498 <writedata>
		_width = ILI9488_TFTHEIGHT;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <setRotation+0xa8>)
 80012f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012f8:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <setRotation+0xac>)
 80012fc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001300:	801a      	strh	r2, [r3, #0]
		break;
 8001302:	e017      	b.n	8001334 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001304:	2088      	movs	r0, #136	@ 0x88
 8001306:	f000 f8c7 	bl	8001498 <writedata>
		_width = ILI9488_TFTWIDTH;
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <setRotation+0xa8>)
 800130c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001310:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <setRotation+0xac>)
 8001314:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001318:	801a      	strh	r2, [r3, #0]
		break;
 800131a:	e00b      	b.n	8001334 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 800131c:	20e8      	movs	r0, #232	@ 0xe8
 800131e:	f000 f8bb 	bl	8001498 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <setRotation+0xa8>)
 8001324:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001328:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <setRotation+0xac>)
 800132c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001330:	801a      	strh	r2, [r3, #0]
		break;
 8001332:	bf00      	nop
	}

}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000210 	.word	0x20000210
 8001340:	2000020c 	.word	0x2000020c
 8001344:	2000020e 	.word	0x2000020e

08001348 <writecommand>:
{
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2102      	movs	r1, #2
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <writecommand+0x40>)
 8001358:	f005 fd3e 	bl	8006dd8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <writecommand+0x40>)
 8001364:	f005 fd38 	bl	8006dd8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 1);
 8001368:	1df9      	adds	r1, r7, #7
 800136a:	2301      	movs	r3, #1
 800136c:	2201      	movs	r2, #1
 800136e:	4807      	ldr	r0, [pc, #28]	@ (800138c <writecommand+0x44>)
 8001370:	f006 fa85 	bl	800787e <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137a:	4803      	ldr	r0, [pc, #12]	@ (8001388 <writecommand+0x40>)
 800137c:	f005 fd2c 	bl	8006dd8 <HAL_GPIO_WritePin>

}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020400 	.word	0x40020400
 800138c:	2000026c 	.word	0x2000026c

08001390 <lcd_write_command>:


void lcd_write_command(uint8_t c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2102      	movs	r1, #2
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <lcd_write_command+0x40>)
 80013a0:	f005 fd1a 	bl	8006dd8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013aa:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <lcd_write_command+0x40>)
 80013ac:	f005 fd14 	bl	8006dd8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 1);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	2301      	movs	r3, #1
 80013b4:	2201      	movs	r2, #1
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <lcd_write_command+0x44>)
 80013b8:	f006 fa61 	bl	800787e <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <lcd_write_command+0x40>)
 80013c4:	f005 fd08 	bl	8006dd8 <HAL_GPIO_WritePin>

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020400 	.word	0x40020400
 80013d4:	2000026c 	.word	0x2000026c

080013d8 <write16BitColor>:


void write16BitColor(uint16_t color)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	0adb      	lsrs	r3, r3, #11
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	115b      	asrs	r3, r3, #5
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	b2db      	uxtb	r3, r3
 8001404:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	461a      	mov	r2, r3
 800140a:	4613      	mov	r3, r2
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <write16BitColor+0xb4>)
 8001412:	fb82 1203 	smull	r1, r2, r2, r3
 8001416:	441a      	add	r2, r3
 8001418:	1112      	asrs	r2, r2, #4
 800141a:	17db      	asrs	r3, r3, #31
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <write16BitColor+0xb8>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	441a      	add	r2, r3
 8001434:	1152      	asrs	r2, r2, #5
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	4a10      	ldr	r2, [pc, #64]	@ (800148c <write16BitColor+0xb4>)
 800144a:	fb82 1203 	smull	r1, r2, r2, r3
 800144e:	441a      	add	r2, r3
 8001450:	1112      	asrs	r2, r2, #4
 8001452:	17db      	asrs	r3, r3, #31
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi2, &r, 1, 1);
 800145a:	f107 010f 	add.w	r1, r7, #15
 800145e:	2301      	movs	r3, #1
 8001460:	2201      	movs	r2, #1
 8001462:	480c      	ldr	r0, [pc, #48]	@ (8001494 <write16BitColor+0xbc>)
 8001464:	f006 fa0b 	bl	800787e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, &g, 1, 1);
 8001468:	f107 010e 	add.w	r1, r7, #14
 800146c:	2301      	movs	r3, #1
 800146e:	2201      	movs	r2, #1
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <write16BitColor+0xbc>)
 8001472:	f006 fa04 	bl	800787e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, &b, 1, 1);
 8001476:	f107 010d 	add.w	r1, r7, #13
 800147a:	2301      	movs	r3, #1
 800147c:	2201      	movs	r2, #1
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <write16BitColor+0xbc>)
 8001480:	f006 f9fd 	bl	800787e <HAL_SPI_Transmit>


}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	84210843 	.word	0x84210843
 8001490:	82082083 	.word	0x82082083
 8001494:	2000026c 	.word	0x2000026c

08001498 <writedata>:
void writedata(uint8_t d)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <writedata+0x40>)
 80014a8:	f005 fc96 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <writedata+0x40>)
 80014b4:	f005 fc90 	bl	8006dd8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &d, 1, 1);
 80014b8:	1df9      	adds	r1, r7, #7
 80014ba:	2301      	movs	r3, #1
 80014bc:	2201      	movs	r2, #1
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <writedata+0x44>)
 80014c0:	f006 f9dd 	bl	800787e <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <writedata+0x40>)
 80014cc:	f005 fc84 	bl	8006dd8 <HAL_GPIO_WritePin>

}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020400 	.word	0x40020400
 80014dc:	2000026c 	.word	0x2000026c

080014e0 <lcd_write_data>:

void lcd_write_data(uint8_t d)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	480c      	ldr	r0, [pc, #48]	@ (8001520 <lcd_write_data+0x40>)
 80014f0:	f005 fc72 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014fa:	4809      	ldr	r0, [pc, #36]	@ (8001520 <lcd_write_data+0x40>)
 80014fc:	f005 fc6c 	bl	8006dd8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &d, 1, 1);
 8001500:	1df9      	adds	r1, r7, #7
 8001502:	2301      	movs	r3, #1
 8001504:	2201      	movs	r2, #1
 8001506:	4807      	ldr	r0, [pc, #28]	@ (8001524 <lcd_write_data+0x44>)
 8001508:	f006 f9b9 	bl	800787e <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001512:	4803      	ldr	r0, [pc, #12]	@ (8001520 <lcd_write_data+0x40>)
 8001514:	f005 fc60 	bl	8006dd8 <HAL_GPIO_WritePin>

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40020400 	.word	0x40020400
 8001524:	2000026c 	.word	0x2000026c

08001528 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800152c:	b08d      	sub	sp, #52	@ 0x34
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	6039      	str	r1, [r7, #0]
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	466b      	mov	r3, sp
 8001538:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001546:	4293      	cmp	r3, r2
 8001548:	d802      	bhi.n	8001550 <ILI9341_Draw_Colour_Burst+0x28>
	{
		Buffer_Size = Size;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800154e:	e002      	b.n	8001556 <ILI9341_Draw_Colour_Burst+0x2e>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8001550:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2102      	movs	r1, #2
 800155a:	4869      	ldr	r0, [pc, #420]	@ (8001700 <ILI9341_Draw_Colour_Burst+0x1d8>)
 800155c:	f005 fc3c 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001566:	4866      	ldr	r0, [pc, #408]	@ (8001700 <ILI9341_Draw_Colour_Burst+0x1d8>)
 8001568:	f005 fc36 	bl	8006dd8 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	0adb      	lsrs	r3, r3, #11
 8001570:	b29b      	uxth	r3, r3
 8001572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	115b      	asrs	r3, r3, #5
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  uint8_t b = Colour & 0x001F;
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	  r = (r * 255) / 31;
 8001590:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001594:	4613      	mov	r3, r2
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	4a5a      	ldr	r2, [pc, #360]	@ (8001704 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	441a      	add	r2, r3
 80015a2:	1112      	asrs	r2, r2, #4
 80015a4:	17db      	asrs	r3, r3, #31
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  g = (g * 255) / 63;
 80015ac:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015b0:	4613      	mov	r3, r2
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	4a54      	ldr	r2, [pc, #336]	@ (8001708 <ILI9341_Draw_Colour_Burst+0x1e0>)
 80015b8:	fb82 1203 	smull	r1, r2, r2, r3
 80015bc:	441a      	add	r2, r3
 80015be:	1152      	asrs	r2, r2, #5
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  b = (b * 255) / 31;
 80015c8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80015cc:	4613      	mov	r3, r2
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80015d4:	fb82 1203 	smull	r1, r2, r2, r3
 80015d8:	441a      	add	r2, r3
 80015da:	1112      	asrs	r2, r2, #4
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	unsigned char burst_buffer[Buffer_Size];
 80015e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015e6:	460b      	mov	r3, r1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	2300      	movs	r3, #0
 80015ee:	4688      	mov	r8, r1
 80015f0:	4699      	mov	r9, r3
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001606:	2300      	movs	r3, #0
 8001608:	460c      	mov	r4, r1
 800160a:	461d      	mov	r5, r3
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	00eb      	lsls	r3, r5, #3
 8001616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161a:	00e2      	lsls	r2, r4, #3
 800161c:	1dcb      	adds	r3, r1, #7
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	ebad 0d03 	sub.w	sp, sp, r3
 8001626:	466b      	mov	r3, sp
 8001628:	3300      	adds	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001630:	e014      	b.n	800165c <ILI9341_Draw_Colour_Burst+0x134>
	{
		burst_buffer[j] = r;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001636:	4413      	add	r3, r2
 8001638:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800163c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	3301      	adds	r3, #1
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8001648:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 800164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164c:	3302      	adds	r3, #2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8001654:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	3303      	adds	r3, #3
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800165c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800165e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	d3e6      	bcc.n	8001632 <ILI9341_Draw_Colour_Burst+0x10a>
	}

	uint32_t Sending_Size = Size * 3;
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800167c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001682:	fb01 f202 	mul.w	r2, r1, r2
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d018      	beq.n	80016c2 <ILI9341_Draw_Colour_Burst+0x19a>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	e011      	b.n	80016ba <ILI9341_Draw_Colour_Burst+0x192>
		{
			SPI2_TX_completed_flag = 0;
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi2, (unsigned char*) burst_buffer, Buffer_Size);
 800169c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	481a      	ldr	r0, [pc, #104]	@ (8001710 <ILI9341_Draw_Colour_Burst+0x1e8>)
 80016a6:	f006 fcf1 	bl	800808c <HAL_SPI_Transmit_DMA>
			while (SPI2_TX_completed_flag == 0);
 80016aa:	bf00      	nop
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0fb      	beq.n	80016ac <ILI9341_Draw_Colour_Burst+0x184>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	3301      	adds	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3e9      	bcc.n	8001696 <ILI9341_Draw_Colour_Burst+0x16e>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <ILI9341_Draw_Colour_Burst+0x1be>
	{
		SPI2_TX_completed_flag = 0;
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi2, (unsigned char*) burst_buffer, Remainder_from_block);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	69b9      	ldr	r1, [r7, #24]
 80016d6:	480e      	ldr	r0, [pc, #56]	@ (8001710 <ILI9341_Draw_Colour_Burst+0x1e8>)
 80016d8:	f006 fcd8 	bl	800808c <HAL_SPI_Transmit_DMA>
		while (SPI2_TX_completed_flag == 0);
 80016dc:	bf00      	nop
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0fb      	beq.n	80016de <ILI9341_Draw_Colour_Burst+0x1b6>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <ILI9341_Draw_Colour_Burst+0x1d8>)
 80016ee:	f005 fb73 	bl	8006dd8 <HAL_GPIO_WritePin>
 80016f2:	46b5      	mov	sp, r6
}
 80016f4:	bf00      	nop
 80016f6:	3734      	adds	r7, #52	@ 0x34
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016fe:	bf00      	nop
 8001700:	40020400 	.word	0x40020400
 8001704:	84210843 	.word	0x84210843
 8001708:	82082083 	.word	0x82082083
 800170c:	2000000c 	.word	0x2000000c
 8001710:	2000026c 	.word	0x2000026c

08001714 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 800171e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001722:	f240 12df 	movw	r2, #479	@ 0x1df
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fcc3 	bl	80010b4 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fef7 	bl	8001528 <ILI9341_Draw_Colour_Burst>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b08b      	sub	sp, #44	@ 0x2c
 8001746:	af02      	add	r7, sp, #8
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4603      	mov	r3, r0
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	460b      	mov	r3, r1
 8001752:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	777b      	strb	r3, [r7, #29]
 8001764:	2300      	movs	r3, #0
 8001766:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 800176c:	2300      	movs	r3, #0
 800176e:	763b      	strb	r3, [r7, #24]
 8001770:	e09b      	b.n	80018aa <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001772:	2300      	movs	r3, #0
 8001774:	767b      	strb	r3, [r7, #25]
 8001776:	e056      	b.n	8001826 <LCD_Char+0xe4>
		{
			if (bit == 0)
 8001778:	7f3b      	ldrb	r3, [r7, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	83fa      	strh	r2, [r7, #30]
 8001784:	461a      	mov	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8001792:	7f7a      	ldrb	r2, [r7, #29]
 8001794:	7f3b      	ldrb	r3, [r7, #28]
 8001796:	4013      	ands	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <LCD_Char+0x64>
 800179e:	8b7b      	ldrh	r3, [r7, #26]
 80017a0:	3301      	adds	r3, #1
 80017a2:	837b      	strh	r3, [r7, #26]
 80017a4:	e039      	b.n	800181a <LCD_Char+0xd8>
			else if (set_pixels > 0)
 80017a6:	8b7b      	ldrh	r3, [r7, #26]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d036      	beq.n	800181a <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80017b2:	461a      	mov	r2, r3
 80017b4:	7e7b      	ldrb	r3, [r7, #25]
 80017b6:	441a      	add	r2, r3
 80017b8:	8b7b      	ldrh	r3, [r7, #26]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	fb12 f303 	smulbb	r3, r2, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b218      	sxth	r0, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017d8:	461a      	mov	r2, r3
 80017da:	7e3b      	ldrb	r3, [r7, #24]
 80017dc:	4413      	add	r3, r2
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	fb12 f303 	smulbb	r3, r2, r3
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	89bb      	ldrh	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b219      	sxth	r1, r3
 80017f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	8b7a      	ldrh	r2, [r7, #26]
 80017fc:	fb12 f303 	smulbb	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21a      	sxth	r2, r3
 8001804:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001808:	b21c      	sxth	r4, r3
 800180a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180c:	b29b      	uxth	r3, r3
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4623      	mov	r3, r4
 8001812:	f7ff fca9 	bl	8001168 <fillRect>
				set_pixels = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800181a:	7f3b      	ldrb	r3, [r7, #28]
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001820:	7e7b      	ldrb	r3, [r7, #25]
 8001822:	3301      	adds	r3, #1
 8001824:	767b      	strb	r3, [r7, #25]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	7e7a      	ldrb	r2, [r7, #25]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3a3      	bcc.n	8001778 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001830:	8b7b      	ldrh	r3, [r7, #26]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d036      	beq.n	80018a4 <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800183c:	461a      	mov	r2, r3
 800183e:	7e7b      	ldrb	r3, [r7, #25]
 8001840:	441a      	add	r2, r3
 8001842:	8b7b      	ldrh	r3, [r7, #26]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800184c:	b29b      	uxth	r3, r3
 800184e:	fb12 f303 	smulbb	r3, r2, r3
 8001852:	b29a      	uxth	r2, r3
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	b218      	sxth	r0, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001862:	461a      	mov	r2, r3
 8001864:	7e3b      	ldrb	r3, [r7, #24]
 8001866:	4413      	add	r3, r2
 8001868:	b29a      	uxth	r2, r3
 800186a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800186e:	b29b      	uxth	r3, r3
 8001870:	fb12 f303 	smulbb	r3, r2, r3
 8001874:	b29a      	uxth	r2, r3
 8001876:	89bb      	ldrh	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	b219      	sxth	r1, r3
 800187e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001882:	b29b      	uxth	r3, r3
 8001884:	8b7a      	ldrh	r2, [r7, #26]
 8001886:	fb12 f303 	smulbb	r3, r2, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001892:	b21c      	sxth	r4, r3
 8001894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001896:	b29b      	uxth	r3, r3
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4623      	mov	r3, r4
 800189c:	f7ff fc64 	bl	8001168 <fillRect>
			set_pixels = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80018a4:	7e3b      	ldrb	r3, [r7, #24]
 80018a6:	3301      	adds	r3, #1
 80018a8:	763b      	strb	r3, [r7, #24]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	78db      	ldrb	r3, [r3, #3]
 80018ae:	7e3a      	ldrb	r2, [r7, #24]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f4ff af5e 	bcc.w	8001772 <LCD_Char+0x30>
		}
	}
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	@ 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}

080018c0 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08f      	sub	sp, #60	@ 0x3c
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4603      	mov	r3, r0
 80018cc:	81fb      	strh	r3, [r7, #14]
 80018ce:	460b      	mov	r3, r1
 80018d0:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 80018d6:	89bb      	ldrh	r3, [r7, #12]
 80018d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	220c      	movs	r2, #12
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f009 f9f1 	bl	800acca <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80018ec:	e056      	b.n	800199c <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80018ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if (c == '\n')
 80018fa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d10f      	bne.n	8001922 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 8001906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800190a:	461a      	mov	r2, r3
 800190c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001910:	b29b      	uxth	r3, r3
 8001912:	fb12 f303 	smulbb	r3, r2, r3
 8001916:	b29a      	uxth	r2, r3
 8001918:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001920:	e039      	b.n	8001996 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8001922:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001926:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800192a:	429a      	cmp	r2, r3
 800192c:	d333      	bcc.n	8001996 <LCD_Font+0xd6>
 800192e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001932:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001936:	429a      	cmp	r2, r3
 8001938:	d82d      	bhi.n	8001996 <LCD_Font+0xd6>
 800193a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800193e:	2b0d      	cmp	r3, #13
 8001940:	d029      	beq.n	8001996 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001948:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800194c:	1a5b      	subs	r3, r3, r1
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	18d1      	adds	r1, r2, r3
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2208      	movs	r2, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f009 f9b6 	bl	800acca <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800195e:	f107 041c 	add.w	r4, r7, #28
 8001962:	f107 0214 	add.w	r2, r7, #20
 8001966:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800196a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800196e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4623      	mov	r3, r4
 800197a:	f7ff fee2 	bl	8001742 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800197e:	7e3b      	ldrb	r3, [r7, #24]
 8001980:	461a      	mov	r2, r3
 8001982:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001986:	b29b      	uxth	r3, r3
 8001988:	fb12 f303 	smulbb	r3, r2, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001996:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001998:	3301      	adds	r3, #1
 800199a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800199c:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	f7fe fc6e 	bl	8000280 <strlen>
 80019a4:	4603      	mov	r3, r0
 80019a6:	429c      	cmp	r4, r3
 80019a8:	d3a1      	bcc.n	80018ee <LCD_Font+0x2e>
		}
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3734      	adds	r7, #52	@ 0x34
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <LCD_Line>:
		}
	}
}

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	@ 0x2c
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4604      	mov	r4, r0
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	4603      	mov	r3, r0
 80019c8:	80bb      	strh	r3, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	807b      	strh	r3, [r7, #2]
 80019ce:	4613      	mov	r3, r2
 80019d0:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bfb8      	it	lt
 80019dc:	425b      	neglt	r3, r3
 80019de:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80019e0:	883a      	ldrh	r2, [r7, #0]
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bfb8      	it	lt
 80019ea:	425b      	neglt	r3, r3
 80019ec:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d201      	bcs.n	80019fa <LCD_Line+0x46>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e001      	b.n	80019fe <LCD_Line+0x4a>
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001a00:	88ba      	ldrh	r2, [r7, #4]
 8001a02:	883b      	ldrh	r3, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d201      	bcs.n	8001a0c <LCD_Line+0x58>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e001      	b.n	8001a10 <LCD_Line+0x5c>
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		fillRect(x1, y1, size, size, color24);
 8001a1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a22:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a30:	b21c      	sxth	r4, r3
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4623      	mov	r3, r4
 8001a3a:	f7ff fb95 	bl	8001168 <fillRect>
		if (x1 == x2 && y1 == y2)
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d103      	bne.n	8001a4e <LCD_Line+0x9a>
 8001a46:	88ba      	ldrh	r2, [r7, #4]
 8001a48:	883b      	ldrh	r3, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d01e      	beq.n	8001a8c <LCD_Line+0xd8>
		break;
		error2 = error * 2;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	425b      	negs	r3, r3
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dd08      	ble.n	8001a70 <LCD_Line+0xbc>
		{
			error -= deltaY;
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dad2      	bge.n	8001a1e <LCD_Line+0x6a>
		{
			error += deltaX;
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	80bb      	strh	r3, [r7, #4]
		fillRect(x1, y1, size, size, color24);
 8001a8a:	e7c8      	b.n	8001a1e <LCD_Line+0x6a>
		break;
 8001a8c:	bf00      	nop
		}
	}
}
 8001a8e:	bf00      	nop
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}

08001a96 <LCD_Circle_Fill_Helper>:
	LCD_Circle_Helper(x + length - r - 1, y + width - r - 1, r, 4, size, color24);
	LCD_Circle_Helper(x + r, y + width - r - 1, r, 8, size, color24);
}

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8001a96:	b590      	push	{r4, r7, lr}
 8001a98:	b089      	sub	sp, #36	@ 0x24
 8001a9a:	af02      	add	r7, sp, #8
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	80bb      	strh	r3, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	f1c3 0301 	rsb	r3, r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	03d2      	lsls	r2, r2, #15
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8001ad8:	e0ab      	b.n	8001c32 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0e      	blt.n	8001b00 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8001ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001aee:	8a7b      	ldrh	r3, [r7, #18]
 8001af0:	3302      	adds	r3, #2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001af6:	8afa      	ldrh	r2, [r7, #22]
 8001af8:	8a7b      	ldrh	r3, [r7, #18]
 8001afa:	4413      	add	r3, r2
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001b00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001b0c:	8abb      	ldrh	r3, [r7, #20]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001b14:	8afa      	ldrh	r2, [r7, #22]
 8001b16:	8abb      	ldrh	r3, [r7, #20]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8001b1e:	787b      	ldrb	r3, [r7, #1]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03f      	beq.n	8001ba8 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	8a3b      	ldrh	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b298      	uxth	r0, r3
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b299      	uxth	r1, r3
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	8a3b      	ldrh	r3, [r7, #16]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29c      	uxth	r4, r3
 8001b40:	88ba      	ldrh	r2, [r7, #4]
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	4622      	mov	r2, r4
 8001b64:	f7ff ff26 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b298      	uxth	r0, r3
 8001b70:	88ba      	ldrh	r2, [r7, #4]
 8001b72:	8a3b      	ldrh	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b299      	uxth	r1, r3
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29c      	uxth	r4, r3
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	8a3b      	ldrh	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	8a3b      	ldrh	r3, [r7, #16]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b94:	4413      	add	r3, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	f7ff ff06 	bl	80019b4 <LCD_Line>
		}
		if (cornername & 0x2) {
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03f      	beq.n	8001c32 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	8a3b      	ldrh	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	b298      	uxth	r0, r3
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	8a3b      	ldrh	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b29c      	uxth	r4, r3
 8001bca:	88ba      	ldrh	r2, [r7, #4]
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001bde:	4413      	add	r3, r2
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	2301      	movs	r3, #1
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	4622      	mov	r2, r4
 8001bee:	f7ff fee1 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b298      	uxth	r0, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	8a3b      	ldrh	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b299      	uxth	r1, r3
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b29c      	uxth	r4, r3
 8001c0a:	88ba      	ldrh	r2, [r7, #4]
 8001c0c:	8a3b      	ldrh	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	8a3b      	ldrh	r3, [r7, #16]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	2301      	movs	r3, #1
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	f7ff fec1 	bl	80019b4 <LCD_Line>
	while (x < y) {
 8001c32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	f6ff af4d 	blt.w	8001ada <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8001c4a:	b590      	push	{r4, r7, lr}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	4604      	mov	r4, r0
 8001c52:	4608      	mov	r0, r1
 8001c54:	4611      	mov	r1, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80bb      	strh	r3, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	803b      	strh	r3, [r7, #0]
	fillRect(x + r, y, length - 2 * r, width, color24);
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	8b3b      	ldrh	r3, [r7, #24]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b218      	sxth	r0, r3
 8001c72:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c76:	8b3b      	ldrh	r3, [r7, #24]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	4623      	mov	r3, r4
 8001c90:	f7ff fa6a 	bl	8001168 <fillRect>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	4413      	add	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	8b3b      	ldrh	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b218      	sxth	r0, r3
 8001ca8:	88ba      	ldrh	r2, [r7, #4]
 8001caa:	8b3b      	ldrh	r3, [r7, #24]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	b219      	sxth	r1, r3
 8001cb2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001cb6:	8b3b      	ldrh	r3, [r7, #24]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	883a      	ldrh	r2, [r7, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	f7ff fee0 	bl	8001a96 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	8b3b      	ldrh	r3, [r7, #24]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b218      	sxth	r0, r3
 8001ce0:	88ba      	ldrh	r2, [r7, #4]
 8001ce2:	8b3b      	ldrh	r3, [r7, #24]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b219      	sxth	r1, r3
 8001cea:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001cee:	8b3b      	ldrh	r3, [r7, #24]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	883a      	ldrh	r2, [r7, #0]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	4622      	mov	r2, r4
 8001d0a:	f7ff fec4 	bl	8001a96 <LCD_Circle_Fill_Helper>
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
	...

08001d18 <Check_Uart_update>:

/***************************************************************************************
 ************* The function is used to check for the button status change **************
*****************************************************************************************/
void Check_Uart_update(uint8_t *RelayStatus_arr_ESP_Para, uint8_t *RelayStatus_arr_STM_Para)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	uint8_t idx_relay;
	while(Flag_Uart == true)
 8001d22:	e051      	b.n	8001dc8 <Check_Uart_update+0xb0>
	{
		for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e047      	b.n	8001dba <Check_Uart_update+0xa2>
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <Check_Uart_update+0xc4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
			RelayStatus_arr_ESP_Para[idx_relay] = (Ctr_Dev & (1u << idx_relay)) ? RL_ON : RL_OFF;
 8001d32:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <Check_Uart_update+0xc8>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	440b      	add	r3, r1
 8001d46:	f002 0201 	and.w	r2, r2, #1
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
			if(RelayStatus_arr_ESP_Para[idx_relay] != RelayStatus_arr_STM_Para[idx_relay])
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d015      	beq.n	8001d8e <Check_Uart_update+0x76>
			{
				ReL_LoRa_Sen[idx_relay] = RelayStatus_arr_ESP_Para[idx_relay] | 0x80;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d70:	b2d1      	uxtb	r1, r2
 8001d72:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <Check_Uart_update+0xcc>)
 8001d74:	54d1      	strb	r1, [r2, r3]
				Send_Lora_UpdateRelay(idx_relay);
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fb31 	bl	80043e0 <Send_Lora_UpdateRelay>
				if(StDisplay == CTRL_SCREEN_1)
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <Check_Uart_update+0xd0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d103      	bne.n	8001d8e <Check_Uart_update+0x76>
				{
					Update_StatusBt(&RelayStatus_arr_ESP_Para[0], &RelayStatus_arr_STM_Para[0]);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 fe19 	bl	80039c0 <Update_StatusBt>
				}
			}
			RelayStatus_arr_STM_Para[idx_relay] = RelayStatus_arr_ESP_Para[idx_relay];
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	441a      	add	r2, r3
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	440b      	add	r3, r1
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
			if(idx_relay >= 9)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d907      	bls.n	8001db4 <Check_Uart_update+0x9c>
			{
				Flag_Uart = false;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <Check_Uart_update+0xd4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &byte_rx, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	4910      	ldr	r1, [pc, #64]	@ (8001df0 <Check_Uart_update+0xd8>)
 8001dae:	4811      	ldr	r0, [pc, #68]	@ (8001df4 <Check_Uart_update+0xdc>)
 8001db0:	f007 fa13 	bl	80091da <HAL_UART_Receive_IT>
		for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d9b4      	bls.n	8001d2a <Check_Uart_update+0x12>
			}
		}
		Ctr_Dev_Old = Ctr_Dev;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <Check_Uart_update+0xc8>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <Check_Uart_update+0xe0>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	while(Flag_Uart == true)
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <Check_Uart_update+0xd4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1a8      	bne.n	8001d24 <Check_Uart_update+0xc>
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200003c4 	.word	0x200003c4
 8001de0:	20000470 	.word	0x20000470
 8001de4:	20000568 	.word	0x20000568
 8001de8:	2000046d 	.word	0x2000046d
 8001dec:	2000047f 	.word	0x2000047f
 8001df0:	2000061c 	.word	0x2000061c
 8001df4:	2000040c 	.word	0x2000040c
 8001df8:	20000472 	.word	0x20000472

08001dfc <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	SPI2_TX_completed_flag = 1;
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <HAL_SPI_TxCpltCallback+0x1c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	00000000 	.word	0x00000000

08001e20 <isIrmsChanged>:

/***************************************************************************************
 ************* The function is used to check for the current value change **************
****************************************************************************************/
bool isIrmsChanged(float *currentData, float *lastData, bool *idx_updated)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
    bool isChanged = false;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]
    uint8_t idx_update_vl;

    for (idx_update_vl = 0; idx_update_vl < INDEX_VALUE; idx_update_vl++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	75bb      	strb	r3, [r7, #22]
 8001e34:	e04d      	b.n	8001ed2 <isIrmsChanged+0xb2>
    {
        if ((lastData[idx_update_vl] - currentData[idx_update_vl] >= VARIABILITY)
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	ed93 7a00 	vldr	s14, [r3]
 8001e42:	7dbb      	ldrb	r3, [r7, #22]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4413      	add	r3, r2
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	ee17 0a90 	vmov	r0, s15
 8001e56:	f7fe fb7f 	bl	8000558 <__aeabi_f2d>
 8001e5a:	a323      	add	r3, pc, #140	@ (adr r3, 8001ee8 <isIrmsChanged+0xc8>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fe58 	bl	8000b14 <__aeabi_dcmpge>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <isIrmsChanged+0x7e>
            || (currentData[idx_update_vl] - lastData[idx_update_vl] >= VARIABILITY))
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	ed93 7a00 	vldr	s14, [r3]
 8001e76:	7dbb      	ldrb	r3, [r7, #22]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb65 	bl	8000558 <__aeabi_f2d>
 8001e8e:	a316      	add	r3, pc, #88	@ (adr r3, 8001ee8 <isIrmsChanged+0xc8>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fe3e 	bl	8000b14 <__aeabi_dcmpge>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d011      	beq.n	8001ec2 <isIrmsChanged+0xa2>
        {
            currentData[idx_update_vl] = lastData[idx_update_vl];
 8001e9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	7dbb      	ldrb	r3, [r7, #22]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	440b      	add	r3, r1
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	601a      	str	r2, [r3, #0]
            idx_updated[idx_update_vl] = true;
 8001eb2:	7dbb      	ldrb	r3, [r7, #22]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
            isChanged = true;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	75fb      	strb	r3, [r7, #23]
 8001ec0:	e004      	b.n	8001ecc <isIrmsChanged+0xac>
        }
        else
        {
            idx_updated[idx_update_vl] = false;
 8001ec2:	7dbb      	ldrb	r3, [r7, #22]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    for (idx_update_vl = 0; idx_update_vl < INDEX_VALUE; idx_update_vl++)
 8001ecc:	7dbb      	ldrb	r3, [r7, #22]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	75bb      	strb	r3, [r7, #22]
 8001ed2:	7dbb      	ldrb	r3, [r7, #22]
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d9ae      	bls.n	8001e36 <isIrmsChanged+0x16>
        }
    }
    return isChanged;
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	9999999a 	.word	0x9999999a
 8001eec:	3fc99999 	.word	0x3fc99999

08001ef0 <Default_Display>:
/***************************************************************************************
 	 ************* The function is used to display the current value **************
*****************************************************************************************/
void Default_Display() {
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b08f      	sub	sp, #60	@ 0x3c
 8001ef4:	af02      	add	r7, sp, #8
	char buf[20];
	int col_width = 220, row_height = 50, start_x = 15, start_y = 5, line_thickness = 3;
 8001ef6:	23dc      	movs	r3, #220	@ 0xdc
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001efa:	2332      	movs	r3, #50	@ 0x32
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efe:	230f      	movs	r3, #15
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	2305      	movs	r3, #5
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	2303      	movs	r3, #3
 8001f08:	61bb      	str	r3, [r7, #24]
	int i;
	ILI9341_Fill_Screen(WHITE);
 8001f0a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f0e:	f7ff fc01 	bl	8001714 <ILI9341_Fill_Screen>

	/* ---- Create table ---- */
	for (i = 0; i <= 5; i++) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f16:	e01c      	b.n	8001f52 <Default_Display+0x62>
		fillRect(start_x, start_y + i * row_height, col_width * 2,
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	b218      	sxth	r0, r3
 8001f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	fb12 f303 	smulbb	r3, r2, r3
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b219      	sxth	r1, r3
 8001f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	f241 0482 	movw	r4, #4226	@ 0x1082
 8001f46:	9400      	str	r4, [sp, #0]
 8001f48:	f7ff f90e 	bl	8001168 <fillRect>
	for (i = 0; i <= 5; i++) {
 8001f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4e:	3301      	adds	r3, #1
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	dddf      	ble.n	8001f18 <Default_Display+0x28>
				line_thickness, GREY15);
	}
	for (i = 0; i <= 2; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f5c:	e023      	b.n	8001fa6 <Default_Display+0xb6>
		fillRect(start_x + i * col_width, start_y, line_thickness,
 8001f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	fb12 f303 	smulbb	r3, r2, r3
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b218      	sxth	r0, r3
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	b219      	sxth	r1, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	b21c      	sxth	r4, r3
				row_height * 5 + line_thickness, GREY15);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29b      	uxth	r3, r3
		fillRect(start_x + i * col_width, start_y, line_thickness,
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	f241 0282 	movw	r2, #4226	@ 0x1082
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	f7ff f8e4 	bl	8001168 <fillRect>
	for (i = 0; i <= 2; i++) {
 8001fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	ddd8      	ble.n	8001f5e <Default_Display+0x6e>
	}

	/* ---- Print Current value ---- */
	for (i = 0; i < 5; i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fb0:	e185      	b.n	80022be <Default_Display+0x3ce>
		if(NodeStatus_arr[i] == 1)
 8001fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80021f0 <Default_Display+0x300>)
 8001fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d15c      	bne.n	8002078 <Default_Display+0x188>
		{
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b218      	sxth	r0, r3
 8001fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	fb12 f303 	smulbb	r3, r2, r3
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 8001ffc:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	b29a      	uxth	r2, r3
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	b29b      	uxth	r3, r3
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	b29b      	uxth	r3, r3
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 800200e:	b21b      	sxth	r3, r3
 8002010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	4622      	mov	r2, r4
 8002018:	f7ff f8a6 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: %0.2fA", i + 1, irms1_arr[i]);
 800201c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201e:	1c5c      	adds	r4, r3, #1
 8002020:	4a74      	ldr	r2, [pc, #464]	@ (80021f4 <Default_Display+0x304>)
 8002022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa94 	bl	8000558 <__aeabi_f2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	1d38      	adds	r0, r7, #4
 8002036:	e9cd 2300 	strd	r2, r3, [sp]
 800203a:	4622      	mov	r2, r4
 800203c:	496e      	ldr	r1, [pc, #440]	@ (80021f8 <Default_Display+0x308>)
 800203e:	f008 fd61 	bl	800ab04 <siprintf>
			LCD_Font(start_x + 12, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAGENTA);
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	b29b      	uxth	r3, r3
 8002046:	330c      	adds	r3, #12
 8002048:	b298      	uxth	r0, r3
 800204a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204c:	b29a      	uxth	r2, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	b29b      	uxth	r3, r3
 8002052:	fb12 f303 	smulbb	r3, r2, r3
 8002056:	b29a      	uxth	r2, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	3323      	adds	r3, #35	@ 0x23
 8002062:	b299      	uxth	r1, r3
 8002064:	1d3a      	adds	r2, r7, #4
 8002066:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2301      	movs	r3, #1
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4b62      	ldr	r3, [pc, #392]	@ (80021fc <Default_Display+0x30c>)
 8002072:	f7ff fc25 	bl	80018c0 <LCD_Font>
 8002076:	e04f      	b.n	8002118 <Default_Display+0x228>
		}
		else
		{
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	b29a      	uxth	r2, r3
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4413      	add	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	b218      	sxth	r0, r3
 8002086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002088:	b29a      	uxth	r2, r3
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	b29b      	uxth	r3, r3
 800208e:	fb12 f303 	smulbb	r3, r2, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b29a      	uxth	r2, r3
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 80020a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 80020b6:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ce:	9200      	str	r2, [sp, #0]
 80020d0:	4622      	mov	r2, r4
 80020d2:	f7ff f849 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: TAT", i + 1);
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4948      	ldr	r1, [pc, #288]	@ (8002200 <Default_Display+0x310>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 fd10 	bl	800ab04 <siprintf>
			LCD_Font(start_x + 12, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAGENTA);
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	330c      	adds	r3, #12
 80020ea:	b298      	uxth	r0, r3
 80020ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	fb12 f303 	smulbb	r3, r2, r3
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	3323      	adds	r3, #35	@ 0x23
 8002104:	b299      	uxth	r1, r3
 8002106:	1d3a      	adds	r2, r7, #4
 8002108:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	2301      	movs	r3, #1
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <Default_Display+0x30c>)
 8002114:	f7ff fbd4 	bl	80018c0 <LCD_Font>
		}

		if(NodeStatus_arr[i + 5] == 1)
 8002118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211a:	3305      	adds	r3, #5
 800211c:	4a34      	ldr	r2, [pc, #208]	@ (80021f0 <Default_Display+0x300>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d171      	bne.n	8002208 <Default_Display+0x318>
		{
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	b29a      	uxth	r2, r3
 8002128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212a:	b29b      	uxth	r3, r3
 800212c:	4413      	add	r3, r2
 800212e:	b29a      	uxth	r2, r3
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	b29b      	uxth	r3, r3
 8002134:	4413      	add	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	b218      	sxth	r0, r3
 800213a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800213c:	b29a      	uxth	r2, r3
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	b29b      	uxth	r3, r3
 8002142:	fb12 f303 	smulbb	r3, r2, r3
 8002146:	b29a      	uxth	r2, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4413      	add	r3, r2
 800214e:	b29a      	uxth	r2, r3
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	b29b      	uxth	r3, r3
 8002154:	4413      	add	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	b29a      	uxth	r2, r3
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	b29b      	uxth	r3, r3
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 800216a:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	b29a      	uxth	r2, r3
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	b29b      	uxth	r3, r3
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 800217c:	b21b      	sxth	r3, r3
 800217e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	4622      	mov	r2, r4
 8002186:	f7fe ffef 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: %.2fA", i + 6, irms1_arr[i + 5]);
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	1d9c      	adds	r4, r3, #6
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	3305      	adds	r3, #5
 8002192:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <Default_Display+0x304>)
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9dc 	bl	8000558 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	1d38      	adds	r0, r7, #4
 80021a6:	e9cd 2300 	strd	r2, r3, [sp]
 80021aa:	4622      	mov	r2, r4
 80021ac:	4915      	ldr	r1, [pc, #84]	@ (8002204 <Default_Display+0x314>)
 80021ae:	f008 fca9 	bl	800ab04 <siprintf>
			LCD_Font(start_x + 12 + col_width, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	b29b      	uxth	r3, r3
 80021be:	330c      	adds	r3, #12
 80021c0:	b298      	uxth	r0, r3
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	fb12 f303 	smulbb	r3, r2, r3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3323      	adds	r3, #35	@ 0x23
 80021da:	b299      	uxth	r1, r3
 80021dc:	1d3a      	adds	r2, r7, #4
 80021de:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2301      	movs	r3, #1
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <Default_Display+0x30c>)
 80021ea:	f7ff fb69 	bl	80018c0 <LCD_Font>
 80021ee:	e063      	b.n	80022b8 <Default_Display+0x3c8>
 80021f0:	2000058c 	.word	0x2000058c
 80021f4:	200005a4 	.word	0x200005a4
 80021f8:	0800cd78 	.word	0x0800cd78
 80021fc:	0800f344 	.word	0x0800f344
 8002200:	0800cd88 	.word	0x0800cd88
 8002204:	0800cd98 	.word	0x0800cd98

		}
		else
		{
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	b29a      	uxth	r2, r3
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	b29b      	uxth	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	b29a      	uxth	r2, r3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4413      	add	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	b218      	sxth	r0, r3
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	b29a      	uxth	r2, r3
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	b29b      	uxth	r3, r3
 8002226:	fb12 f303 	smulbb	r3, r2, r3
 800222a:	b29a      	uxth	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4413      	add	r3, r2
 8002232:	b29a      	uxth	r2, r3
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 800223e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002240:	b29a      	uxth	r2, r3
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	b29b      	uxth	r3, r3
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	b29b      	uxth	r3, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 800224e:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	b29a      	uxth	r2, r3
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	b29b      	uxth	r3, r3
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	b29b      	uxth	r3, r3
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002260:	b21b      	sxth	r3, r3
 8002262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002266:	9200      	str	r2, [sp, #0]
 8002268:	4622      	mov	r2, r4
 800226a:	f7fe ff7d 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: TAT", i + 6);
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	1d9a      	adds	r2, r3, #6
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4922      	ldr	r1, [pc, #136]	@ (8002300 <Default_Display+0x410>)
 8002276:	4618      	mov	r0, r3
 8002278:	f008 fc44 	bl	800ab04 <siprintf>
			LCD_Font(start_x + 12 + col_width, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	b29a      	uxth	r2, r3
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	b29b      	uxth	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b29b      	uxth	r3, r3
 8002288:	330c      	adds	r3, #12
 800228a:	b298      	uxth	r0, r3
 800228c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228e:	b29a      	uxth	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	b29b      	uxth	r3, r3
 8002294:	fb12 f303 	smulbb	r3, r2, r3
 8002298:	b29a      	uxth	r2, r3
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3323      	adds	r3, #35	@ 0x23
 80022a4:	b299      	uxth	r1, r3
 80022a6:	1d3a      	adds	r2, r7, #4
 80022a8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	2301      	movs	r3, #1
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <Default_Display+0x414>)
 80022b4:	f7ff fb04 	bl	80018c0 <LCD_Font>
	for (i = 0; i < 5; i++) {
 80022b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ba:	3301      	adds	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	f77f ae76 	ble.w	8001fb2 <Default_Display+0xc2>
		}
	}
	/*---- Create Setting Button ----*/
	LCD_Rect_Round_Fill(100, 265, 270, 50, 5, GREEN);
 80022c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2305      	movs	r3, #5
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2332      	movs	r3, #50	@ 0x32
 80022d2:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80022d6:	f240 1109 	movw	r1, #265	@ 0x109
 80022da:	2064      	movs	r0, #100	@ 0x64
 80022dc:	f7ff fcb5 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(170, 298, "DIEU KHIEN", _Open_Sans_Bold_22, 1, BLACK);
 80022e0:	2300      	movs	r3, #0
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <Default_Display+0x418>)
 80022ea:	4a08      	ldr	r2, [pc, #32]	@ (800230c <Default_Display+0x41c>)
 80022ec:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 80022f0:	20aa      	movs	r0, #170	@ 0xaa
 80022f2:	f7ff fae5 	bl	80018c0 <LCD_Font>
}
 80022f6:	bf00      	nop
 80022f8:	3734      	adds	r7, #52	@ 0x34
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800cd88 	.word	0x0800cd88
 8002304:	0800f344 	.word	0x0800f344
 8002308:	0800d964 	.word	0x0800d964
 800230c:	0800cda8 	.word	0x0800cda8

08002310 <Screen2_Ctrl>:

/***************************************************************************************
 	 ************* The function is used to display the window control 2 **************
*****************************************************************************************/
void Screen2_Ctrl(void)
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b083      	sub	sp, #12
 8002314:	af02      	add	r7, sp, #8
	setAddrWindow(0, 0, 320, 480);
 8002316:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800231a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800231e:	2100      	movs	r1, #0
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fec7 	bl	80010b4 <setAddrWindow>
	ILI9341_Fill_Screen(WHITE);
 8002326:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800232a:	f7ff f9f3 	bl	8001714 <ILI9341_Fill_Screen>
	/* -------------------- Button 'BAT HET' -------------*/
	LCD_Rect_Round_Fill(Start_x + 20, Start_y, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_OLIVE);
 800232e:	4b7e      	ldr	r3, [pc, #504]	@ (8002528 <Screen2_Ctrl+0x218>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3314      	adds	r3, #20
 8002334:	b298      	uxth	r0, r3
 8002336:	4b7d      	ldr	r3, [pc, #500]	@ (800252c <Screen2_Ctrl+0x21c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461c      	mov	r4, r3
 800233c:	4b7c      	ldr	r3, [pc, #496]	@ (8002530 <Screen2_Ctrl+0x220>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3332      	adds	r3, #50	@ 0x32
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b7b      	ldr	r3, [pc, #492]	@ (8002534 <Screen2_Ctrl+0x224>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	331e      	adds	r3, #30
 800234a:	b29b      	uxth	r3, r3
 800234c:	f647 31e0 	movw	r1, #31712	@ 0x7be0
 8002350:	9101      	str	r1, [sp, #4]
 8002352:	2105      	movs	r1, #5
 8002354:	9100      	str	r1, [sp, #0]
 8002356:	4621      	mov	r1, r4
 8002358:	f7ff fc77 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(75, 72, "BAT HET", _Open_Sans_Bold_26, 1, BLACK);
 800235c:	2300      	movs	r3, #0
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	2301      	movs	r3, #1
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	4b74      	ldr	r3, [pc, #464]	@ (8002538 <Screen2_Ctrl+0x228>)
 8002366:	4a75      	ldr	r2, [pc, #468]	@ (800253c <Screen2_Ctrl+0x22c>)
 8002368:	2148      	movs	r1, #72	@ 0x48
 800236a:	204b      	movs	r0, #75	@ 0x4b
 800236c:	f7ff faa8 	bl	80018c0 <LCD_Font>

	/* -------------------- Button 'BAT HET' -------------*/
	LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_OLIVE);
 8002370:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <Screen2_Ctrl+0x218>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b6e      	ldr	r3, [pc, #440]	@ (8002530 <Screen2_Ctrl+0x220>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	b29b      	uxth	r3, r3
 800237e:	336e      	adds	r3, #110	@ 0x6e
 8002380:	b298      	uxth	r0, r3
 8002382:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <Screen2_Ctrl+0x21c>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461c      	mov	r4, r3
 8002388:	4b69      	ldr	r3, [pc, #420]	@ (8002530 <Screen2_Ctrl+0x220>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	3332      	adds	r3, #50	@ 0x32
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b68      	ldr	r3, [pc, #416]	@ (8002534 <Screen2_Ctrl+0x224>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	331e      	adds	r3, #30
 8002396:	b29b      	uxth	r3, r3
 8002398:	f647 31e0 	movw	r1, #31712	@ 0x7be0
 800239c:	9101      	str	r1, [sp, #4]
 800239e:	2105      	movs	r1, #5
 80023a0:	9100      	str	r1, [sp, #0]
 80023a2:	4621      	mov	r1, r4
 80023a4:	f7ff fc51 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(Start_x + Wigth_Bt + 145, 72, "TAT HET", _Open_Sans_Bold_26, 1, BLACK);
 80023a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002528 <Screen2_Ctrl+0x218>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b60      	ldr	r3, [pc, #384]	@ (8002530 <Screen2_Ctrl+0x220>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3391      	adds	r3, #145	@ 0x91
 80023b8:	b298      	uxth	r0, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2301      	movs	r3, #1
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002538 <Screen2_Ctrl+0x228>)
 80023c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <Screen2_Ctrl+0x230>)
 80023c6:	2148      	movs	r1, #72	@ 0x48
 80023c8:	f7ff fa7a 	bl	80018c0 <LCD_Font>

	/* -------------------- Button 'QUAY LAI' -------------*/
	LCD_Rect_Round_Fill(Start_x + 20, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, GREEN);
 80023cc:	4b56      	ldr	r3, [pc, #344]	@ (8002528 <Screen2_Ctrl+0x218>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	3314      	adds	r3, #20
 80023d2:	b298      	uxth	r0, r3
 80023d4:	4b55      	ldr	r3, [pc, #340]	@ (800252c <Screen2_Ctrl+0x21c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b56      	ldr	r3, [pc, #344]	@ (8002534 <Screen2_Ctrl+0x224>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3332      	adds	r3, #50	@ 0x32
 80023e4:	b299      	uxth	r1, r3
 80023e6:	4b52      	ldr	r3, [pc, #328]	@ (8002530 <Screen2_Ctrl+0x220>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	3332      	adds	r3, #50	@ 0x32
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <Screen2_Ctrl+0x224>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	331e      	adds	r3, #30
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80023fa:	9401      	str	r4, [sp, #4]
 80023fc:	2405      	movs	r4, #5
 80023fe:	9400      	str	r4, [sp, #0]
 8002400:	f7ff fc23 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(90, Start_y * 2 + 1.2 * High_Bt * 2, "<<===", _Open_Sans_Bold_26, 1, BLACK);
 8002404:	4b49      	ldr	r3, [pc, #292]	@ (800252c <Screen2_Ctrl+0x21c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f892 	bl	8000534 <__aeabi_i2d>
 8002410:	4604      	mov	r4, r0
 8002412:	460d      	mov	r5, r1
 8002414:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <Screen2_Ctrl+0x224>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f88b 	bl	8000534 <__aeabi_i2d>
 800241e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002422:	4b48      	ldr	r3, [pc, #288]	@ (8002544 <Screen2_Ctrl+0x234>)
 8002424:	f7fe f8f0 	bl	8000608 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	f7fd ff32 	bl	800029c <__adddf3>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7fd ff2c 	bl	800029c <__adddf3>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe fbb4 	bl	8000bb8 <__aeabi_d2uiz>
 8002450:	4603      	mov	r3, r0
 8002452:	b299      	uxth	r1, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2301      	movs	r3, #1
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4b36      	ldr	r3, [pc, #216]	@ (8002538 <Screen2_Ctrl+0x228>)
 800245e:	4a3a      	ldr	r2, [pc, #232]	@ (8002548 <Screen2_Ctrl+0x238>)
 8002460:	205a      	movs	r0, #90	@ 0x5a
 8002462:	f7ff fa2d 	bl	80018c0 <LCD_Font>

	if (0 == Buzzer)
 8002466:	4b39      	ldr	r3, [pc, #228]	@ (800254c <Screen2_Ctrl+0x23c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d172      	bne.n	8002554 <Screen2_Ctrl+0x244>
	{
		LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_RED);
 800246e:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <Screen2_Ctrl+0x218>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	4b2e      	ldr	r3, [pc, #184]	@ (8002530 <Screen2_Ctrl+0x220>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4413      	add	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	336e      	adds	r3, #110	@ 0x6e
 800247e:	b298      	uxth	r0, r3
 8002480:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <Screen2_Ctrl+0x21c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <Screen2_Ctrl+0x224>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	3332      	adds	r3, #50	@ 0x32
 8002490:	b299      	uxth	r1, r3
 8002492:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <Screen2_Ctrl+0x220>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	3332      	adds	r3, #50	@ 0x32
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <Screen2_Ctrl+0x224>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	331e      	adds	r3, #30
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 80024a6:	9401      	str	r4, [sp, #4]
 80024a8:	2405      	movs	r4, #5
 80024aa:	9400      	str	r4, [sp, #0]
 80024ac:	f7ff fbcd 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: TAT", _Open_Sans_Bold_26, 1, BLACK);
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <Screen2_Ctrl+0x218>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <Screen2_Ctrl+0x220>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	338c      	adds	r3, #140	@ 0x8c
 80024c0:	b29e      	uxth	r6, r3
 80024c2:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <Screen2_Ctrl+0x21c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f833 	bl	8000534 <__aeabi_i2d>
 80024ce:	4604      	mov	r4, r0
 80024d0:	460d      	mov	r5, r1
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <Screen2_Ctrl+0x224>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f82c 	bl	8000534 <__aeabi_i2d>
 80024dc:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <Screen2_Ctrl+0x234>)
 80024e2:	f7fe f891 	bl	8000608 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	f7fd fed3 	bl	800029c <__adddf3>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f7fd fecd 	bl	800029c <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe fb55 	bl	8000bb8 <__aeabi_d2uiz>
 800250e:	4603      	mov	r3, r0
 8002510:	b299      	uxth	r1, r3
 8002512:	2300      	movs	r3, #0
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	2301      	movs	r3, #1
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <Screen2_Ctrl+0x228>)
 800251c:	4a0c      	ldr	r2, [pc, #48]	@ (8002550 <Screen2_Ctrl+0x240>)
 800251e:	4630      	mov	r0, r6
 8002520:	f7ff f9ce 	bl	80018c0 <LCD_Font>
 8002524:	e071      	b.n	800260a <Screen2_Ctrl+0x2fa>
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	20000001 	.word	0x20000001
 8002530:	20000002 	.word	0x20000002
 8002534:	20000003 	.word	0x20000003
 8002538:	0800f344 	.word	0x0800f344
 800253c:	0800cdb4 	.word	0x0800cdb4
 8002540:	0800cdbc 	.word	0x0800cdbc
 8002544:	3ff33333 	.word	0x3ff33333
 8002548:	0800cdc4 	.word	0x0800cdc4
 800254c:	20000478 	.word	0x20000478
 8002550:	0800cdcc 	.word	0x0800cdcc
	}
	else
	{
		LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_PINK);
 8002554:	4b3a      	ldr	r3, [pc, #232]	@ (8002640 <Screen2_Ctrl+0x330>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <Screen2_Ctrl+0x334>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	336e      	adds	r3, #110	@ 0x6e
 8002564:	b298      	uxth	r0, r3
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <Screen2_Ctrl+0x338>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b37      	ldr	r3, [pc, #220]	@ (800264c <Screen2_Ctrl+0x33c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4413      	add	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	3332      	adds	r3, #50	@ 0x32
 8002576:	b299      	uxth	r1, r3
 8002578:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <Screen2_Ctrl+0x334>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3332      	adds	r3, #50	@ 0x32
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b32      	ldr	r3, [pc, #200]	@ (800264c <Screen2_Ctrl+0x33c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	331e      	adds	r3, #30
 8002586:	b29b      	uxth	r3, r3
 8002588:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 800258c:	9401      	str	r4, [sp, #4]
 800258e:	2405      	movs	r4, #5
 8002590:	9400      	str	r4, [sp, #0]
 8002592:	f7ff fb5a 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: BAT", _Open_Sans_Bold_26, 1, BLACK);
 8002596:	4b2a      	ldr	r3, [pc, #168]	@ (8002640 <Screen2_Ctrl+0x330>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4b29      	ldr	r3, [pc, #164]	@ (8002644 <Screen2_Ctrl+0x334>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	338c      	adds	r3, #140	@ 0x8c
 80025a6:	b29e      	uxth	r6, r3
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <Screen2_Ctrl+0x338>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ffc0 	bl	8000534 <__aeabi_i2d>
 80025b4:	4604      	mov	r4, r0
 80025b6:	460d      	mov	r5, r1
 80025b8:	4b24      	ldr	r3, [pc, #144]	@ (800264c <Screen2_Ctrl+0x33c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffb9 	bl	8000534 <__aeabi_i2d>
 80025c2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80025c6:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <Screen2_Ctrl+0x340>)
 80025c8:	f7fe f81e 	bl	8000608 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	f7fd fe60 	bl	800029c <__adddf3>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fd fe5a 	bl	800029c <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fae2 	bl	8000bb8 <__aeabi_d2uiz>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b299      	uxth	r1, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2301      	movs	r3, #1
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <Screen2_Ctrl+0x344>)
 8002602:	4a15      	ldr	r2, [pc, #84]	@ (8002658 <Screen2_Ctrl+0x348>)
 8002604:	4630      	mov	r0, r6
 8002606:	f7ff f95b 	bl	80018c0 <LCD_Font>
	}
	/*---- Create Setting Button ----*/
	LCD_Rect_Round_Fill(100, 245, 270, 60, 5, GREEN);
 800260a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	2305      	movs	r3, #5
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	233c      	movs	r3, #60	@ 0x3c
 8002616:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800261a:	21f5      	movs	r1, #245	@ 0xf5
 800261c:	2064      	movs	r0, #100	@ 0x64
 800261e:	f7ff fb14 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(185, 285, "TRO VE", _Open_Sans_Bold_26, 1, BLACK);
 8002622:	2300      	movs	r3, #0
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2301      	movs	r3, #1
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <Screen2_Ctrl+0x344>)
 800262c:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <Screen2_Ctrl+0x34c>)
 800262e:	f240 111d 	movw	r1, #285	@ 0x11d
 8002632:	20b9      	movs	r0, #185	@ 0xb9
 8002634:	f7ff f944 	bl	80018c0 <LCD_Font>
}
 8002638:	bf00      	nop
 800263a:	3704      	adds	r7, #4
 800263c:	46bd      	mov	sp, r7
 800263e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002640:	20000000 	.word	0x20000000
 8002644:	20000002 	.word	0x20000002
 8002648:	20000001 	.word	0x20000001
 800264c:	20000003 	.word	0x20000003
 8002650:	3ff33333 	.word	0x3ff33333
 8002654:	0800f344 	.word	0x0800f344
 8002658:	0800cdd8 	.word	0x0800cdd8
 800265c:	0800cde4 	.word	0x0800cde4

08002660 <Screen1_Ctrl>:
/***************************************************************************************
 	 ************* The function is used to display the window control 1 **************
*****************************************************************************************/
void Screen1_Ctrl(void) {
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af02      	add	r7, sp, #8
	setAddrWindow(0, 0, 320, 480);
 8002666:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800266a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800266e:	2100      	movs	r1, #0
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe fd1f 	bl	80010b4 <setAddrWindow>
	ILI9341_Fill_Screen(WHITE);
 8002676:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800267a:	f7ff f84b 	bl	8001714 <ILI9341_Fill_Screen>
	uint8_t i;
	for (i = 0; i < 3; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	e331      	b.n	8002ce8 <Screen1_Ctrl+0x688>
	{
		/* ---- Check-update status ReL1-3 ---- */
		if (0 == RelayStatus_arr_Node[i])
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	4abf      	ldr	r2, [pc, #764]	@ (8002984 <Screen1_Ctrl+0x324>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d17a      	bne.n	8002784 <Screen1_Ctrl+0x124>
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 800268e:	4bbe      	ldr	r3, [pc, #760]	@ (8002988 <Screen1_Ctrl+0x328>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff4e 	bl	8000534 <__aeabi_i2d>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4abb      	ldr	r2, [pc, #748]	@ (800298c <Screen1_Ctrl+0x32c>)
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff44 	bl	8000534 <__aeabi_i2d>
 80026ac:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80026b0:	4bb7      	ldr	r3, [pc, #732]	@ (8002990 <Screen1_Ctrl+0x330>)
 80026b2:	f7fd ffa9 	bl	8000608 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4620      	mov	r0, r4
 80026bc:	4629      	mov	r1, r5
 80026be:	f7fd fded 	bl	800029c <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa75 	bl	8000bb8 <__aeabi_d2uiz>
 80026ce:	4603      	mov	r3, r0
 80026d0:	b298      	uxth	r0, r3
 80026d2:	4bb0      	ldr	r3, [pc, #704]	@ (8002994 <Screen1_Ctrl+0x334>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4bac      	ldr	r3, [pc, #688]	@ (800298c <Screen1_Ctrl+0x32c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4bae      	ldr	r3, [pc, #696]	@ (8002998 <Screen1_Ctrl+0x338>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461c      	mov	r4, r3
 80026e4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2305      	movs	r3, #5
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4623      	mov	r3, r4
 80026f0:	f7ff faab 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: TAT", i + 1);
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	3301      	adds	r3, #1
 80026f8:	461a      	mov	r2, r3
 80026fa:	49a8      	ldr	r1, [pc, #672]	@ (800299c <Screen1_Ctrl+0x33c>)
 80026fc:	48a8      	ldr	r0, [pc, #672]	@ (80029a0 <Screen1_Ctrl+0x340>)
 80026fe:	f008 fa01 	bl	800ab04 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002702:	4ba1      	ldr	r3, [pc, #644]	@ (8002988 <Screen1_Ctrl+0x328>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd ff14 	bl	8000534 <__aeabi_i2d>
 800270c:	4604      	mov	r4, r0
 800270e:	460d      	mov	r5, r1
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4a9e      	ldr	r2, [pc, #632]	@ (800298c <Screen1_Ctrl+0x32c>)
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff0a 	bl	8000534 <__aeabi_i2d>
 8002720:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002724:	4b9a      	ldr	r3, [pc, #616]	@ (8002990 <Screen1_Ctrl+0x330>)
 8002726:	f7fd ff6f 	bl	8000608 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	f7fd fdb3 	bl	800029c <__adddf3>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4614      	mov	r4, r2
 800273c:	461d      	mov	r5, r3
 800273e:	4b99      	ldr	r3, [pc, #612]	@ (80029a4 <Screen1_Ctrl+0x344>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd fef6 	bl	8000534 <__aeabi_i2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fda4 	bl	800029c <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa2c 	bl	8000bb8 <__aeabi_d2uiz>
 8002760:	4603      	mov	r3, r0
 8002762:	b298      	uxth	r0, r3
 8002764:	4b8b      	ldr	r3, [pc, #556]	@ (8002994 <Screen1_Ctrl+0x334>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b8f      	ldr	r3, [pc, #572]	@ (80029a8 <Screen1_Ctrl+0x348>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	b299      	uxth	r1, r3
 8002772:	2300      	movs	r3, #0
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2301      	movs	r3, #1
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4b8c      	ldr	r3, [pc, #560]	@ (80029ac <Screen1_Ctrl+0x34c>)
 800277c:	4a88      	ldr	r2, [pc, #544]	@ (80029a0 <Screen1_Ctrl+0x340>)
 800277e:	f7ff f89f 	bl	80018c0 <LCD_Font>
 8002782:	e079      	b.n	8002878 <Screen1_Ctrl+0x218>
		}
		else
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8002784:	4b80      	ldr	r3, [pc, #512]	@ (8002988 <Screen1_Ctrl+0x328>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fed3 	bl	8000534 <__aeabi_i2d>
 800278e:	4604      	mov	r4, r0
 8002790:	460d      	mov	r5, r1
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4a7d      	ldr	r2, [pc, #500]	@ (800298c <Screen1_Ctrl+0x32c>)
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fec9 	bl	8000534 <__aeabi_i2d>
 80027a2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80027a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002990 <Screen1_Ctrl+0x330>)
 80027a8:	f7fd ff2e 	bl	8000608 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4620      	mov	r0, r4
 80027b2:	4629      	mov	r1, r5
 80027b4:	f7fd fd72 	bl	800029c <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f9fa 	bl	8000bb8 <__aeabi_d2uiz>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b298      	uxth	r0, r3
 80027c8:	4b72      	ldr	r3, [pc, #456]	@ (8002994 <Screen1_Ctrl+0x334>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	4b6f      	ldr	r3, [pc, #444]	@ (800298c <Screen1_Ctrl+0x32c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b70      	ldr	r3, [pc, #448]	@ (8002998 <Screen1_Ctrl+0x338>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461c      	mov	r4, r3
 80027da:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2305      	movs	r3, #5
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4623      	mov	r3, r4
 80027e6:	f7ff fa30 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: BAT", i + 1);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	3301      	adds	r3, #1
 80027ee:	461a      	mov	r2, r3
 80027f0:	496f      	ldr	r1, [pc, #444]	@ (80029b0 <Screen1_Ctrl+0x350>)
 80027f2:	486b      	ldr	r0, [pc, #428]	@ (80029a0 <Screen1_Ctrl+0x340>)
 80027f4:	f008 f986 	bl	800ab04 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 80027f8:	4b63      	ldr	r3, [pc, #396]	@ (8002988 <Screen1_Ctrl+0x328>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe99 	bl	8000534 <__aeabi_i2d>
 8002802:	4604      	mov	r4, r0
 8002804:	460d      	mov	r5, r1
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4a60      	ldr	r2, [pc, #384]	@ (800298c <Screen1_Ctrl+0x32c>)
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe8f 	bl	8000534 <__aeabi_i2d>
 8002816:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <Screen1_Ctrl+0x330>)
 800281c:	f7fd fef4 	bl	8000608 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd fd38 	bl	800029c <__adddf3>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4614      	mov	r4, r2
 8002832:	461d      	mov	r5, r3
 8002834:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <Screen1_Ctrl+0x344>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe7b 	bl	8000534 <__aeabi_i2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fd fd29 	bl	800029c <__adddf3>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe f9b1 	bl	8000bb8 <__aeabi_d2uiz>
 8002856:	4603      	mov	r3, r0
 8002858:	b298      	uxth	r0, r3
 800285a:	4b4e      	ldr	r3, [pc, #312]	@ (8002994 <Screen1_Ctrl+0x334>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <Screen1_Ctrl+0x348>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4413      	add	r3, r2
 8002866:	b299      	uxth	r1, r3
 8002868:	2300      	movs	r3, #0
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <Screen1_Ctrl+0x34c>)
 8002872:	4a4b      	ldr	r2, [pc, #300]	@ (80029a0 <Screen1_Ctrl+0x340>)
 8002874:	f7ff f824 	bl	80018c0 <LCD_Font>
		}
		/* ---- Check-update status ReL4-6 ---- */
		if (0 == RelayStatus_arr_Node[i + 3]) {
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	3303      	adds	r3, #3
 800287c:	4a41      	ldr	r2, [pc, #260]	@ (8002984 <Screen1_Ctrl+0x324>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 8097 	bne.w	80029b4 <Screen1_Ctrl+0x354>
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002886:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <Screen1_Ctrl+0x328>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe52 	bl	8000534 <__aeabi_i2d>
 8002890:	4604      	mov	r4, r0
 8002892:	460d      	mov	r5, r1
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4a3d      	ldr	r2, [pc, #244]	@ (800298c <Screen1_Ctrl+0x32c>)
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe48 	bl	8000534 <__aeabi_i2d>
 80028a4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <Screen1_Ctrl+0x330>)
 80028aa:	f7fd fead 	bl	8000608 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f7fd fcf1 	bl	800029c <__adddf3>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7fe f979 	bl	8000bb8 <__aeabi_d2uiz>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b298      	uxth	r0, r3
 80028ca:	4b32      	ldr	r3, [pc, #200]	@ (8002994 <Screen1_Ctrl+0x334>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	334b      	adds	r3, #75	@ 0x4b
 80028d0:	b299      	uxth	r1, r3
 80028d2:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <Screen1_Ctrl+0x32c>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <Screen1_Ctrl+0x338>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461c      	mov	r4, r3
 80028de:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	2305      	movs	r3, #5
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4623      	mov	r3, r4
 80028ea:	f7ff f9ae 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: TAT", i + 3 + 1);
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	3304      	adds	r3, #4
 80028f2:	461a      	mov	r2, r3
 80028f4:	4929      	ldr	r1, [pc, #164]	@ (800299c <Screen1_Ctrl+0x33c>)
 80028f6:	482a      	ldr	r0, [pc, #168]	@ (80029a0 <Screen1_Ctrl+0x340>)
 80028f8:	f008 f904 	bl	800ab04 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <Screen1_Ctrl+0x328>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe17 	bl	8000534 <__aeabi_i2d>
 8002906:	4604      	mov	r4, r0
 8002908:	460d      	mov	r5, r1
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <Screen1_Ctrl+0x32c>)
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe0d 	bl	8000534 <__aeabi_i2d>
 800291a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800291e:	4b1c      	ldr	r3, [pc, #112]	@ (8002990 <Screen1_Ctrl+0x330>)
 8002920:	f7fd fe72 	bl	8000608 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fcb6 	bl	800029c <__adddf3>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <Screen1_Ctrl+0x344>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdf9 	bl	8000534 <__aeabi_i2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f7fd fca7 	bl	800029c <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f92f 	bl	8000bb8 <__aeabi_d2uiz>
 800295a:	4603      	mov	r3, r0
 800295c:	b298      	uxth	r0, r3
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <Screen1_Ctrl+0x334>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <Screen1_Ctrl+0x348>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4413      	add	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	334b      	adds	r3, #75	@ 0x4b
 800296e:	b299      	uxth	r1, r3
 8002970:	2300      	movs	r3, #0
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2301      	movs	r3, #1
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <Screen1_Ctrl+0x34c>)
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <Screen1_Ctrl+0x340>)
 800297c:	f7fe ffa0 	bl	80018c0 <LCD_Font>
 8002980:	e095      	b.n	8002aae <Screen1_Ctrl+0x44e>
 8002982:	bf00      	nop
 8002984:	20000580 	.word	0x20000580
 8002988:	20000000 	.word	0x20000000
 800298c:	20000002 	.word	0x20000002
 8002990:	3ff33333 	.word	0x3ff33333
 8002994:	20000001 	.word	0x20000001
 8002998:	20000003 	.word	0x20000003
 800299c:	0800cdec 	.word	0x0800cdec
 80029a0:	20000458 	.word	0x20000458
 80029a4:	2000000a 	.word	0x2000000a
 80029a8:	2000000b 	.word	0x2000000b
 80029ac:	0800d964 	.word	0x0800d964
 80029b0:	0800cdf8 	.word	0x0800cdf8
		}
		else
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 80029b4:	4b80      	ldr	r3, [pc, #512]	@ (8002bb8 <Screen1_Ctrl+0x558>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdbb 	bl	8000534 <__aeabi_i2d>
 80029be:	4604      	mov	r4, r0
 80029c0:	460d      	mov	r5, r1
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4a7d      	ldr	r2, [pc, #500]	@ (8002bbc <Screen1_Ctrl+0x55c>)
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdb1 	bl	8000534 <__aeabi_i2d>
 80029d2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80029d6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc0 <Screen1_Ctrl+0x560>)
 80029d8:	f7fd fe16 	bl	8000608 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fc5a 	bl	800029c <__adddf3>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f8e2 	bl	8000bb8 <__aeabi_d2uiz>
 80029f4:	4603      	mov	r3, r0
 80029f6:	b298      	uxth	r0, r3
 80029f8:	4b72      	ldr	r3, [pc, #456]	@ (8002bc4 <Screen1_Ctrl+0x564>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	334b      	adds	r3, #75	@ 0x4b
 80029fe:	b299      	uxth	r1, r3
 8002a00:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <Screen1_Ctrl+0x55c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b70      	ldr	r3, [pc, #448]	@ (8002bc8 <Screen1_Ctrl+0x568>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2305      	movs	r3, #5
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4623      	mov	r3, r4
 8002a18:	f7ff f917 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: BAT", i + 3 + 1);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	461a      	mov	r2, r3
 8002a22:	496a      	ldr	r1, [pc, #424]	@ (8002bcc <Screen1_Ctrl+0x56c>)
 8002a24:	486a      	ldr	r0, [pc, #424]	@ (8002bd0 <Screen1_Ctrl+0x570>)
 8002a26:	f008 f86d 	bl	800ab04 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002a2a:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <Screen1_Ctrl+0x558>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd80 	bl	8000534 <__aeabi_i2d>
 8002a34:	4604      	mov	r4, r0
 8002a36:	460d      	mov	r5, r1
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	4a60      	ldr	r2, [pc, #384]	@ (8002bbc <Screen1_Ctrl+0x55c>)
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd76 	bl	8000534 <__aeabi_i2d>
 8002a48:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc0 <Screen1_Ctrl+0x560>)
 8002a4e:	f7fd fddb 	bl	8000608 <__aeabi_dmul>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4620      	mov	r0, r4
 8002a58:	4629      	mov	r1, r5
 8002a5a:	f7fd fc1f 	bl	800029c <__adddf3>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd4 <Screen1_Ctrl+0x574>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd62 	bl	8000534 <__aeabi_i2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fc10 	bl	800029c <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f898 	bl	8000bb8 <__aeabi_d2uiz>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	b298      	uxth	r0, r3
 8002a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc4 <Screen1_Ctrl+0x564>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <Screen1_Ctrl+0x578>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	334b      	adds	r3, #75	@ 0x4b
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bdc <Screen1_Ctrl+0x57c>)
 8002aa8:	4a49      	ldr	r2, [pc, #292]	@ (8002bd0 <Screen1_Ctrl+0x570>)
 8002aaa:	f7fe ff09 	bl	80018c0 <LCD_Font>
		}
		/* ---- Check-update status ReL7-9 ---- */
		if (0 == RelayStatus_arr_Node[i + 6])
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	3306      	adds	r3, #6
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	@ (8002be0 <Screen1_Ctrl+0x580>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8096 	bne.w	8002be8 <Screen1_Ctrl+0x588>
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002abc:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb8 <Screen1_Ctrl+0x558>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd37 	bl	8000534 <__aeabi_i2d>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	460d      	mov	r5, r1
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bbc <Screen1_Ctrl+0x55c>)
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd2d 	bl	8000534 <__aeabi_i2d>
 8002ada:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002ade:	4b38      	ldr	r3, [pc, #224]	@ (8002bc0 <Screen1_Ctrl+0x560>)
 8002ae0:	f7fd fd92 	bl	8000608 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4629      	mov	r1, r5
 8002aec:	f7fd fbd6 	bl	800029c <__adddf3>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fe f85e 	bl	8000bb8 <__aeabi_d2uiz>
 8002afc:	4603      	mov	r3, r0
 8002afe:	b298      	uxth	r0, r3
 8002b00:	4b30      	ldr	r3, [pc, #192]	@ (8002bc4 <Screen1_Ctrl+0x564>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	3396      	adds	r3, #150	@ 0x96
 8002b06:	b299      	uxth	r1, r3
 8002b08:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <Screen1_Ctrl+0x55c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <Screen1_Ctrl+0x568>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461c      	mov	r4, r3
 8002b14:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	2305      	movs	r3, #5
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4623      	mov	r3, r4
 8002b20:	f7ff f893 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: TAT", i + 6 + 1);
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	3307      	adds	r3, #7
 8002b28:	461a      	mov	r2, r3
 8002b2a:	492e      	ldr	r1, [pc, #184]	@ (8002be4 <Screen1_Ctrl+0x584>)
 8002b2c:	4828      	ldr	r0, [pc, #160]	@ (8002bd0 <Screen1_Ctrl+0x570>)
 8002b2e:	f007 ffe9 	bl	800ab04 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 2 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002b32:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <Screen1_Ctrl+0x558>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcfc 	bl	8000534 <__aeabi_i2d>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	@ (8002bbc <Screen1_Ctrl+0x55c>)
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fcf2 	bl	8000534 <__aeabi_i2d>
 8002b50:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002b54:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <Screen1_Ctrl+0x560>)
 8002b56:	f7fd fd57 	bl	8000608 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fb9b 	bl	800029c <__adddf3>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4614      	mov	r4, r2
 8002b6c:	461d      	mov	r5, r3
 8002b6e:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <Screen1_Ctrl+0x574>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fcde 	bl	8000534 <__aeabi_i2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4629      	mov	r1, r5
 8002b80:	f7fd fb8c 	bl	800029c <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fe f814 	bl	8000bb8 <__aeabi_d2uiz>
 8002b90:	4603      	mov	r3, r0
 8002b92:	b298      	uxth	r0, r3
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <Screen1_Ctrl+0x564>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <Screen1_Ctrl+0x578>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3396      	adds	r3, #150	@ 0x96
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	2301      	movs	r3, #1
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <Screen1_Ctrl+0x57c>)
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <Screen1_Ctrl+0x570>)
 8002bb2:	f7fe fe85 	bl	80018c0 <LCD_Font>
 8002bb6:	e094      	b.n	8002ce2 <Screen1_Ctrl+0x682>
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000002 	.word	0x20000002
 8002bc0:	3ff33333 	.word	0x3ff33333
 8002bc4:	20000001 	.word	0x20000001
 8002bc8:	20000003 	.word	0x20000003
 8002bcc:	0800cdf8 	.word	0x0800cdf8
 8002bd0:	20000458 	.word	0x20000458
 8002bd4:	2000000a 	.word	0x2000000a
 8002bd8:	2000000b 	.word	0x2000000b
 8002bdc:	0800d964 	.word	0x0800d964
 8002be0:	20000580 	.word	0x20000580
 8002be4:	0800cdec 	.word	0x0800cdec
		}
		else
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8002be8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d54 <Screen1_Ctrl+0x6f4>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fca1 	bl	8000534 <__aeabi_i2d>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4a57      	ldr	r2, [pc, #348]	@ (8002d58 <Screen1_Ctrl+0x6f8>)
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fc97 	bl	8000534 <__aeabi_i2d>
 8002c06:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002c0a:	4b54      	ldr	r3, [pc, #336]	@ (8002d5c <Screen1_Ctrl+0x6fc>)
 8002c0c:	f7fd fcfc 	bl	8000608 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fb40 	bl	800029c <__adddf3>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd ffc8 	bl	8000bb8 <__aeabi_d2uiz>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b298      	uxth	r0, r3
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d60 <Screen1_Ctrl+0x700>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3396      	adds	r3, #150	@ 0x96
 8002c32:	b299      	uxth	r1, r3
 8002c34:	4b48      	ldr	r3, [pc, #288]	@ (8002d58 <Screen1_Ctrl+0x6f8>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <Screen1_Ctrl+0x704>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461c      	mov	r4, r3
 8002c40:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2305      	movs	r3, #5
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	f7fe fffd 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: BAT", i + 6 + 1);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	3307      	adds	r3, #7
 8002c54:	461a      	mov	r2, r3
 8002c56:	4944      	ldr	r1, [pc, #272]	@ (8002d68 <Screen1_Ctrl+0x708>)
 8002c58:	4844      	ldr	r0, [pc, #272]	@ (8002d6c <Screen1_Ctrl+0x70c>)
 8002c5a:	f007 ff53 	bl	800ab04 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 2 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d54 <Screen1_Ctrl+0x6f4>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc66 	bl	8000534 <__aeabi_i2d>
 8002c68:	4604      	mov	r4, r0
 8002c6a:	460d      	mov	r5, r1
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d58 <Screen1_Ctrl+0x6f8>)
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc5c 	bl	8000534 <__aeabi_i2d>
 8002c7c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002c80:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <Screen1_Ctrl+0x6fc>)
 8002c82:	f7fd fcc1 	bl	8000608 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd fb05 	bl	800029c <__adddf3>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4614      	mov	r4, r2
 8002c98:	461d      	mov	r5, r3
 8002c9a:	4b35      	ldr	r3, [pc, #212]	@ (8002d70 <Screen1_Ctrl+0x710>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc48 	bl	8000534 <__aeabi_i2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd faf6 	bl	800029c <__adddf3>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd ff7e 	bl	8000bb8 <__aeabi_d2uiz>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	b298      	uxth	r0, r3
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <Screen1_Ctrl+0x700>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <Screen1_Ctrl+0x714>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3396      	adds	r3, #150	@ 0x96
 8002cd0:	b299      	uxth	r1, r3
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <Screen1_Ctrl+0x718>)
 8002cdc:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <Screen1_Ctrl+0x70c>)
 8002cde:	f7fe fdef 	bl	80018c0 <LCD_Font>
	for (i = 0; i < 3; i++)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	71fb      	strb	r3, [r7, #7]
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	f67f acca 	bls.w	8002684 <Screen1_Ctrl+0x24>
		}
	}
	/* ---- Check-update status ReL10 ---- */
	if (0 == RelayStatus_arr_Node[9])
 8002cf0:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <Screen1_Ctrl+0x71c>)
 8002cf2:	7a5b      	ldrb	r3, [r3, #9]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d145      	bne.n	8002d84 <Screen1_Ctrl+0x724>
	{
		LCD_Rect_Round_Fill(Start_x, Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <Screen1_Ctrl+0x6f4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <Screen1_Ctrl+0x700>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	33e1      	adds	r3, #225	@ 0xe1
 8002d04:	b299      	uxth	r1, r3
 8002d06:	4b14      	ldr	r3, [pc, #80]	@ (8002d58 <Screen1_Ctrl+0x6f8>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <Screen1_Ctrl+0x704>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461c      	mov	r4, r3
 8002d12:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	2305      	movs	r3, #5
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	f7fe ff94 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + PoStart_x, Start_y + PoStart_y + 75 * 3, "N10: TAT", _Open_Sans_Bold_22, 1, BLACK);
 8002d22:	4b0c      	ldr	r3, [pc, #48]	@ (8002d54 <Screen1_Ctrl+0x6f4>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <Screen1_Ctrl+0x710>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b298      	uxth	r0, r3
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <Screen1_Ctrl+0x700>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <Screen1_Ctrl+0x714>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	33e1      	adds	r3, #225	@ 0xe1
 8002d40:	b299      	uxth	r1, r3
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2301      	movs	r3, #1
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <Screen1_Ctrl+0x718>)
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d80 <Screen1_Ctrl+0x720>)
 8002d4e:	f7fe fdb7 	bl	80018c0 <LCD_Font>
 8002d52:	e044      	b.n	8002dde <Screen1_Ctrl+0x77e>
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000002 	.word	0x20000002
 8002d5c:	3ff33333 	.word	0x3ff33333
 8002d60:	20000001 	.word	0x20000001
 8002d64:	20000003 	.word	0x20000003
 8002d68:	0800cdf8 	.word	0x0800cdf8
 8002d6c:	20000458 	.word	0x20000458
 8002d70:	2000000a 	.word	0x2000000a
 8002d74:	2000000b 	.word	0x2000000b
 8002d78:	0800d964 	.word	0x0800d964
 8002d7c:	20000580 	.word	0x20000580
 8002d80:	0800ce04 	.word	0x0800ce04
	}
	else
	{
		LCD_Rect_Round_Fill(Start_x, Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8002d84:	4b91      	ldr	r3, [pc, #580]	@ (8002fcc <Screen1_Ctrl+0x96c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4b91      	ldr	r3, [pc, #580]	@ (8002fd0 <Screen1_Ctrl+0x970>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	33e1      	adds	r3, #225	@ 0xe1
 8002d90:	b299      	uxth	r1, r3
 8002d92:	4b90      	ldr	r3, [pc, #576]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd8 <Screen1_Ctrl+0x978>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2305      	movs	r3, #5
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4623      	mov	r3, r4
 8002daa:	f7fe ff4e 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + PoStart_x, Start_y + PoStart_y + 75 * 3, "N10: BAT", _Open_Sans_Bold_22, 1, BLACK);
 8002dae:	4b87      	ldr	r3, [pc, #540]	@ (8002fcc <Screen1_Ctrl+0x96c>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b89      	ldr	r3, [pc, #548]	@ (8002fdc <Screen1_Ctrl+0x97c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	b298      	uxth	r0, r3
 8002dbc:	4b84      	ldr	r3, [pc, #528]	@ (8002fd0 <Screen1_Ctrl+0x970>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b87      	ldr	r3, [pc, #540]	@ (8002fe0 <Screen1_Ctrl+0x980>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	33e1      	adds	r3, #225	@ 0xe1
 8002dcc:	b299      	uxth	r1, r3
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4b83      	ldr	r3, [pc, #524]	@ (8002fe4 <Screen1_Ctrl+0x984>)
 8002dd8:	4a83      	ldr	r2, [pc, #524]	@ (8002fe8 <Screen1_Ctrl+0x988>)
 8002dda:	f7fe fd71 	bl	80018c0 <LCD_Font>
	}
	/* ---- Next Button ----*/
	LCD_Rect_Round_Fill(Start_x + (Wigth_Bt * 1.2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, GREEN);
 8002dde:	4b7b      	ldr	r3, [pc, #492]	@ (8002fcc <Screen1_Ctrl+0x96c>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fba6 	bl	8000534 <__aeabi_i2d>
 8002de8:	4604      	mov	r4, r0
 8002dea:	460d      	mov	r5, r1
 8002dec:	4b79      	ldr	r3, [pc, #484]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fb9f 	bl	8000534 <__aeabi_i2d>
 8002df6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002fec <Screen1_Ctrl+0x98c>)
 8002dfc:	f7fd fc04 	bl	8000608 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd fa48 	bl	800029c <__adddf3>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd fed0 	bl	8000bb8 <__aeabi_d2uiz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	b298      	uxth	r0, r3
 8002e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd0 <Screen1_Ctrl+0x970>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	33e1      	adds	r3, #225	@ 0xe1
 8002e22:	b299      	uxth	r1, r3
 8002e24:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd8 <Screen1_Ctrl+0x978>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461c      	mov	r4, r3
 8002e30:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	2305      	movs	r3, #5
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	f7fe ff05 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(Start_x + (1 * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y + 75 * 3, "TRO VE", _Open_Sans_Bold_22, 1, BLACK);
 8002e40:	4b62      	ldr	r3, [pc, #392]	@ (8002fcc <Screen1_Ctrl+0x96c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb75 	bl	8000534 <__aeabi_i2d>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	4b61      	ldr	r3, [pc, #388]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb6e 	bl	8000534 <__aeabi_i2d>
 8002e58:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002e5c:	4b63      	ldr	r3, [pc, #396]	@ (8002fec <Screen1_Ctrl+0x98c>)
 8002e5e:	f7fd fbd3 	bl	8000608 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd fa17 	bl	800029c <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	461d      	mov	r5, r3
 8002e76:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <Screen1_Ctrl+0x97c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb5a 	bl	8000534 <__aeabi_i2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4620      	mov	r0, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	f7fd fa08 	bl	800029c <__adddf3>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fd fe90 	bl	8000bb8 <__aeabi_d2uiz>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	b298      	uxth	r0, r3
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd0 <Screen1_Ctrl+0x970>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe0 <Screen1_Ctrl+0x980>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	33e1      	adds	r3, #225	@ 0xe1
 8002eac:	b299      	uxth	r1, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <Screen1_Ctrl+0x984>)
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff0 <Screen1_Ctrl+0x990>)
 8002eba:	f7fe fd01 	bl	80018c0 <LCD_Font>

	/* ---- Back Button ---- */
	LCD_Rect_Round_Fill(Start_x + (Wigth_Bt * 1.2 * 2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, GREEN);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	@ (8002fcc <Screen1_Ctrl+0x96c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fb36 	bl	8000534 <__aeabi_i2d>
 8002ec8:	4604      	mov	r4, r0
 8002eca:	460d      	mov	r5, r1
 8002ecc:	4b41      	ldr	r3, [pc, #260]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fb2f 	bl	8000534 <__aeabi_i2d>
 8002ed6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002eda:	4b44      	ldr	r3, [pc, #272]	@ (8002fec <Screen1_Ctrl+0x98c>)
 8002edc:	f7fd fb94 	bl	8000608 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	f7fd f9d6 	bl	800029c <__adddf3>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f9d0 	bl	800029c <__adddf3>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7fd fe58 	bl	8000bb8 <__aeabi_d2uiz>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	b298      	uxth	r0, r3
 8002f0c:	4b30      	ldr	r3, [pc, #192]	@ (8002fd0 <Screen1_Ctrl+0x970>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	33e1      	adds	r3, #225	@ 0xe1
 8002f12:	b299      	uxth	r1, r3
 8002f14:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <Screen1_Ctrl+0x978>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461c      	mov	r4, r3
 8002f20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2305      	movs	r3, #5
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	f7fe fe8d 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(Start_x + (2 * Wigth_Bt * 1.2) + PoStart_x + 5, Start_y + 75 * 3 + PoStart_y, "===>>", _Open_Sans_Bold_24, 1, BLACK);
 8002f30:	4b26      	ldr	r3, [pc, #152]	@ (8002fcc <Screen1_Ctrl+0x96c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fafd 	bl	8000534 <__aeabi_i2d>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4b25      	ldr	r3, [pc, #148]	@ (8002fd4 <Screen1_Ctrl+0x974>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd faf5 	bl	8000534 <__aeabi_i2d>
 8002f4a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002f4e:	4b27      	ldr	r3, [pc, #156]	@ (8002fec <Screen1_Ctrl+0x98c>)
 8002f50:	f7fd fb5a 	bl	8000608 <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4620      	mov	r0, r4
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	f7fd f99e 	bl	800029c <__adddf3>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <Screen1_Ctrl+0x97c>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fae1 	bl	8000534 <__aeabi_i2d>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4620      	mov	r0, r4
 8002f78:	4629      	mov	r1, r5
 8002f7a:	f7fd f98f 	bl	800029c <__adddf3>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <Screen1_Ctrl+0x994>)
 8002f8c:	f7fd f986 	bl	800029c <__adddf3>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f7fd fe0e 	bl	8000bb8 <__aeabi_d2uiz>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	b298      	uxth	r0, r3
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <Screen1_Ctrl+0x970>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <Screen1_Ctrl+0x980>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	33e1      	adds	r3, #225	@ 0xe1
 8002fb0:	b299      	uxth	r1, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff8 <Screen1_Ctrl+0x998>)
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <Screen1_Ctrl+0x99c>)
 8002fbe:	f7fe fc7f 	bl	80018c0 <LCD_Font>

}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000001 	.word	0x20000001
 8002fd4:	20000002 	.word	0x20000002
 8002fd8:	20000003 	.word	0x20000003
 8002fdc:	2000000a 	.word	0x2000000a
 8002fe0:	2000000b 	.word	0x2000000b
 8002fe4:	0800d964 	.word	0x0800d964
 8002fe8:	0800ce10 	.word	0x0800ce10
 8002fec:	3ff33333 	.word	0x3ff33333
 8002ff0:	0800cde4 	.word	0x0800cde4
 8002ff4:	40140000 	.word	0x40140000
 8002ff8:	0800e580 	.word	0x0800e580
 8002ffc:	0800ce1c 	.word	0x0800ce1c

08003000 <Touch_XY>:
/***************************************************************************************
 	 	 ************* The function is used to control the devices **************
*****************************************************************************************/
void Touch_XY() {
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b087      	sub	sp, #28
 8003004:	af02      	add	r7, sp, #8
	uint8_t Ctr_Dev_Temp[2] = {0,0};
 8003006:	2300      	movs	r3, #0
 8003008:	813b      	strh	r3, [r7, #8]
	/* ---- Press button 'DIEU KHIEN' ---- */
	if (touchx >= 100 && touchx <= 340 && touchy >= 230 && touchy <= 315)
 800300a:	4b91      	ldr	r3, [pc, #580]	@ (8003250 <Touch_XY+0x250>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b63      	cmp	r3, #99	@ 0x63
 8003012:	d919      	bls.n	8003048 <Touch_XY+0x48>
 8003014:	4b8e      	ldr	r3, [pc, #568]	@ (8003250 <Touch_XY+0x250>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800301e:	d813      	bhi.n	8003048 <Touch_XY+0x48>
 8003020:	4b8c      	ldr	r3, [pc, #560]	@ (8003254 <Touch_XY+0x254>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	2be5      	cmp	r3, #229	@ 0xe5
 8003028:	d90e      	bls.n	8003048 <Touch_XY+0x48>
 800302a:	4b8a      	ldr	r3, [pc, #552]	@ (8003254 <Touch_XY+0x254>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8003034:	d208      	bcs.n	8003048 <Touch_XY+0x48>
	{
		if(StDisplay == DISPLAY_SCREEN)
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <Touch_XY+0x258>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <Touch_XY+0x48>
		{
			StDisplay = CTRL_SCREEN_1;
 800303e:	4b86      	ldr	r3, [pc, #536]	@ (8003258 <Touch_XY+0x258>)
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
			Screen1_Ctrl();
 8003044:	f7ff fb0c 	bl	8002660 <Screen1_Ctrl>
		}
	}
	/* ---- Press button 'TRO VE' ---- */
	if(touchx >= 200 && touchx <= 280 && touchy >= 255 && touchy <= 315)
 8003048:	4b81      	ldr	r3, [pc, #516]	@ (8003250 <Touch_XY+0x250>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003050:	d919      	bls.n	8003086 <Touch_XY+0x86>
 8003052:	4b7f      	ldr	r3, [pc, #508]	@ (8003250 <Touch_XY+0x250>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800305c:	d813      	bhi.n	8003086 <Touch_XY+0x86>
 800305e:	4b7d      	ldr	r3, [pc, #500]	@ (8003254 <Touch_XY+0x254>)
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bfe      	cmp	r3, #254	@ 0xfe
 8003066:	d90e      	bls.n	8003086 <Touch_XY+0x86>
 8003068:	4b7a      	ldr	r3, [pc, #488]	@ (8003254 <Touch_XY+0x254>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8003072:	d208      	bcs.n	8003086 <Touch_XY+0x86>
	{
		if(StDisplay == CTRL_SCREEN_1)
 8003074:	4b78      	ldr	r3, [pc, #480]	@ (8003258 <Touch_XY+0x258>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d104      	bne.n	8003086 <Touch_XY+0x86>
		{
			StDisplay = DISPLAY_SCREEN;
 800307c:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <Touch_XY+0x258>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
			Default_Display();
 8003082:	f7fe ff35 	bl	8001ef0 <Default_Display>
		}
	}
	/* ---- Press button '===>>' ---- */
	if(touchx >= 335 && touchx <= 440 && touchy >= 255 && touchy <= 315)
 8003086:	4b72      	ldr	r3, [pc, #456]	@ (8003250 <Touch_XY+0x250>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8003090:	d919      	bls.n	80030c6 <Touch_XY+0xc6>
 8003092:	4b6f      	ldr	r3, [pc, #444]	@ (8003250 <Touch_XY+0x250>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 800309c:	d813      	bhi.n	80030c6 <Touch_XY+0xc6>
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <Touch_XY+0x254>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80030a6:	d90e      	bls.n	80030c6 <Touch_XY+0xc6>
 80030a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <Touch_XY+0x254>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 80030b2:	d208      	bcs.n	80030c6 <Touch_XY+0xc6>
	{
		if(StDisplay == CTRL_SCREEN_1)
 80030b4:	4b68      	ldr	r3, [pc, #416]	@ (8003258 <Touch_XY+0x258>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d104      	bne.n	80030c6 <Touch_XY+0xc6>
		{
			StDisplay = CTRL_SCREEN_2;
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <Touch_XY+0x258>)
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
			Screen2_Ctrl();
 80030c2:	f7ff f925 	bl	8002310 <Screen2_Ctrl>
		}
	}
	if(StDisplay == CTRL_SCREEN_2)
 80030c6:	4b64      	ldr	r3, [pc, #400]	@ (8003258 <Touch_XY+0x258>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	f040 81c8 	bne.w	8003460 <Touch_XY+0x460>
	{
		uint8_t Ctr_Dev_Temp[2] = {0};
 80030d0:	2300      	movs	r3, #0
 80030d2:	80bb      	strh	r3, [r7, #4]
		/* ---- Press button 'BAT HET' ---- */
		if(touchx >= 60 && touchx <= 210 && touchy >= 45 && touchy <= 120)
 80030d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003250 <Touch_XY+0x250>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b3b      	cmp	r3, #59	@ 0x3b
 80030dc:	d933      	bls.n	8003146 <Touch_XY+0x146>
 80030de:	4b5c      	ldr	r3, [pc, #368]	@ (8003250 <Touch_XY+0x250>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2bd2      	cmp	r3, #210	@ 0xd2
 80030e6:	d82e      	bhi.n	8003146 <Touch_XY+0x146>
 80030e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003254 <Touch_XY+0x254>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80030f0:	d929      	bls.n	8003146 <Touch_XY+0x146>
 80030f2:	4b58      	ldr	r3, [pc, #352]	@ (8003254 <Touch_XY+0x254>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b78      	cmp	r3, #120	@ 0x78
 80030fa:	d824      	bhi.n	8003146 <Touch_XY+0x146>
		{
			/* Send data to ESP by UART */
			Ctr_Dev = 0x03ff;
 80030fc:	4b57      	ldr	r3, [pc, #348]	@ (800325c <Touch_XY+0x25c>)
 80030fe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003102:	801a      	strh	r2, [r3, #0]
			Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003104:	4b55      	ldr	r3, [pc, #340]	@ (800325c <Touch_XY+0x25c>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	b29b      	uxth	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	713b      	strb	r3, [r7, #4]
			Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003110:	4b52      	ldr	r3, [pc, #328]	@ (800325c <Touch_XY+0x25c>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	717b      	strb	r3, [r7, #5]
			Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2); /* Send Ctrl_Dev variable */
 8003118:	1d39      	adds	r1, r7, #4
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2302      	movs	r3, #2
 8003120:	4a4f      	ldr	r2, [pc, #316]	@ (8003260 <Touch_XY+0x260>)
 8003122:	4850      	ldr	r0, [pc, #320]	@ (8003264 <Touch_XY+0x264>)
 8003124:	f001 fa12 	bl	800454c <Send_Uart1>
			if(StDisplay == CTRL_SCREEN_1)
 8003128:	4b4b      	ldr	r3, [pc, #300]	@ (8003258 <Touch_XY+0x258>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d103      	bne.n	8003138 <Touch_XY+0x138>
			{
				Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8003130:	494d      	ldr	r1, [pc, #308]	@ (8003268 <Touch_XY+0x268>)
 8003132:	484e      	ldr	r0, [pc, #312]	@ (800326c <Touch_XY+0x26c>)
 8003134:	f000 fc44 	bl	80039c0 <Update_StatusBt>
			}
			Ctr_Dev_Old = Ctr_Dev;
 8003138:	4b48      	ldr	r3, [pc, #288]	@ (800325c <Touch_XY+0x25c>)
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <Touch_XY+0x270>)
 800313e:	801a      	strh	r2, [r3, #0]
			Flag_Uart = true;
 8003140:	4b4c      	ldr	r3, [pc, #304]	@ (8003274 <Touch_XY+0x274>)
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
		}
		/* ---- Press button 'TAT HET' ---- */
		if(touchx >= 270 && touchx <= 425 && touchy >= 45 && touchy <= 120)
 8003146:	4b42      	ldr	r3, [pc, #264]	@ (8003250 <Touch_XY+0x250>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003150:	d333      	bcc.n	80031ba <Touch_XY+0x1ba>
 8003152:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <Touch_XY+0x250>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 800315c:	d22d      	bcs.n	80031ba <Touch_XY+0x1ba>
 800315e:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <Touch_XY+0x254>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b2c      	cmp	r3, #44	@ 0x2c
 8003166:	d928      	bls.n	80031ba <Touch_XY+0x1ba>
 8003168:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <Touch_XY+0x254>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b78      	cmp	r3, #120	@ 0x78
 8003170:	d823      	bhi.n	80031ba <Touch_XY+0x1ba>
		{
			/* Send data to ESP by UART */
			Ctr_Dev = 0x0000;
 8003172:	4b3a      	ldr	r3, [pc, #232]	@ (800325c <Touch_XY+0x25c>)
 8003174:	2200      	movs	r2, #0
 8003176:	801a      	strh	r2, [r3, #0]
			Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003178:	4b38      	ldr	r3, [pc, #224]	@ (800325c <Touch_XY+0x25c>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	b29b      	uxth	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	713b      	strb	r3, [r7, #4]
			Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003184:	4b35      	ldr	r3, [pc, #212]	@ (800325c <Touch_XY+0x25c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	717b      	strb	r3, [r7, #5]
			Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2); /* Send Ctrl_Dev variable */
 800318c:	1d39      	adds	r1, r7, #4
 800318e:	2302      	movs	r3, #2
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2302      	movs	r3, #2
 8003194:	4a32      	ldr	r2, [pc, #200]	@ (8003260 <Touch_XY+0x260>)
 8003196:	4833      	ldr	r0, [pc, #204]	@ (8003264 <Touch_XY+0x264>)
 8003198:	f001 f9d8 	bl	800454c <Send_Uart1>
			if(StDisplay == CTRL_SCREEN_1)
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <Touch_XY+0x258>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d103      	bne.n	80031ac <Touch_XY+0x1ac>
			{
				Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 80031a4:	4930      	ldr	r1, [pc, #192]	@ (8003268 <Touch_XY+0x268>)
 80031a6:	4831      	ldr	r0, [pc, #196]	@ (800326c <Touch_XY+0x26c>)
 80031a8:	f000 fc0a 	bl	80039c0 <Update_StatusBt>
			}
			Ctr_Dev_Old = Ctr_Dev;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	@ (800325c <Touch_XY+0x25c>)
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003270 <Touch_XY+0x270>)
 80031b2:	801a      	strh	r2, [r3, #0]
			Flag_Uart = true;
 80031b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003274 <Touch_XY+0x274>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
		}
		/* ---- Press button '<<===' ---- */
		if(touchx >= 60 && touchx <= 210 && touchy >= 170 && touchy <= 230)
 80031ba:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <Touch_XY+0x250>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80031c2:	d913      	bls.n	80031ec <Touch_XY+0x1ec>
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <Touch_XY+0x250>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2bd2      	cmp	r3, #210	@ 0xd2
 80031cc:	d80e      	bhi.n	80031ec <Touch_XY+0x1ec>
 80031ce:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <Touch_XY+0x254>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2ba9      	cmp	r3, #169	@ 0xa9
 80031d6:	d909      	bls.n	80031ec <Touch_XY+0x1ec>
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <Touch_XY+0x254>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2be6      	cmp	r3, #230	@ 0xe6
 80031e0:	d804      	bhi.n	80031ec <Touch_XY+0x1ec>
		{
			StDisplay = CTRL_SCREEN_1;
 80031e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <Touch_XY+0x258>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
			Screen1_Ctrl();
 80031e8:	f7ff fa3a 	bl	8002660 <Screen1_Ctrl>
		}
		/* ---- Press button 'COI' ---- */
		if(touchx >= 270 && touchx <= 425 && touchy >= 190 && touchy <= 230)
 80031ec:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <Touch_XY+0x250>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80031f6:	f0c0 8113 	bcc.w	8003420 <Touch_XY+0x420>
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <Touch_XY+0x250>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 8003204:	f080 810c 	bcs.w	8003420 <Touch_XY+0x420>
 8003208:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <Touch_XY+0x254>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bbd      	cmp	r3, #189	@ 0xbd
 8003210:	f240 8106 	bls.w	8003420 <Touch_XY+0x420>
 8003214:	4b0f      	ldr	r3, [pc, #60]	@ (8003254 <Touch_XY+0x254>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	2be6      	cmp	r3, #230	@ 0xe6
 800321c:	f200 8100 	bhi.w	8003420 <Touch_XY+0x420>
		{
			debounce_100ms = 0;
 8003220:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <Touch_XY+0x278>)
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
			while (debounce_100ms < 50); /* De-bouncing */
 8003226:	bf00      	nop
 8003228:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <Touch_XY+0x278>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b31      	cmp	r3, #49	@ 0x31
 8003230:	d9fa      	bls.n	8003228 <Touch_XY+0x228>
			Buzzer = !Buzzer;
 8003232:	4b12      	ldr	r3, [pc, #72]	@ (800327c <Touch_XY+0x27c>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4b0e      	ldr	r3, [pc, #56]	@ (800327c <Touch_XY+0x27c>)
 8003244:	701a      	strb	r2, [r3, #0]
			if (0 == Buzzer)
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <Touch_XY+0x27c>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	e018      	b.n	8003280 <Touch_XY+0x280>
 800324e:	bf00      	nop
 8003250:	20000454 	.word	0x20000454
 8003254:	20000456 	.word	0x20000456
 8003258:	2000046d 	.word	0x2000046d
 800325c:	20000470 	.word	0x20000470
 8003260:	2000001a 	.word	0x2000001a
 8003264:	20000010 	.word	0x20000010
 8003268:	20000580 	.word	0x20000580
 800326c:	20000574 	.word	0x20000574
 8003270:	20000472 	.word	0x20000472
 8003274:	2000047f 	.word	0x2000047f
 8003278:	2000047a 	.word	0x2000047a
 800327c:	20000478 	.word	0x20000478
 8003280:	d161      	bne.n	8003346 <Touch_XY+0x346>
			{
				BUZZER_OFF;
 8003282:	2201      	movs	r2, #1
 8003284:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003288:	4879      	ldr	r0, [pc, #484]	@ (8003470 <Touch_XY+0x470>)
 800328a:	f003 fda5 	bl	8006dd8 <HAL_GPIO_WritePin>
				LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_RED);
 800328e:	4b79      	ldr	r3, [pc, #484]	@ (8003474 <Touch_XY+0x474>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b78      	ldr	r3, [pc, #480]	@ (8003478 <Touch_XY+0x478>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4413      	add	r3, r2
 800329a:	b29b      	uxth	r3, r3
 800329c:	336e      	adds	r3, #110	@ 0x6e
 800329e:	b298      	uxth	r0, r3
 80032a0:	4b76      	ldr	r3, [pc, #472]	@ (800347c <Touch_XY+0x47c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <Touch_XY+0x480>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3332      	adds	r3, #50	@ 0x32
 80032b0:	b299      	uxth	r1, r3
 80032b2:	4b71      	ldr	r3, [pc, #452]	@ (8003478 <Touch_XY+0x478>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	3332      	adds	r3, #50	@ 0x32
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	4b71      	ldr	r3, [pc, #452]	@ (8003480 <Touch_XY+0x480>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	331e      	adds	r3, #30
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 80032c6:	9401      	str	r4, [sp, #4]
 80032c8:	2405      	movs	r4, #5
 80032ca:	9400      	str	r4, [sp, #0]
 80032cc:	f7fe fcbd 	bl	8001c4a <LCD_Rect_Round_Fill>
				LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: TAT", _Open_Sans_Bold_26, 1, BLACK);
 80032d0:	4b68      	ldr	r3, [pc, #416]	@ (8003474 <Touch_XY+0x474>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b68      	ldr	r3, [pc, #416]	@ (8003478 <Touch_XY+0x478>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	338c      	adds	r3, #140	@ 0x8c
 80032e0:	b29e      	uxth	r6, r3
 80032e2:	4b66      	ldr	r3, [pc, #408]	@ (800347c <Touch_XY+0x47c>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f923 	bl	8000534 <__aeabi_i2d>
 80032ee:	4604      	mov	r4, r0
 80032f0:	460d      	mov	r5, r1
 80032f2:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <Touch_XY+0x480>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f91c 	bl	8000534 <__aeabi_i2d>
 80032fc:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003300:	4b60      	ldr	r3, [pc, #384]	@ (8003484 <Touch_XY+0x484>)
 8003302:	f7fd f981 	bl	8000608 <__aeabi_dmul>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	f7fc ffc3 	bl	800029c <__adddf3>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fc ffbd 	bl	800029c <__adddf3>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f7fd fc45 	bl	8000bb8 <__aeabi_d2uiz>
 800332e:	4603      	mov	r3, r0
 8003330:	b299      	uxth	r1, r3
 8003332:	2300      	movs	r3, #0
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	2301      	movs	r3, #1
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <Touch_XY+0x488>)
 800333c:	4a53      	ldr	r2, [pc, #332]	@ (800348c <Touch_XY+0x48c>)
 800333e:	4630      	mov	r0, r6
 8003340:	f7fe fabe 	bl	80018c0 <LCD_Font>
 8003344:	e060      	b.n	8003408 <Touch_XY+0x408>
			}
			else
			{
				BUZZER_ON;
 8003346:	2200      	movs	r2, #0
 8003348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800334c:	4848      	ldr	r0, [pc, #288]	@ (8003470 <Touch_XY+0x470>)
 800334e:	f003 fd43 	bl	8006dd8 <HAL_GPIO_WritePin>
				LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_PINK);
 8003352:	4b48      	ldr	r3, [pc, #288]	@ (8003474 <Touch_XY+0x474>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4b47      	ldr	r3, [pc, #284]	@ (8003478 <Touch_XY+0x478>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4413      	add	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	336e      	adds	r3, #110	@ 0x6e
 8003362:	b298      	uxth	r0, r3
 8003364:	4b45      	ldr	r3, [pc, #276]	@ (800347c <Touch_XY+0x47c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b45      	ldr	r3, [pc, #276]	@ (8003480 <Touch_XY+0x480>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	b29b      	uxth	r3, r3
 8003372:	3332      	adds	r3, #50	@ 0x32
 8003374:	b299      	uxth	r1, r3
 8003376:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <Touch_XY+0x478>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3332      	adds	r3, #50	@ 0x32
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <Touch_XY+0x480>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	331e      	adds	r3, #30
 8003384:	b29b      	uxth	r3, r3
 8003386:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 800338a:	9401      	str	r4, [sp, #4]
 800338c:	2405      	movs	r4, #5
 800338e:	9400      	str	r4, [sp, #0]
 8003390:	f7fe fc5b 	bl	8001c4a <LCD_Rect_Round_Fill>
				LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: BAT", _Open_Sans_Bold_26, 1, BLACK);
 8003394:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <Touch_XY+0x474>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b37      	ldr	r3, [pc, #220]	@ (8003478 <Touch_XY+0x478>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	338c      	adds	r3, #140	@ 0x8c
 80033a4:	b29e      	uxth	r6, r3
 80033a6:	4b35      	ldr	r3, [pc, #212]	@ (800347c <Touch_XY+0x47c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8c1 	bl	8000534 <__aeabi_i2d>
 80033b2:	4604      	mov	r4, r0
 80033b4:	460d      	mov	r5, r1
 80033b6:	4b32      	ldr	r3, [pc, #200]	@ (8003480 <Touch_XY+0x480>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f8ba 	bl	8000534 <__aeabi_i2d>
 80033c0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80033c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003484 <Touch_XY+0x484>)
 80033c6:	f7fd f91f 	bl	8000608 <__aeabi_dmul>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	f7fc ff61 	bl	800029c <__adddf3>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4620      	mov	r0, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	f7fc ff5b 	bl	800029c <__adddf3>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fbe3 	bl	8000bb8 <__aeabi_d2uiz>
 80033f2:	4603      	mov	r3, r0
 80033f4:	b299      	uxth	r1, r3
 80033f6:	2300      	movs	r3, #0
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	2301      	movs	r3, #1
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	4b22      	ldr	r3, [pc, #136]	@ (8003488 <Touch_XY+0x488>)
 8003400:	4a23      	ldr	r2, [pc, #140]	@ (8003490 <Touch_XY+0x490>)
 8003402:	4630      	mov	r0, r6
 8003404:	f7fe fa5c 	bl	80018c0 <LCD_Font>
			}
			/* Send data to ESP by UART */
			Send_Uart1(&start_byte_warning[0], &Buzzer, &stop_byte, 2, 1);
 8003408:	2301      	movs	r3, #1
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2302      	movs	r3, #2
 800340e:	4a21      	ldr	r2, [pc, #132]	@ (8003494 <Touch_XY+0x494>)
 8003410:	4921      	ldr	r1, [pc, #132]	@ (8003498 <Touch_XY+0x498>)
 8003412:	4822      	ldr	r0, [pc, #136]	@ (800349c <Touch_XY+0x49c>)
 8003414:	f001 f89a 	bl	800454c <Send_Uart1>
			Buzzer_Old = Buzzer;
 8003418:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <Touch_XY+0x498>)
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <Touch_XY+0x4a0>)
 800341e:	701a      	strb	r2, [r3, #0]
		}
		/* ---- Press button 'TRO VE' ---- */
		if(touchx >= 90 && touchx <= 345 && touchy >= 245 && touchy <= 315)
 8003420:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <Touch_XY+0x4a4>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b59      	cmp	r3, #89	@ 0x59
 8003428:	f240 82a8 	bls.w	800397c <Touch_XY+0x97c>
 800342c:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <Touch_XY+0x4a4>)
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f5b3 7fad 	cmp.w	r3, #346	@ 0x15a
 8003436:	f080 82a1 	bcs.w	800397c <Touch_XY+0x97c>
 800343a:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <Touch_XY+0x4a8>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	2bf4      	cmp	r3, #244	@ 0xf4
 8003442:	f240 829b 	bls.w	800397c <Touch_XY+0x97c>
 8003446:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <Touch_XY+0x4a8>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8003450:	f080 8294 	bcs.w	800397c <Touch_XY+0x97c>
		{
			StDisplay = DISPLAY_SCREEN;
 8003454:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <Touch_XY+0x4ac>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
			Default_Display();
 800345a:	f7fe fd49 	bl	8001ef0 <Default_Display>
				break;
			}
		}
	}
	else;
}
 800345e:	e28d      	b.n	800397c <Touch_XY+0x97c>
	else if(StDisplay == CTRL_SCREEN_1)
 8003460:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <Touch_XY+0x4ac>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 8289 	bne.w	800397c <Touch_XY+0x97c>
		for (int i = 0; i < 3; i++)
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e280      	b.n	8003972 <Touch_XY+0x972>
 8003470:	40020000 	.word	0x40020000
 8003474:	20000000 	.word	0x20000000
 8003478:	20000002 	.word	0x20000002
 800347c:	20000001 	.word	0x20000001
 8003480:	20000003 	.word	0x20000003
 8003484:	3ff33333 	.word	0x3ff33333
 8003488:	0800f344 	.word	0x0800f344
 800348c:	0800cdcc 	.word	0x0800cdcc
 8003490:	0800cdd8 	.word	0x0800cdd8
 8003494:	2000001a 	.word	0x2000001a
 8003498:	20000478 	.word	0x20000478
 800349c:	20000014 	.word	0x20000014
 80034a0:	20000479 	.word	0x20000479
 80034a4:	20000454 	.word	0x20000454
 80034a8:	20000456 	.word	0x20000456
 80034ac:	2000046d 	.word	0x2000046d
			if (touchx >= (Posx_Node[i] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[i] - PoStart_x)
 80034b0:	4b97      	ldr	r3, [pc, #604]	@ (8003710 <Touch_XY+0x710>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	4a96      	ldr	r2, [pc, #600]	@ (8003714 <Touch_XY+0x714>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b95      	ldr	r3, [pc, #596]	@ (8003718 <Touch_XY+0x718>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4299      	cmp	r1, r3
 80034ca:	f2c0 8086 	blt.w	80035da <Touch_XY+0x5da>
 80034ce:	4b90      	ldr	r3, [pc, #576]	@ (8003710 <Touch_XY+0x710>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	4b91      	ldr	r3, [pc, #580]	@ (800371c <Touch_XY+0x71c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	4a8d      	ldr	r2, [pc, #564]	@ (8003714 <Touch_XY+0x714>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e4:	4403      	add	r3, r0
 80034e6:	4a8c      	ldr	r2, [pc, #560]	@ (8003718 <Touch_XY+0x718>)
 80034e8:	7812      	ldrb	r2, [r2, #0]
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	4299      	cmp	r1, r3
 80034ee:	dc74      	bgt.n	80035da <Touch_XY+0x5da>
					&& touchy >= (50) && touchy <= (80))
 80034f0:	4b8b      	ldr	r3, [pc, #556]	@ (8003720 <Touch_XY+0x720>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b31      	cmp	r3, #49	@ 0x31
 80034f8:	d96f      	bls.n	80035da <Touch_XY+0x5da>
 80034fa:	4b89      	ldr	r3, [pc, #548]	@ (8003720 <Touch_XY+0x720>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b50      	cmp	r3, #80	@ 0x50
 8003502:	d86a      	bhi.n	80035da <Touch_XY+0x5da>
				debounce_100ms = 0;
 8003504:	4b87      	ldr	r3, [pc, #540]	@ (8003724 <Touch_XY+0x724>)
 8003506:	2200      	movs	r2, #0
 8003508:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 50); /* De-bouncing */
 800350a:	bf00      	nop
 800350c:	4b85      	ldr	r3, [pc, #532]	@ (8003724 <Touch_XY+0x724>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b31      	cmp	r3, #49	@ 0x31
 8003514:	d9fa      	bls.n	800350c <Touch_XY+0x50c>
				RelayStatus_arr_ESP[i] = !RelayStatus_arr_ESP[i];
 8003516:	4a84      	ldr	r2, [pc, #528]	@ (8003728 <Touch_XY+0x728>)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	4a7f      	ldr	r2, [pc, #508]	@ (8003728 <Touch_XY+0x728>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	460a      	mov	r2, r1
 8003532:	701a      	strb	r2, [r3, #0]
				ReL_LoRa_Sen[i] = RelayStatus_arr_ESP[i] | 0x80;
 8003534:	4a7c      	ldr	r2, [pc, #496]	@ (8003728 <Touch_XY+0x728>)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4413      	add	r3, r2
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003540:	b2d9      	uxtb	r1, r3
 8003542:	4a7a      	ldr	r2, [pc, #488]	@ (800372c <Touch_XY+0x72c>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	460a      	mov	r2, r1
 800354a:	701a      	strb	r2, [r3, #0]
				Send_Lora_UpdateRelay(i); // Send data to node 1-3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	f000 ff45 	bl	80043e0 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[i] == 0)
 8003556:	4a74      	ldr	r2, [pc, #464]	@ (8003728 <Touch_XY+0x728>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <Touch_XY+0x57e>
					CLEAR_BIT_USER(Ctr_Dev, i);
 8003562:	2201      	movs	r2, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	b29a      	uxth	r2, r3
 8003570:	4b6f      	ldr	r3, [pc, #444]	@ (8003730 <Touch_XY+0x730>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	4013      	ands	r3, r2
 8003576:	b29a      	uxth	r2, r3
 8003578:	4b6d      	ldr	r3, [pc, #436]	@ (8003730 <Touch_XY+0x730>)
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	e00a      	b.n	8003594 <Touch_XY+0x594>
					SET_BIT_USER(Ctr_Dev, i);
 800357e:	2201      	movs	r2, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	b29a      	uxth	r2, r3
 8003588:	4b69      	ldr	r3, [pc, #420]	@ (8003730 <Touch_XY+0x730>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b67      	ldr	r3, [pc, #412]	@ (8003730 <Touch_XY+0x730>)
 8003592:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003594:	4b66      	ldr	r3, [pc, #408]	@ (8003730 <Touch_XY+0x730>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	b29b      	uxth	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 80035a0:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <Touch_XY+0x730>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 80035a8:	f107 0108 	add.w	r1, r7, #8
 80035ac:	2302      	movs	r3, #2
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2302      	movs	r3, #2
 80035b2:	4a60      	ldr	r2, [pc, #384]	@ (8003734 <Touch_XY+0x734>)
 80035b4:	4860      	ldr	r0, [pc, #384]	@ (8003738 <Touch_XY+0x738>)
 80035b6:	f000 ffc9 	bl	800454c <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 80035ba:	4b60      	ldr	r3, [pc, #384]	@ (800373c <Touch_XY+0x73c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d103      	bne.n	80035ca <Touch_XY+0x5ca>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 80035c2:	495f      	ldr	r1, [pc, #380]	@ (8003740 <Touch_XY+0x740>)
 80035c4:	4858      	ldr	r0, [pc, #352]	@ (8003728 <Touch_XY+0x728>)
 80035c6:	f000 f9fb 	bl	80039c0 <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 80035ca:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <Touch_XY+0x730>)
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003744 <Touch_XY+0x744>)
 80035d0:	801a      	strh	r2, [r3, #0]
				Cnt_Flag_Screen1 = true;
 80035d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003748 <Touch_XY+0x748>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
				break;
 80035d8:	e1d0      	b.n	800397c <Touch_XY+0x97c>
			if (touchx >= (Posx_Node[i] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[i] - PoStart_x)
 80035da:	4b4d      	ldr	r3, [pc, #308]	@ (8003710 <Touch_XY+0x710>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003714 <Touch_XY+0x714>)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003718 <Touch_XY+0x718>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	4299      	cmp	r1, r3
 80035f4:	f2c0 80aa 	blt.w	800374c <Touch_XY+0x74c>
 80035f8:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <Touch_XY+0x710>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	4b46      	ldr	r3, [pc, #280]	@ (800371c <Touch_XY+0x71c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	4a43      	ldr	r2, [pc, #268]	@ (8003714 <Touch_XY+0x714>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800360e:	4403      	add	r3, r0
 8003610:	4a41      	ldr	r2, [pc, #260]	@ (8003718 <Touch_XY+0x718>)
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	4299      	cmp	r1, r3
 8003618:	f300 8098 	bgt.w	800374c <Touch_XY+0x74c>
					&& touchy >= (130) && touchy <= (160))
 800361c:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <Touch_XY+0x720>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b81      	cmp	r3, #129	@ 0x81
 8003624:	f240 8092 	bls.w	800374c <Touch_XY+0x74c>
 8003628:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <Touch_XY+0x720>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003630:	f200 808c 	bhi.w	800374c <Touch_XY+0x74c>
				debounce_100ms = 0;
 8003634:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <Touch_XY+0x724>)
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 50); /* De-bouncing */
 800363a:	bf00      	nop
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <Touch_XY+0x724>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b31      	cmp	r3, #49	@ 0x31
 8003644:	d9fa      	bls.n	800363c <Touch_XY+0x63c>
				RelayStatus_arr_ESP[i + 3] = !RelayStatus_arr_ESP[i + 3];
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3303      	adds	r3, #3
 800364a:	4a37      	ldr	r2, [pc, #220]	@ (8003728 <Touch_XY+0x728>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3303      	adds	r3, #3
 800365c:	4611      	mov	r1, r2
 800365e:	4a32      	ldr	r2, [pc, #200]	@ (8003728 <Touch_XY+0x728>)
 8003660:	54d1      	strb	r1, [r2, r3]
				ReL_LoRa_Sen[i + 3] = RelayStatus_arr_ESP[i + 3] | 0x80;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3303      	adds	r3, #3
 8003666:	4a30      	ldr	r2, [pc, #192]	@ (8003728 <Touch_XY+0x728>)
 8003668:	5cd2      	ldrb	r2, [r2, r3]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3303      	adds	r3, #3
 800366e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003672:	b2d1      	uxtb	r1, r2
 8003674:	4a2d      	ldr	r2, [pc, #180]	@ (800372c <Touch_XY+0x72c>)
 8003676:	54d1      	strb	r1, [r2, r3]
				Send_Lora_UpdateRelay(i+3); // Send data to node 4-6
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3303      	adds	r3, #3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fead 	bl	80043e0 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[i + 3] == 0)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3303      	adds	r3, #3
 800368a:	4a27      	ldr	r2, [pc, #156]	@ (8003728 <Touch_XY+0x728>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10e      	bne.n	80036b0 <Touch_XY+0x6b0>
					CLEAR_BIT_USER(Ctr_Dev, i + 3);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3303      	adds	r3, #3
 8003696:	2201      	movs	r2, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	b29b      	uxth	r3, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4b23      	ldr	r3, [pc, #140]	@ (8003730 <Touch_XY+0x730>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <Touch_XY+0x730>)
 80036ac:	801a      	strh	r2, [r3, #0]
 80036ae:	e00b      	b.n	80036c8 <Touch_XY+0x6c8>
					SET_BIT_USER(Ctr_Dev, i + 3);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3303      	adds	r3, #3
 80036b4:	2201      	movs	r2, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <Touch_XY+0x730>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <Touch_XY+0x730>)
 80036c6:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <Touch_XY+0x730>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 80036d4:	4b16      	ldr	r3, [pc, #88]	@ (8003730 <Touch_XY+0x730>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 80036dc:	f107 0108 	add.w	r1, r7, #8
 80036e0:	2302      	movs	r3, #2
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2302      	movs	r3, #2
 80036e6:	4a13      	ldr	r2, [pc, #76]	@ (8003734 <Touch_XY+0x734>)
 80036e8:	4813      	ldr	r0, [pc, #76]	@ (8003738 <Touch_XY+0x738>)
 80036ea:	f000 ff2f 	bl	800454c <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 80036ee:	4b13      	ldr	r3, [pc, #76]	@ (800373c <Touch_XY+0x73c>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d103      	bne.n	80036fe <Touch_XY+0x6fe>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 80036f6:	4912      	ldr	r1, [pc, #72]	@ (8003740 <Touch_XY+0x740>)
 80036f8:	480b      	ldr	r0, [pc, #44]	@ (8003728 <Touch_XY+0x728>)
 80036fa:	f000 f961 	bl	80039c0 <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <Touch_XY+0x730>)
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <Touch_XY+0x744>)
 8003704:	801a      	strh	r2, [r3, #0]
				Cnt_Flag_Screen1 = true;
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <Touch_XY+0x748>)
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
				break;
 800370c:	e136      	b.n	800397c <Touch_XY+0x97c>
 800370e:	bf00      	nop
 8003710:	20000454 	.word	0x20000454
 8003714:	20000004 	.word	0x20000004
 8003718:	2000000a 	.word	0x2000000a
 800371c:	20000002 	.word	0x20000002
 8003720:	20000456 	.word	0x20000456
 8003724:	2000047a 	.word	0x2000047a
 8003728:	20000574 	.word	0x20000574
 800372c:	20000568 	.word	0x20000568
 8003730:	20000470 	.word	0x20000470
 8003734:	2000001a 	.word	0x2000001a
 8003738:	20000010 	.word	0x20000010
 800373c:	2000046d 	.word	0x2000046d
 8003740:	20000580 	.word	0x20000580
 8003744:	20000472 	.word	0x20000472
 8003748:	2000046c 	.word	0x2000046c
			if (touchx >= (Posx_Node[i] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[i] - PoStart_x)
 800374c:	4b8d      	ldr	r3, [pc, #564]	@ (8003984 <Touch_XY+0x984>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	4a8c      	ldr	r2, [pc, #560]	@ (8003988 <Touch_XY+0x988>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800375c:	461a      	mov	r2, r3
 800375e:	4b8b      	ldr	r3, [pc, #556]	@ (800398c <Touch_XY+0x98c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4413      	add	r3, r2
 8003764:	4299      	cmp	r1, r3
 8003766:	f2c0 8088 	blt.w	800387a <Touch_XY+0x87a>
 800376a:	4b86      	ldr	r3, [pc, #536]	@ (8003984 <Touch_XY+0x984>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4619      	mov	r1, r3
 8003772:	4b87      	ldr	r3, [pc, #540]	@ (8003990 <Touch_XY+0x990>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	4a83      	ldr	r2, [pc, #524]	@ (8003988 <Touch_XY+0x988>)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003780:	4403      	add	r3, r0
 8003782:	4a82      	ldr	r2, [pc, #520]	@ (800398c <Touch_XY+0x98c>)
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	4299      	cmp	r1, r3
 800378a:	dc76      	bgt.n	800387a <Touch_XY+0x87a>
					&& touchy >= (200) && touchy <= (230))
 800378c:	4b81      	ldr	r3, [pc, #516]	@ (8003994 <Touch_XY+0x994>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	2bc7      	cmp	r3, #199	@ 0xc7
 8003794:	d971      	bls.n	800387a <Touch_XY+0x87a>
 8003796:	4b7f      	ldr	r3, [pc, #508]	@ (8003994 <Touch_XY+0x994>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	2be6      	cmp	r3, #230	@ 0xe6
 800379e:	d86c      	bhi.n	800387a <Touch_XY+0x87a>
				debounce_100ms = 0;
 80037a0:	4b7d      	ldr	r3, [pc, #500]	@ (8003998 <Touch_XY+0x998>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 50); /* De-bouncing */
 80037a6:	bf00      	nop
 80037a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003998 <Touch_XY+0x998>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b31      	cmp	r3, #49	@ 0x31
 80037b0:	d9fa      	bls.n	80037a8 <Touch_XY+0x7a8>
				RelayStatus_arr_ESP[i + 6] = !RelayStatus_arr_ESP[i + 6];
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3306      	adds	r3, #6
 80037b6:	4a79      	ldr	r2, [pc, #484]	@ (800399c <Touch_XY+0x99c>)
 80037b8:	5cd3      	ldrb	r3, [r2, r3]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3306      	adds	r3, #6
 80037c8:	4611      	mov	r1, r2
 80037ca:	4a74      	ldr	r2, [pc, #464]	@ (800399c <Touch_XY+0x99c>)
 80037cc:	54d1      	strb	r1, [r2, r3]
				ReL_LoRa_Sen[i + 6] = RelayStatus_arr_ESP[i + 6] | 0x80;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3306      	adds	r3, #6
 80037d2:	4a72      	ldr	r2, [pc, #456]	@ (800399c <Touch_XY+0x99c>)
 80037d4:	5cd2      	ldrb	r2, [r2, r3]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3306      	adds	r3, #6
 80037da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80037de:	b2d1      	uxtb	r1, r2
 80037e0:	4a6f      	ldr	r2, [pc, #444]	@ (80039a0 <Touch_XY+0x9a0>)
 80037e2:	54d1      	strb	r1, [r2, r3]
				Send_Lora_UpdateRelay(i + 6); // Send data to node 7-9
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3306      	adds	r3, #6
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fdf7 	bl	80043e0 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[i + 6] == 0)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3306      	adds	r3, #6
 80037f6:	4a69      	ldr	r2, [pc, #420]	@ (800399c <Touch_XY+0x99c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10e      	bne.n	800381c <Touch_XY+0x81c>
					CLEAR_BIT_USER(Ctr_Dev, i + 6);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3306      	adds	r3, #6
 8003802:	2201      	movs	r2, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	b29b      	uxth	r3, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <Touch_XY+0x9a4>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	4013      	ands	r3, r2
 8003814:	b29a      	uxth	r2, r3
 8003816:	4b63      	ldr	r3, [pc, #396]	@ (80039a4 <Touch_XY+0x9a4>)
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	e00b      	b.n	8003834 <Touch_XY+0x834>
					SET_BIT_USER(Ctr_Dev, i + 6);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3306      	adds	r3, #6
 8003820:	2201      	movs	r2, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	b29a      	uxth	r2, r3
 8003828:	4b5e      	ldr	r3, [pc, #376]	@ (80039a4 <Touch_XY+0x9a4>)
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	4b5c      	ldr	r3, [pc, #368]	@ (80039a4 <Touch_XY+0x9a4>)
 8003832:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003834:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <Touch_XY+0x9a4>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	b29b      	uxth	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003840:	4b58      	ldr	r3, [pc, #352]	@ (80039a4 <Touch_XY+0x9a4>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8003848:	f107 0108 	add.w	r1, r7, #8
 800384c:	2302      	movs	r3, #2
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2302      	movs	r3, #2
 8003852:	4a55      	ldr	r2, [pc, #340]	@ (80039a8 <Touch_XY+0x9a8>)
 8003854:	4855      	ldr	r0, [pc, #340]	@ (80039ac <Touch_XY+0x9ac>)
 8003856:	f000 fe79 	bl	800454c <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 800385a:	4b55      	ldr	r3, [pc, #340]	@ (80039b0 <Touch_XY+0x9b0>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d103      	bne.n	800386a <Touch_XY+0x86a>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8003862:	4954      	ldr	r1, [pc, #336]	@ (80039b4 <Touch_XY+0x9b4>)
 8003864:	484d      	ldr	r0, [pc, #308]	@ (800399c <Touch_XY+0x99c>)
 8003866:	f000 f8ab 	bl	80039c0 <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 800386a:	4b4e      	ldr	r3, [pc, #312]	@ (80039a4 <Touch_XY+0x9a4>)
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	4b52      	ldr	r3, [pc, #328]	@ (80039b8 <Touch_XY+0x9b8>)
 8003870:	801a      	strh	r2, [r3, #0]
				Cnt_Flag_Screen1 = true;
 8003872:	4b52      	ldr	r3, [pc, #328]	@ (80039bc <Touch_XY+0x9bc>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
				break;
 8003878:	e080      	b.n	800397c <Touch_XY+0x97c>
			if (touchx >= (Posx_Node[0] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[0] - PoStart_x)
 800387a:	4b42      	ldr	r3, [pc, #264]	@ (8003984 <Touch_XY+0x984>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4b41      	ldr	r3, [pc, #260]	@ (8003988 <Touch_XY+0x988>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	4619      	mov	r1, r3
 8003888:	4b40      	ldr	r3, [pc, #256]	@ (800398c <Touch_XY+0x98c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	440b      	add	r3, r1
 800388e:	429a      	cmp	r2, r3
 8003890:	db6c      	blt.n	800396c <Touch_XY+0x96c>
 8003892:	4b3c      	ldr	r3, [pc, #240]	@ (8003984 <Touch_XY+0x984>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <Touch_XY+0x990>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b39      	ldr	r3, [pc, #228]	@ (8003988 <Touch_XY+0x988>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	4a39      	ldr	r2, [pc, #228]	@ (800398c <Touch_XY+0x98c>)
 80038a8:	7812      	ldrb	r2, [r2, #0]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	4299      	cmp	r1, r3
 80038ae:	dc5d      	bgt.n	800396c <Touch_XY+0x96c>
					&& touchy >= (250) && touchy <= (280))
 80038b0:	4b38      	ldr	r3, [pc, #224]	@ (8003994 <Touch_XY+0x994>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2bf9      	cmp	r3, #249	@ 0xf9
 80038b8:	d958      	bls.n	800396c <Touch_XY+0x96c>
 80038ba:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <Touch_XY+0x994>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80038c4:	d852      	bhi.n	800396c <Touch_XY+0x96c>
				debounce_100ms = 0;
 80038c6:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <Touch_XY+0x998>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 50); /* De-bouncing */
 80038cc:	bf00      	nop
 80038ce:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <Touch_XY+0x998>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b31      	cmp	r3, #49	@ 0x31
 80038d6:	d9fa      	bls.n	80038ce <Touch_XY+0x8ce>
				RelayStatus_arr_ESP[9] = !RelayStatus_arr_ESP[9];
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <Touch_XY+0x99c>)
 80038da:	7a5b      	ldrb	r3, [r3, #9]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b2c      	ldr	r3, [pc, #176]	@ (800399c <Touch_XY+0x99c>)
 80038ea:	725a      	strb	r2, [r3, #9]
				ReL_LoRa_Sen[9] = RelayStatus_arr_ESP[9] | 0x80;
 80038ec:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <Touch_XY+0x99c>)
 80038ee:	7a5b      	ldrb	r3, [r3, #9]
 80038f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <Touch_XY+0x9a0>)
 80038f8:	725a      	strb	r2, [r3, #9]
				Send_Lora_UpdateRelay(9); // Send data to node 9
 80038fa:	2009      	movs	r0, #9
 80038fc:	f000 fd70 	bl	80043e0 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[9] == 0)
 8003900:	4b26      	ldr	r3, [pc, #152]	@ (800399c <Touch_XY+0x99c>)
 8003902:	7a5b      	ldrb	r3, [r3, #9]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <Touch_XY+0x918>
					CLEAR_BIT_USER(Ctr_Dev, 9);
 8003908:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <Touch_XY+0x9a4>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003910:	b29a      	uxth	r2, r3
 8003912:	4b24      	ldr	r3, [pc, #144]	@ (80039a4 <Touch_XY+0x9a4>)
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e006      	b.n	8003926 <Touch_XY+0x926>
					SET_BIT_USER(Ctr_Dev, 9);
 8003918:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <Touch_XY+0x9a4>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003920:	b29a      	uxth	r2, r3
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <Touch_XY+0x9a4>)
 8003924:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003926:	4b1f      	ldr	r3, [pc, #124]	@ (80039a4 <Touch_XY+0x9a4>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	b29b      	uxth	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003932:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <Touch_XY+0x9a4>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 800393a:	f107 0108 	add.w	r1, r7, #8
 800393e:	2302      	movs	r3, #2
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2302      	movs	r3, #2
 8003944:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <Touch_XY+0x9a8>)
 8003946:	4819      	ldr	r0, [pc, #100]	@ (80039ac <Touch_XY+0x9ac>)
 8003948:	f000 fe00 	bl	800454c <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 800394c:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <Touch_XY+0x9b0>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d103      	bne.n	800395c <Touch_XY+0x95c>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8003954:	4917      	ldr	r1, [pc, #92]	@ (80039b4 <Touch_XY+0x9b4>)
 8003956:	4811      	ldr	r0, [pc, #68]	@ (800399c <Touch_XY+0x99c>)
 8003958:	f000 f832 	bl	80039c0 <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 800395c:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <Touch_XY+0x9a4>)
 800395e:	881a      	ldrh	r2, [r3, #0]
 8003960:	4b15      	ldr	r3, [pc, #84]	@ (80039b8 <Touch_XY+0x9b8>)
 8003962:	801a      	strh	r2, [r3, #0]
				Cnt_Flag_Screen1 = true;
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <Touch_XY+0x9bc>)
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
				break;
 800396a:	e007      	b.n	800397c <Touch_XY+0x97c>
		for (int i = 0; i < 3; i++)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b02      	cmp	r3, #2
 8003976:	f77f ad9b 	ble.w	80034b0 <Touch_XY+0x4b0>
}
 800397a:	e7ff      	b.n	800397c <Touch_XY+0x97c>
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	20000454 	.word	0x20000454
 8003988:	20000004 	.word	0x20000004
 800398c:	2000000a 	.word	0x2000000a
 8003990:	20000002 	.word	0x20000002
 8003994:	20000456 	.word	0x20000456
 8003998:	2000047a 	.word	0x2000047a
 800399c:	20000574 	.word	0x20000574
 80039a0:	20000568 	.word	0x20000568
 80039a4:	20000470 	.word	0x20000470
 80039a8:	2000001a 	.word	0x2000001a
 80039ac:	20000010 	.word	0x20000010
 80039b0:	2000046d 	.word	0x2000046d
 80039b4:	20000580 	.word	0x20000580
 80039b8:	20000472 	.word	0x20000472
 80039bc:	2000046c 	.word	0x2000046c

080039c0 <Update_StatusBt>:
/***************************************************************************************
 	********** The function is used to check and update the button status **********
*****************************************************************************************/
void Update_StatusBt(uint8_t *New_St_Relay, uint8_t *Old_St_Relay)
{
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	uint8_t idx_st_relay;
	for(idx_st_relay = 0; idx_st_relay < 10; idx_st_relay++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	e35a      	b.n	8004086 <Update_StatusBt+0x6c6>
	{
		if(New_St_Relay[idx_st_relay] != Old_St_Relay[idx_st_relay])
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	440b      	add	r3, r1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	f000 834d 	beq.w	8004080 <Update_StatusBt+0x6c0>
		{
			Old_St_Relay[idx_st_relay] = New_St_Relay[idx_st_relay];
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	441a      	add	r2, r3
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	440b      	add	r3, r1
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	701a      	strb	r2, [r3, #0]
			if(idx_st_relay < 3)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	f200 80bc 	bhi.w	8003b76 <Update_StatusBt+0x1b6>
			{
				if (0 == Old_St_Relay[idx_st_relay])
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d13a      	bne.n	8003a80 <Update_StatusBt+0xc0>
				{
					LCD_Rect_Round_Fill(Start_x + (idx_st_relay * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8003a0a:	4b80      	ldr	r3, [pc, #512]	@ (8003c0c <Update_StatusBt+0x24c>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd90 	bl	8000534 <__aeabi_i2d>
 8003a14:	4604      	mov	r4, r0
 8003a16:	460d      	mov	r5, r1
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c10 <Update_StatusBt+0x250>)
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fc fd86 	bl	8000534 <__aeabi_i2d>
 8003a28:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003a2c:	4b79      	ldr	r3, [pc, #484]	@ (8003c14 <Update_StatusBt+0x254>)
 8003a2e:	f7fc fdeb 	bl	8000608 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4620      	mov	r0, r4
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f7fc fc2f 	bl	800029c <__adddf3>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	f7fd f8b7 	bl	8000bb8 <__aeabi_d2uiz>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	b298      	uxth	r0, r3
 8003a4e:	4b72      	ldr	r3, [pc, #456]	@ (8003c18 <Update_StatusBt+0x258>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4b6e      	ldr	r3, [pc, #440]	@ (8003c10 <Update_StatusBt+0x250>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b70      	ldr	r3, [pc, #448]	@ (8003c1c <Update_StatusBt+0x25c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	461c      	mov	r4, r3
 8003a60:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2305      	movs	r3, #5
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	f7fe f8ed 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	3301      	adds	r3, #1
 8003a74:	461a      	mov	r2, r3
 8003a76:	496a      	ldr	r1, [pc, #424]	@ (8003c20 <Update_StatusBt+0x260>)
 8003a78:	486a      	ldr	r0, [pc, #424]	@ (8003c24 <Update_StatusBt+0x264>)
 8003a7a:	f007 f843 	bl	800ab04 <siprintf>
 8003a7e:	e039      	b.n	8003af4 <Update_StatusBt+0x134>
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + (idx_st_relay * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8003a80:	4b62      	ldr	r3, [pc, #392]	@ (8003c0c <Update_StatusBt+0x24c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd55 	bl	8000534 <__aeabi_i2d>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	4a5f      	ldr	r2, [pc, #380]	@ (8003c10 <Update_StatusBt+0x250>)
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd4b 	bl	8000534 <__aeabi_i2d>
 8003a9e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c14 <Update_StatusBt+0x254>)
 8003aa4:	f7fc fdb0 	bl	8000608 <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7fc fbf4 	bl	800029c <__adddf3>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7fd f87c 	bl	8000bb8 <__aeabi_d2uiz>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	b298      	uxth	r0, r3
 8003ac4:	4b54      	ldr	r3, [pc, #336]	@ (8003c18 <Update_StatusBt+0x258>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <Update_StatusBt+0x250>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b52      	ldr	r3, [pc, #328]	@ (8003c1c <Update_StatusBt+0x25c>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461c      	mov	r4, r3
 8003ad6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2305      	movs	r3, #5
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	f7fe f8b2 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	461a      	mov	r2, r3
 8003aec:	494e      	ldr	r1, [pc, #312]	@ (8003c28 <Update_StatusBt+0x268>)
 8003aee:	484d      	ldr	r0, [pc, #308]	@ (8003c24 <Update_StatusBt+0x264>)
 8003af0:	f007 f808 	bl	800ab04 <siprintf>
				}
				LCD_Font(Start_x + (idx_st_relay * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8003af4:	4b45      	ldr	r3, [pc, #276]	@ (8003c0c <Update_StatusBt+0x24c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd1b 	bl	8000534 <__aeabi_i2d>
 8003afe:	4604      	mov	r4, r0
 8003b00:	460d      	mov	r5, r1
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <Update_StatusBt+0x250>)
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fd11 	bl	8000534 <__aeabi_i2d>
 8003b12:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003b16:	4b3f      	ldr	r3, [pc, #252]	@ (8003c14 <Update_StatusBt+0x254>)
 8003b18:	f7fc fd76 	bl	8000608 <__aeabi_dmul>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4620      	mov	r0, r4
 8003b22:	4629      	mov	r1, r5
 8003b24:	f7fc fbba 	bl	800029c <__adddf3>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	461d      	mov	r5, r3
 8003b30:	4b3e      	ldr	r3, [pc, #248]	@ (8003c2c <Update_StatusBt+0x26c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fcfd 	bl	8000534 <__aeabi_i2d>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	f7fc fbab 	bl	800029c <__adddf3>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7fd f833 	bl	8000bb8 <__aeabi_d2uiz>
 8003b52:	4603      	mov	r3, r0
 8003b54:	b298      	uxth	r0, r3
 8003b56:	4b30      	ldr	r3, [pc, #192]	@ (8003c18 <Update_StatusBt+0x258>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <Update_StatusBt+0x270>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	b299      	uxth	r1, r3
 8003b64:	2300      	movs	r3, #0
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4b31      	ldr	r3, [pc, #196]	@ (8003c34 <Update_StatusBt+0x274>)
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <Update_StatusBt+0x264>)
 8003b70:	f7fd fea6 	bl	80018c0 <LCD_Font>
 8003b74:	e284      	b.n	8004080 <Update_StatusBt+0x6c0>
			}
			else if((idx_st_relay >= 3) && (idx_st_relay < 6))
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	f240 80dd 	bls.w	8003d38 <Update_StatusBt+0x378>
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	f200 80d9 	bhi.w	8003d38 <Update_StatusBt+0x378>
			{
				if (0 == Old_St_Relay[idx_st_relay])
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d152      	bne.n	8003c38 <Update_StatusBt+0x278>
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 3) * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8003b92:	4b1e      	ldr	r3, [pc, #120]	@ (8003c0c <Update_StatusBt+0x24c>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc fccc 	bl	8000534 <__aeabi_i2d>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	460d      	mov	r5, r1
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	3b03      	subs	r3, #3
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c10 <Update_StatusBt+0x250>)
 8003ba6:	7812      	ldrb	r2, [r2, #0]
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fcc1 	bl	8000534 <__aeabi_i2d>
 8003bb2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003bb6:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <Update_StatusBt+0x254>)
 8003bb8:	f7fc fd26 	bl	8000608 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc fb6a 	bl	800029c <__adddf3>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7fc fff2 	bl	8000bb8 <__aeabi_d2uiz>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	b298      	uxth	r0, r3
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <Update_StatusBt+0x258>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	334b      	adds	r3, #75	@ 0x4b
 8003bde:	b299      	uxth	r1, r3
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <Update_StatusBt+0x250>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <Update_StatusBt+0x25c>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	461c      	mov	r4, r3
 8003bec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	f7fe f827 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	461a      	mov	r2, r3
 8003c02:	4907      	ldr	r1, [pc, #28]	@ (8003c20 <Update_StatusBt+0x260>)
 8003c04:	4807      	ldr	r0, [pc, #28]	@ (8003c24 <Update_StatusBt+0x264>)
 8003c06:	f006 ff7d 	bl	800ab04 <siprintf>
 8003c0a:	e051      	b.n	8003cb0 <Update_StatusBt+0x2f0>
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000002 	.word	0x20000002
 8003c14:	3ff33333 	.word	0x3ff33333
 8003c18:	20000001 	.word	0x20000001
 8003c1c:	20000003 	.word	0x20000003
 8003c20:	0800cdec 	.word	0x0800cdec
 8003c24:	20000458 	.word	0x20000458
 8003c28:	0800cdf8 	.word	0x0800cdf8
 8003c2c:	2000000a 	.word	0x2000000a
 8003c30:	2000000b 	.word	0x2000000b
 8003c34:	0800d964 	.word	0x0800d964
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 3) * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8003c38:	4ba5      	ldr	r3, [pc, #660]	@ (8003ed0 <Update_StatusBt+0x510>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fc79 	bl	8000534 <__aeabi_i2d>
 8003c42:	4604      	mov	r4, r0
 8003c44:	460d      	mov	r5, r1
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3b03      	subs	r3, #3
 8003c4a:	4aa2      	ldr	r2, [pc, #648]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc6e 	bl	8000534 <__aeabi_i2d>
 8003c58:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003c5c:	4b9e      	ldr	r3, [pc, #632]	@ (8003ed8 <Update_StatusBt+0x518>)
 8003c5e:	f7fc fcd3 	bl	8000608 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7fc fb17 	bl	800029c <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f7fc ff9f 	bl	8000bb8 <__aeabi_d2uiz>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	b298      	uxth	r0, r3
 8003c7e:	4b97      	ldr	r3, [pc, #604]	@ (8003edc <Update_StatusBt+0x51c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	334b      	adds	r3, #75	@ 0x4b
 8003c84:	b299      	uxth	r1, r3
 8003c86:	4b93      	ldr	r3, [pc, #588]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b94      	ldr	r3, [pc, #592]	@ (8003ee0 <Update_StatusBt+0x520>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	461c      	mov	r4, r3
 8003c92:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	2305      	movs	r3, #5
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	f7fd ffd4 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	498e      	ldr	r1, [pc, #568]	@ (8003ee4 <Update_StatusBt+0x524>)
 8003caa:	488f      	ldr	r0, [pc, #572]	@ (8003ee8 <Update_StatusBt+0x528>)
 8003cac:	f006 ff2a 	bl	800ab04 <siprintf>
				}
				LCD_Font(Start_x + ((idx_st_relay - 3) * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8003cb0:	4b87      	ldr	r3, [pc, #540]	@ (8003ed0 <Update_StatusBt+0x510>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fc3d 	bl	8000534 <__aeabi_i2d>
 8003cba:	4604      	mov	r4, r0
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	4a84      	ldr	r2, [pc, #528]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc32 	bl	8000534 <__aeabi_i2d>
 8003cd0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003cd4:	4b80      	ldr	r3, [pc, #512]	@ (8003ed8 <Update_StatusBt+0x518>)
 8003cd6:	f7fc fc97 	bl	8000608 <__aeabi_dmul>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fadb 	bl	800029c <__adddf3>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4614      	mov	r4, r2
 8003cec:	461d      	mov	r5, r3
 8003cee:	4b7f      	ldr	r3, [pc, #508]	@ (8003eec <Update_StatusBt+0x52c>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fc1e 	bl	8000534 <__aeabi_i2d>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f7fc facc 	bl	800029c <__adddf3>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc ff54 	bl	8000bb8 <__aeabi_d2uiz>
 8003d10:	4603      	mov	r3, r0
 8003d12:	b298      	uxth	r0, r3
 8003d14:	4b71      	ldr	r3, [pc, #452]	@ (8003edc <Update_StatusBt+0x51c>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b75      	ldr	r3, [pc, #468]	@ (8003ef0 <Update_StatusBt+0x530>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	334b      	adds	r3, #75	@ 0x4b
 8003d24:	b299      	uxth	r1, r3
 8003d26:	2300      	movs	r3, #0
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4b71      	ldr	r3, [pc, #452]	@ (8003ef4 <Update_StatusBt+0x534>)
 8003d30:	4a6d      	ldr	r2, [pc, #436]	@ (8003ee8 <Update_StatusBt+0x528>)
 8003d32:	f7fd fdc5 	bl	80018c0 <LCD_Font>
 8003d36:	e1a3      	b.n	8004080 <Update_StatusBt+0x6c0>
			}
			else if((idx_st_relay >= 6) && (idx_st_relay < 9))
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	f240 80de 	bls.w	8003efc <Update_StatusBt+0x53c>
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	f200 80da 	bhi.w	8003efc <Update_StatusBt+0x53c>
			{
				if (0 == Old_St_Relay[idx_st_relay])
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d13c      	bne.n	8003dce <Update_StatusBt+0x40e>
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 6) * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8003d54:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <Update_StatusBt+0x510>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fbeb 	bl	8000534 <__aeabi_i2d>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	460d      	mov	r5, r1
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	3b06      	subs	r3, #6
 8003d66:	4a5b      	ldr	r2, [pc, #364]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fbe0 	bl	8000534 <__aeabi_i2d>
 8003d74:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003d78:	4b57      	ldr	r3, [pc, #348]	@ (8003ed8 <Update_StatusBt+0x518>)
 8003d7a:	f7fc fc45 	bl	8000608 <__aeabi_dmul>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4620      	mov	r0, r4
 8003d84:	4629      	mov	r1, r5
 8003d86:	f7fc fa89 	bl	800029c <__adddf3>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7fc ff11 	bl	8000bb8 <__aeabi_d2uiz>
 8003d96:	4603      	mov	r3, r0
 8003d98:	b298      	uxth	r0, r3
 8003d9a:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <Update_StatusBt+0x51c>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	3396      	adds	r3, #150	@ 0x96
 8003da0:	b299      	uxth	r1, r3
 8003da2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <Update_StatusBt+0x520>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	461c      	mov	r4, r3
 8003dae:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	2305      	movs	r3, #5
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	4623      	mov	r3, r4
 8003dba:	f7fd ff46 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	494c      	ldr	r1, [pc, #304]	@ (8003ef8 <Update_StatusBt+0x538>)
 8003dc6:	4848      	ldr	r0, [pc, #288]	@ (8003ee8 <Update_StatusBt+0x528>)
 8003dc8:	f006 fe9c 	bl	800ab04 <siprintf>
 8003dcc:	e03b      	b.n	8003e46 <Update_StatusBt+0x486>
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 6) * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8003dce:	4b40      	ldr	r3, [pc, #256]	@ (8003ed0 <Update_StatusBt+0x510>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fbae 	bl	8000534 <__aeabi_i2d>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	460d      	mov	r5, r1
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	3b06      	subs	r3, #6
 8003de0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fba3 	bl	8000534 <__aeabi_i2d>
 8003dee:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003df2:	4b39      	ldr	r3, [pc, #228]	@ (8003ed8 <Update_StatusBt+0x518>)
 8003df4:	f7fc fc08 	bl	8000608 <__aeabi_dmul>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc fa4c 	bl	800029c <__adddf3>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f7fc fed4 	bl	8000bb8 <__aeabi_d2uiz>
 8003e10:	4603      	mov	r3, r0
 8003e12:	b298      	uxth	r0, r3
 8003e14:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <Update_StatusBt+0x51c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	3396      	adds	r3, #150	@ 0x96
 8003e1a:	b299      	uxth	r1, r3
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee0 <Update_StatusBt+0x520>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	461c      	mov	r4, r3
 8003e28:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2305      	movs	r3, #5
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4623      	mov	r3, r4
 8003e34:	f7fd ff09 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4929      	ldr	r1, [pc, #164]	@ (8003ee4 <Update_StatusBt+0x524>)
 8003e40:	4829      	ldr	r0, [pc, #164]	@ (8003ee8 <Update_StatusBt+0x528>)
 8003e42:	f006 fe5f 	bl	800ab04 <siprintf>
				}
				LCD_Font(Start_x + ((idx_st_relay - 6) * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 2 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8003e46:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <Update_StatusBt+0x510>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc fb72 	bl	8000534 <__aeabi_i2d>
 8003e50:	4604      	mov	r4, r0
 8003e52:	460d      	mov	r5, r1
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	3b06      	subs	r3, #6
 8003e58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <Update_StatusBt+0x514>)
 8003e5a:	7812      	ldrb	r2, [r2, #0]
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fb67 	bl	8000534 <__aeabi_i2d>
 8003e66:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <Update_StatusBt+0x518>)
 8003e6c:	f7fc fbcc 	bl	8000608 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc fa10 	bl	800029c <__adddf3>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4614      	mov	r4, r2
 8003e82:	461d      	mov	r5, r3
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <Update_StatusBt+0x52c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc fb53 	bl	8000534 <__aeabi_i2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4620      	mov	r0, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	f7fc fa01 	bl	800029c <__adddf3>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f7fc fe89 	bl	8000bb8 <__aeabi_d2uiz>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	b298      	uxth	r0, r3
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <Update_StatusBt+0x51c>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef0 <Update_StatusBt+0x530>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3396      	adds	r3, #150	@ 0x96
 8003eba:	b299      	uxth	r1, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <Update_StatusBt+0x534>)
 8003ec6:	4a08      	ldr	r2, [pc, #32]	@ (8003ee8 <Update_StatusBt+0x528>)
 8003ec8:	f7fd fcfa 	bl	80018c0 <LCD_Font>
 8003ecc:	e0d8      	b.n	8004080 <Update_StatusBt+0x6c0>
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	20000002 	.word	0x20000002
 8003ed8:	3ff33333 	.word	0x3ff33333
 8003edc:	20000001 	.word	0x20000001
 8003ee0:	20000003 	.word	0x20000003
 8003ee4:	0800cdf8 	.word	0x0800cdf8
 8003ee8:	20000458 	.word	0x20000458
 8003eec:	2000000a 	.word	0x2000000a
 8003ef0:	2000000b 	.word	0x2000000b
 8003ef4:	0800d964 	.word	0x0800d964
 8003ef8:	0800cdec 	.word	0x0800cdec
			}
			else
			{
				if (0 == Old_St_Relay[idx_st_relay])
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13c      	bne.n	8003f82 <Update_StatusBt+0x5c2>
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 9) * Wigth_Bt * 1.2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8003f08:	4b63      	ldr	r3, [pc, #396]	@ (8004098 <Update_StatusBt+0x6d8>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fb11 	bl	8000534 <__aeabi_i2d>
 8003f12:	4604      	mov	r4, r0
 8003f14:	460d      	mov	r5, r1
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	3b09      	subs	r3, #9
 8003f1a:	4a60      	ldr	r2, [pc, #384]	@ (800409c <Update_StatusBt+0x6dc>)
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fb06 	bl	8000534 <__aeabi_i2d>
 8003f28:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80040a0 <Update_StatusBt+0x6e0>)
 8003f2e:	f7fc fb6b 	bl	8000608 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc f9af 	bl	800029c <__adddf3>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fc fe37 	bl	8000bb8 <__aeabi_d2uiz>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	b298      	uxth	r0, r3
 8003f4e:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <Update_StatusBt+0x6e4>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	33e1      	adds	r3, #225	@ 0xe1
 8003f54:	b299      	uxth	r1, r3
 8003f56:	4b51      	ldr	r3, [pc, #324]	@ (800409c <Update_StatusBt+0x6dc>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <Update_StatusBt+0x6e8>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461c      	mov	r4, r3
 8003f62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2305      	movs	r3, #5
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4623      	mov	r3, r4
 8003f6e:	f7fd fe6c 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	3301      	adds	r3, #1
 8003f76:	461a      	mov	r2, r3
 8003f78:	494c      	ldr	r1, [pc, #304]	@ (80040ac <Update_StatusBt+0x6ec>)
 8003f7a:	484d      	ldr	r0, [pc, #308]	@ (80040b0 <Update_StatusBt+0x6f0>)
 8003f7c:	f006 fdc2 	bl	800ab04 <siprintf>
 8003f80:	e03b      	b.n	8003ffa <Update_StatusBt+0x63a>
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 9) * Wigth_Bt * 1.2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8003f82:	4b45      	ldr	r3, [pc, #276]	@ (8004098 <Update_StatusBt+0x6d8>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fad4 	bl	8000534 <__aeabi_i2d>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	3b09      	subs	r3, #9
 8003f94:	4a41      	ldr	r2, [pc, #260]	@ (800409c <Update_StatusBt+0x6dc>)
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fac9 	bl	8000534 <__aeabi_i2d>
 8003fa2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80040a0 <Update_StatusBt+0x6e0>)
 8003fa8:	f7fc fb2e 	bl	8000608 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	f7fc f972 	bl	800029c <__adddf3>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7fc fdfa 	bl	8000bb8 <__aeabi_d2uiz>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	b298      	uxth	r0, r3
 8003fc8:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <Update_StatusBt+0x6e4>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	33e1      	adds	r3, #225	@ 0xe1
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <Update_StatusBt+0x6dc>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b34      	ldr	r3, [pc, #208]	@ (80040a8 <Update_StatusBt+0x6e8>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	461c      	mov	r4, r3
 8003fdc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2305      	movs	r3, #5
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	f7fd fe2f 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4930      	ldr	r1, [pc, #192]	@ (80040b4 <Update_StatusBt+0x6f4>)
 8003ff4:	482e      	ldr	r0, [pc, #184]	@ (80040b0 <Update_StatusBt+0x6f0>)
 8003ff6:	f006 fd85 	bl	800ab04 <siprintf>
				}
				LCD_Font(Start_x + ((idx_st_relay - 9) * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 3 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8003ffa:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <Update_StatusBt+0x6d8>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc fa98 	bl	8000534 <__aeabi_i2d>
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	3b09      	subs	r3, #9
 800400c:	4a23      	ldr	r2, [pc, #140]	@ (800409c <Update_StatusBt+0x6dc>)
 800400e:	7812      	ldrb	r2, [r2, #0]
 8004010:	fb02 f303 	mul.w	r3, r2, r3
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fa8d 	bl	8000534 <__aeabi_i2d>
 800401a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800401e:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <Update_StatusBt+0x6e0>)
 8004020:	f7fc faf2 	bl	8000608 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc f936 	bl	800029c <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <Update_StatusBt+0x6f8>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa79 	bl	8000534 <__aeabi_i2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc f927 	bl	800029c <__adddf3>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f7fc fdaf 	bl	8000bb8 <__aeabi_d2uiz>
 800405a:	4603      	mov	r3, r0
 800405c:	b298      	uxth	r0, r3
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <Update_StatusBt+0x6e4>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <Update_StatusBt+0x6fc>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4413      	add	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	33e1      	adds	r3, #225	@ 0xe1
 800406e:	b299      	uxth	r1, r3
 8004070:	2300      	movs	r3, #0
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2301      	movs	r3, #1
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <Update_StatusBt+0x700>)
 800407a:	4a0d      	ldr	r2, [pc, #52]	@ (80040b0 <Update_StatusBt+0x6f0>)
 800407c:	f7fd fc20 	bl	80018c0 <LCD_Font>
	for(idx_st_relay = 0; idx_st_relay < 10; idx_st_relay++)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	3301      	adds	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b09      	cmp	r3, #9
 800408a:	f67f aca1 	bls.w	80039d0 <Update_StatusBt+0x10>
			}
		}
	}
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bdb0      	pop	{r4, r5, r7, pc}
 8004098:	20000000 	.word	0x20000000
 800409c:	20000002 	.word	0x20000002
 80040a0:	3ff33333 	.word	0x3ff33333
 80040a4:	20000001 	.word	0x20000001
 80040a8:	20000003 	.word	0x20000003
 80040ac:	0800cdec 	.word	0x0800cdec
 80040b0:	20000458 	.word	0x20000458
 80040b4:	0800cdf8 	.word	0x0800cdf8
 80040b8:	2000000a 	.word	0x2000000a
 80040bc:	2000000b 	.word	0x2000000b
 80040c0:	0800d964 	.word	0x0800d964

080040c4 <Update_Current_Val>:
/***************************************************************************************
  ************* The function is used to update the current value change **************
*****************************************************************************************/
void Update_Current_Val(bool *idx_changed)
{
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b0ac      	sub	sp, #176	@ 0xb0
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
    char buf[20];
    int x_positions[] = {140, 140, 140, 140, 140, 360, 360, 360, 360};
 80040cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004350 <Update_Current_Val+0x28c>)
 80040ce:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80040d2:	461d      	mov	r5, r3
 80040d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	6023      	str	r3, [r4, #0]
    int y_positions[] = {15, 65, 115, 165, 215, 15, 65, 115, 165};
 80040e0:	4b9c      	ldr	r3, [pc, #624]	@ (8004354 <Update_Current_Val+0x290>)
 80040e2:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80040e6:	461d      	mov	r5, r3
 80040e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	6023      	str	r3, [r4, #0]
    int y_texts[] = {40, 90, 140, 190, 240, 40, 90, 140, 190};
 80040f4:	4b98      	ldr	r3, [pc, #608]	@ (8004358 <Update_Current_Val+0x294>)
 80040f6:	f107 041c 	add.w	r4, r7, #28
 80040fa:	461d      	mov	r5, r3
 80040fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	6023      	str	r3, [r4, #0]
    uint16_t colors[] = {ILI9488_MAGENTA, ILI9488_MAGENTA, ILI9488_MAGENTA, ILI9488_MAGENTA, ILI9488_MAGENTA,
 8004108:	4b94      	ldr	r3, [pc, #592]	@ (800435c <Update_Current_Val+0x298>)
 800410a:	f107 0408 	add.w	r4, r7, #8
 800410e:	461d      	mov	r5, r3
 8004110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	8023      	strh	r3, [r4, #0]
                         ILI9488_MAROON, ILI9488_MAROON, ILI9488_MAROON, ILI9488_MAROON};
    int width = 90;
 8004118:	235a      	movs	r3, #90	@ 0x5a
 800411a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    int height = 30;
 800411e:	231e      	movs	r3, #30
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = 0; i < 9; i++)
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800412a:	e0b6      	b.n	800429a <Update_Current_Val+0x1d6>
    {
    	/* if values is changed */
        if (idx_changed[i] == 1 && NodeStatus_arr[i] == 1)
 800412c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d051      	beq.n	80041de <Update_Current_Val+0x11a>
 800413a:	4a89      	ldr	r2, [pc, #548]	@ (8004360 <Update_Current_Val+0x29c>)
 800413c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004140:	4413      	add	r3, r2
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d14a      	bne.n	80041de <Update_Current_Val+0x11a>
        {
            fillRect(x_positions[i], y_positions[i], width, height, WHITE);
 8004148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	33a8      	adds	r3, #168	@ 0xa8
 8004150:	443b      	add	r3, r7
 8004152:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004156:	b218      	sxth	r0, r3
 8004158:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	33a8      	adds	r3, #168	@ 0xa8
 8004160:	443b      	add	r3, r7
 8004162:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8004166:	b219      	sxth	r1, r3
 8004168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800416c:	b21a      	sxth	r2, r3
 800416e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004172:	b21b      	sxth	r3, r3
 8004174:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8004178:	9400      	str	r4, [sp, #0]
 800417a:	f7fc fff5 	bl	8001168 <fillRect>
            sprintf(buf, "%0.2fA", irms1_arr[i]);
 800417e:	4a79      	ldr	r2, [pc, #484]	@ (8004364 <Update_Current_Val+0x2a0>)
 8004180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc f9e4 	bl	8000558 <__aeabi_f2d>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8004198:	4973      	ldr	r1, [pc, #460]	@ (8004368 <Update_Current_Val+0x2a4>)
 800419a:	f006 fcb3 	bl	800ab04 <siprintf>
            LCD_Font(x_positions[i], y_texts[i], buf, _Open_Sans_Bold_26, 1, colors[i]);
 800419e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	33a8      	adds	r3, #168	@ 0xa8
 80041a6:	443b      	add	r3, r7
 80041a8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80041ac:	b298      	uxth	r0, r3
 80041ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	33a8      	adds	r3, #168	@ 0xa8
 80041b6:	443b      	add	r3, r7
 80041b8:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80041bc:	b299      	uxth	r1, r3
 80041be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	33a8      	adds	r3, #168	@ 0xa8
 80041c6:	443b      	add	r3, r7
 80041c8:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 80041cc:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	2301      	movs	r3, #1
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	4b65      	ldr	r3, [pc, #404]	@ (800436c <Update_Current_Val+0x2a8>)
 80041d8:	f7fd fb72 	bl	80018c0 <LCD_Font>
 80041dc:	e058      	b.n	8004290 <Update_Current_Val+0x1cc>
        }
        /* node off */
        else if (NodeStatus_arr[i] == 0 && (NodeStatus_arr_Old[i] != NodeStatus_arr[i]))
 80041de:	4a60      	ldr	r2, [pc, #384]	@ (8004360 <Update_Current_Val+0x29c>)
 80041e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041e4:	4413      	add	r3, r2
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d151      	bne.n	8004290 <Update_Current_Val+0x1cc>
 80041ec:	4a60      	ldr	r2, [pc, #384]	@ (8004370 <Update_Current_Val+0x2ac>)
 80041ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041f2:	4413      	add	r3, r2
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	495a      	ldr	r1, [pc, #360]	@ (8004360 <Update_Current_Val+0x29c>)
 80041f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041fc:	440b      	add	r3, r1
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d045      	beq.n	8004290 <Update_Current_Val+0x1cc>
		{
			fillRect(x_positions[i], y_positions[i], width, height, WHITE);
 8004204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	33a8      	adds	r3, #168	@ 0xa8
 800420c:	443b      	add	r3, r7
 800420e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004212:	b218      	sxth	r0, r3
 8004214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	33a8      	adds	r3, #168	@ 0xa8
 800421c:	443b      	add	r3, r7
 800421e:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8004222:	b219      	sxth	r1, r3
 8004224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004228:	b21a      	sxth	r2, r3
 800422a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800422e:	b21b      	sxth	r3, r3
 8004230:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8004234:	9400      	str	r4, [sp, #0]
 8004236:	f7fc ff97 	bl	8001168 <fillRect>
			LCD_Font(x_positions[i] + 1, y_texts[i], "TAT", _Open_Sans_Bold_26, 1, colors[i]);
 800423a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	33a8      	adds	r3, #168	@ 0xa8
 8004242:	443b      	add	r3, r7
 8004244:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004248:	b29b      	uxth	r3, r3
 800424a:	3301      	adds	r3, #1
 800424c:	b298      	uxth	r0, r3
 800424e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	33a8      	adds	r3, #168	@ 0xa8
 8004256:	443b      	add	r3, r7
 8004258:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800425c:	b299      	uxth	r1, r3
 800425e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	33a8      	adds	r3, #168	@ 0xa8
 8004266:	443b      	add	r3, r7
 8004268:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	2301      	movs	r3, #1
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4b3e      	ldr	r3, [pc, #248]	@ (800436c <Update_Current_Val+0x2a8>)
 8004274:	4a3f      	ldr	r2, [pc, #252]	@ (8004374 <Update_Current_Val+0x2b0>)
 8004276:	f7fd fb23 	bl	80018c0 <LCD_Font>
			NodeStatus_arr_Old[i] = NodeStatus_arr[i];
 800427a:	4a39      	ldr	r2, [pc, #228]	@ (8004360 <Update_Current_Val+0x29c>)
 800427c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004280:	4413      	add	r3, r2
 8004282:	7819      	ldrb	r1, [r3, #0]
 8004284:	4a3a      	ldr	r2, [pc, #232]	@ (8004370 <Update_Current_Val+0x2ac>)
 8004286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800428a:	4413      	add	r3, r2
 800428c:	460a      	mov	r2, r1
 800428e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 9; i++)
 8004290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004294:	3301      	adds	r3, #1
 8004296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800429a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800429e:	2b08      	cmp	r3, #8
 80042a0:	f77f af44 	ble.w	800412c <Update_Current_Val+0x68>
		}
        else;
    }
    /* if values is changed */
    if(idx_changed[9] == 1 && NodeStatus_arr[9] == 1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3309      	adds	r3, #9
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d027      	beq.n	80042fe <Update_Current_Val+0x23a>
 80042ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004360 <Update_Current_Val+0x29c>)
 80042b0:	7a5b      	ldrb	r3, [r3, #9]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d123      	bne.n	80042fe <Update_Current_Val+0x23a>
	{
		fillRect(370, 215, 85, 30, WHITE);
 80042b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	231e      	movs	r3, #30
 80042be:	2255      	movs	r2, #85	@ 0x55
 80042c0:	21d7      	movs	r1, #215	@ 0xd7
 80042c2:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 80042c6:	f7fc ff4f 	bl	8001168 <fillRect>
		sprintf(buf, "%0.2fA", irms1_arr[9]);
 80042ca:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <Update_Current_Val+0x2a0>)
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f942 	bl	8000558 <__aeabi_f2d>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80042dc:	4922      	ldr	r1, [pc, #136]	@ (8004368 <Update_Current_Val+0x2a4>)
 80042de:	f006 fc11 	bl	800ab04 <siprintf>
		LCD_Font(370, 240, buf, _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 80042e2:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80042e6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2301      	movs	r3, #1
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <Update_Current_Val+0x2a8>)
 80042f2:	21f0      	movs	r1, #240	@ 0xf0
 80042f4:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 80042f8:	f7fd fae2 	bl	80018c0 <LCD_Font>
    	fillRect(370, 215, 85, 30, WHITE);
		LCD_Font(370, 240, "TAT", _Open_Sans_Bold_26, 1, ILI9488_MAROON);
		NodeStatus_arr_Old[9] = NodeStatus_arr[9];
	}
    else;
}
 80042fc:	e023      	b.n	8004346 <Update_Current_Val+0x282>
    else if(NodeStatus_arr[9] == 0 && (NodeStatus_arr_Old[9] != NodeStatus_arr[9]))
 80042fe:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <Update_Current_Val+0x29c>)
 8004300:	7a5b      	ldrb	r3, [r3, #9]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11f      	bne.n	8004346 <Update_Current_Val+0x282>
 8004306:	4b1a      	ldr	r3, [pc, #104]	@ (8004370 <Update_Current_Val+0x2ac>)
 8004308:	7a5a      	ldrb	r2, [r3, #9]
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <Update_Current_Val+0x29c>)
 800430c:	7a5b      	ldrb	r3, [r3, #9]
 800430e:	429a      	cmp	r2, r3
 8004310:	d019      	beq.n	8004346 <Update_Current_Val+0x282>
    	fillRect(370, 215, 85, 30, WHITE);
 8004312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	231e      	movs	r3, #30
 800431a:	2255      	movs	r2, #85	@ 0x55
 800431c:	21d7      	movs	r1, #215	@ 0xd7
 800431e:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8004322:	f7fc ff21 	bl	8001168 <fillRect>
		LCD_Font(370, 240, "TAT", _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 8004326:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	2301      	movs	r3, #1
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <Update_Current_Val+0x2a8>)
 8004332:	4a10      	ldr	r2, [pc, #64]	@ (8004374 <Update_Current_Val+0x2b0>)
 8004334:	21f0      	movs	r1, #240	@ 0xf0
 8004336:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 800433a:	f7fd fac1 	bl	80018c0 <LCD_Font>
		NodeStatus_arr_Old[9] = NodeStatus_arr[9];
 800433e:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <Update_Current_Val+0x29c>)
 8004340:	7a5a      	ldrb	r2, [r3, #9]
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <Update_Current_Val+0x2ac>)
 8004344:	725a      	strb	r2, [r3, #9]
}
 8004346:	bf00      	nop
 8004348:	37a8      	adds	r7, #168	@ 0xa8
 800434a:	46bd      	mov	sp, r7
 800434c:	bdb0      	pop	{r4, r5, r7, pc}
 800434e:	bf00      	nop
 8004350:	0800ce30 	.word	0x0800ce30
 8004354:	0800ce54 	.word	0x0800ce54
 8004358:	0800ce78 	.word	0x0800ce78
 800435c:	0800ce9c 	.word	0x0800ce9c
 8004360:	2000058c 	.word	0x2000058c
 8004364:	200005a4 	.word	0x200005a4
 8004368:	0800ce24 	.word	0x0800ce24
 800436c:	0800f344 	.word	0x0800f344
 8004370:	20000598 	.word	0x20000598
 8004374:	0800ce2c 	.word	0x0800ce2c

08004378 <Send_Request_Lora>:
/***************************************************************************************
 	 ************* The function is used to send a request to node **************
*****************************************************************************************/
void Send_Request_Lora(uint8_t node)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    standby_mode();
 8004382:	f001 fb7d 	bl	8005a80 <standby_mode>
    writeRegister(REG_FIFO_ADDR_PTR, 0);  // Reset address pointer to 0
 8004386:	2100      	movs	r1, #0
 8004388:	200d      	movs	r0, #13
 800438a:	f001 fb49 	bl	8005a20 <writeRegister>
    writeRegister(REG_PAYLOAD_LENGTH, 0); // Reset pay-load size
 800438e:	2100      	movs	r1, #0
 8004390:	2022      	movs	r0, #34	@ 0x22
 8004392:	f001 fb45 	bl	8005a20 <writeRegister>
    tx_lora_bf[0] = node;
 8004396:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <Send_Request_Lora+0x64>)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	7013      	strb	r3, [r2, #0]
    tx_lora_bf[1] = 0xFD;
 800439c:	4b0f      	ldr	r3, [pc, #60]	@ (80043dc <Send_Request_Lora+0x64>)
 800439e:	22fd      	movs	r2, #253	@ 0xfd
 80043a0:	705a      	strb	r2, [r3, #1]
    tx_lora_bf[2] = 0xFF;
 80043a2:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <Send_Request_Lora+0x64>)
 80043a4:	22ff      	movs	r2, #255	@ 0xff
 80043a6:	709a      	strb	r2, [r3, #2]
    for (i = 0; i < 3; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e009      	b.n	80043c2 <Send_Request_Lora+0x4a>
    {
        writeRegister(REG_FIFO, tx_lora_bf[i]);
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <Send_Request_Lora+0x64>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	4619      	mov	r1, r3
 80043b6:	2000      	movs	r0, #0
 80043b8:	f001 fb32 	bl	8005a20 <writeRegister>
    for (i = 0; i < 3; i++)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	3301      	adds	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d9f2      	bls.n	80043ae <Send_Request_Lora+0x36>
    }
    writeRegister(REG_PAYLOAD_LENGTH, 3);  // set size of pay-load
 80043c8:	2103      	movs	r1, #3
 80043ca:	2022      	movs	r0, #34	@ 0x22
 80043cc:	f001 fb28 	bl	8005a20 <writeRegister>
    tx_mode();
 80043d0:	f001 fb66 	bl	8005aa0 <tx_mode>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000480 	.word	0x20000480

080043e0 <Send_Lora_UpdateRelay>:
/*************************************************************************************************
******* The function is used to send relay status to node when the relay status is updated *******
**************************************************************************************************/
void Send_Lora_UpdateRelay(uint8_t node)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint32_t timeout = HAL_GetTick();
 80043ea:	f001 fe2d 	bl	8006048 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]
	uint32_t max_timeout = 50;
 80043f0:	2332      	movs	r3, #50	@ 0x32
 80043f2:	60fb      	str	r3, [r7, #12]
	sx1278_init(0x6c4000);
 80043f4:	4826      	ldr	r0, [pc, #152]	@ (8004490 <Send_Lora_UpdateRelay+0xb0>)
 80043f6:	f001 fb7f 	bl	8005af8 <sx1278_init>
	standby_mode();
 80043fa:	f001 fb41 	bl	8005a80 <standby_mode>
	writeRegister(REG_FIFO_ADDR_PTR, 0);  // Reset address pointer to 0
 80043fe:	2100      	movs	r1, #0
 8004400:	200d      	movs	r0, #13
 8004402:	f001 fb0d 	bl	8005a20 <writeRegister>
	writeRegister(REG_PAYLOAD_LENGTH, 0); // Reset pay-load size
 8004406:	2100      	movs	r1, #0
 8004408:	2022      	movs	r0, #34	@ 0x22
 800440a:	f001 fb09 	bl	8005a20 <writeRegister>
	tx_lora_bf[0] = node;
 800440e:	4a21      	ldr	r2, [pc, #132]	@ (8004494 <Send_Lora_UpdateRelay+0xb4>)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	7013      	strb	r3, [r2, #0]
	tx_lora_bf[1] = 0xFE;
 8004414:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <Send_Lora_UpdateRelay+0xb4>)
 8004416:	22fe      	movs	r2, #254	@ 0xfe
 8004418:	705a      	strb	r2, [r3, #1]
	tx_lora_bf[2] = (ReL_LoRa_Sen[node]);
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <Send_Lora_UpdateRelay+0xb8>)
 800441e:	5cd2      	ldrb	r2, [r2, r3]
 8004420:	4b1c      	ldr	r3, [pc, #112]	@ (8004494 <Send_Lora_UpdateRelay+0xb4>)
 8004422:	709a      	strb	r2, [r3, #2]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004424:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <Send_Lora_UpdateRelay+0xbc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	625a      	str	r2, [r3, #36]	@ 0x24
	for (i = 0; i < 3; i++)
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]
 8004430:	e009      	b.n	8004446 <Send_Lora_UpdateRelay+0x66>
	{
		writeRegister(0, tx_lora_bf[i]);
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	4a17      	ldr	r2, [pc, #92]	@ (8004494 <Send_Lora_UpdateRelay+0xb4>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	4619      	mov	r1, r3
 800443a:	2000      	movs	r0, #0
 800443c:	f001 faf0 	bl	8005a20 <writeRegister>
	for (i = 0; i < 3; i++)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	3301      	adds	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d9f2      	bls.n	8004432 <Send_Lora_UpdateRelay+0x52>
	}
	writeRegister(REG_PAYLOAD_LENGTH, 3);  // set size of pay-load
 800444c:	2103      	movs	r1, #3
 800444e:	2022      	movs	r0, #34	@ 0x22
 8004450:	f001 fae6 	bl	8005a20 <writeRegister>
	tx_mode();
 8004454:	f001 fb24 	bl	8005aa0 <tx_mode>

	while (!(readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK)) // wait until for the data is sent completely
 8004458:	e007      	b.n	800446a <Send_Lora_UpdateRelay+0x8a>
	{
		if((HAL_GetTick() - timeout) > max_timeout)
 800445a:	f001 fdf5 	bl	8006048 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	429a      	cmp	r2, r3
 8004468:	d308      	bcc.n	800447c <Send_Lora_UpdateRelay+0x9c>
	while (!(readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK)) // wait until for the data is sent completely
 800446a:	2012      	movs	r0, #18
 800446c:	f001 faaa 	bl	80059c4 <readRegister>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ef      	beq.n	800445a <Send_Lora_UpdateRelay+0x7a>
 800447a:	e000      	b.n	800447e <Send_Lora_UpdateRelay+0x9e>
		{
			break;
 800447c:	bf00      	nop
		}
	}
	writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800447e:	2108      	movs	r1, #8
 8004480:	2012      	movs	r0, #18
 8004482:	f001 facd 	bl	8005a20 <writeRegister>
}
 8004486:	bf00      	nop
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	006c4000 	.word	0x006c4000
 8004494:	20000480 	.word	0x20000480
 8004498:	20000568 	.word	0x20000568
 800449c:	200003c4 	.word	0x200003c4

080044a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b0:	d113      	bne.n	80044da <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		touchx = getX();
 80044b2:	f001 fd25 	bl	8005f00 <getX>
 80044b6:	4603      	mov	r3, r0
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80044bc:	801a      	strh	r2, [r3, #0]
		touchy = getY();
 80044be:	f001 fd29 	bl	8005f14 <getY>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80044c8:	801a      	strh	r2, [r3, #0]
		debounce_100ms++;
 80044ca:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80044d6:	801a      	strh	r2, [r3, #0]
	else if (htim->Instance == TIM3)
	{
		timer_cnt3 = true;
	}

}
 80044d8:	e007      	b.n	80044ea <HAL_TIM_PeriodElapsedCallback+0x4a>
	else if (htim->Instance == TIM3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a08      	ldr	r2, [pc, #32]	@ (8004500 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d102      	bne.n	80044ea <HAL_TIM_PeriodElapsedCallback+0x4a>
		timer_cnt3 = true;
 80044e4:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000454 	.word	0x20000454
 80044f8:	20000456 	.word	0x20000456
 80044fc:	2000047a 	.word	0x2000047a
 8004500:	40000400 	.word	0x40000400
 8004504:	2000047d 	.word	0x2000047d

08004508 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d106      	bne.n	8004526 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		case GPIO_PIN_3:
			writeRegister(0x12, 0x08);
 8004518:	2108      	movs	r1, #8
 800451a:	2012      	movs	r0, #18
 800451c:	f001 fa80 	bl	8005a20 <writeRegister>
			rx_mode();
 8004520:	f001 fac6 	bl	8005ab0 <rx_mode>
			break;
 8004524:	bf00      	nop
	}
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <ConvertFloatAsBytes>:

/***********************************************************************
******* Function used to convert 4 byte data to float variable *******
************************************************************************/
void ConvertFloatAsBytes(float value, uint8_t *buffer)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	ed87 0a01 	vstr	s0, [r7, #4]
 8004538:	6038      	str	r0, [r7, #0]
    memcpy(buffer, &value, sizeof(value)); // Copy float bytes to buffer
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <Send_Uart1>:

/***********************************************************************
 	 	 	******* Function used to send data by UART1 *******
************************************************************************/
void Send_Uart1(uint8_t *start_byte, uint8_t *Buffer, uint8_t *stop_bytes, uint8_t SizeofStartByte, uint8_t SizeofBuff)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart1, start_byte, SizeofStartByte, HAL_MAX_DELAY);
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	b29a      	uxth	r2, r3
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	480a      	ldr	r0, [pc, #40]	@ (8004590 <Send_Uart1+0x44>)
 8004566:	f004 fdad 	bl	80090c4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, Buffer, SizeofBuff, HAL_MAX_DELAY);
 800456a:	7e3b      	ldrb	r3, [r7, #24]
 800456c:	b29a      	uxth	r2, r3
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4806      	ldr	r0, [pc, #24]	@ (8004590 <Send_Uart1+0x44>)
 8004576:	f004 fda5 	bl	80090c4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, stop_bytes, 1, HAL_MAX_DELAY);
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	2201      	movs	r2, #1
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4803      	ldr	r0, [pc, #12]	@ (8004590 <Send_Uart1+0x44>)
 8004584:	f004 fd9e 	bl	80090c4 <HAL_UART_Transmit>
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000040c 	.word	0x2000040c

08004594 <HAL_UART_RxCpltCallback>:
/***********************************************************************
 	 	 	******* Function used to receive data by UART1 *******
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b085      	sub	sp, #20
 8004598:	af02      	add	r7, sp, #8
 800459a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a95      	ldr	r2, [pc, #596]	@ (80047f8 <HAL_UART_RxCpltCallback+0x264>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	f040 8123 	bne.w	80047ee <HAL_UART_RxCpltCallback+0x25a>
    {
    	if(byte_rx == start_byte_data)
 80045a8:	4b94      	ldr	r3, [pc, #592]	@ (80047fc <HAL_UART_RxCpltCallback+0x268>)
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	4b94      	ldr	r3, [pc, #592]	@ (8004800 <HAL_UART_RxCpltCallback+0x26c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d106      	bne.n	80045c2 <HAL_UART_RxCpltCallback+0x2e>
    	{
    		ena_rx = 1;
 80045b4:	4b93      	ldr	r3, [pc, #588]	@ (8004804 <HAL_UART_RxCpltCallback+0x270>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
			Rx_Idx = 0;
 80045ba:	4b93      	ldr	r3, [pc, #588]	@ (8004808 <HAL_UART_RxCpltCallback+0x274>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e03b      	b.n	800463a <HAL_UART_RxCpltCallback+0xa6>
    	}
    	else if((byte_rx != stop_byte) && (ena_rx == 1))
 80045c2:	4b8e      	ldr	r3, [pc, #568]	@ (80047fc <HAL_UART_RxCpltCallback+0x268>)
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	4b91      	ldr	r3, [pc, #580]	@ (800480c <HAL_UART_RxCpltCallback+0x278>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d011      	beq.n	80045f2 <HAL_UART_RxCpltCallback+0x5e>
 80045ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004804 <HAL_UART_RxCpltCallback+0x270>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10d      	bne.n	80045f2 <HAL_UART_RxCpltCallback+0x5e>
    	{
    		receivedData[Rx_Idx] = byte_rx;
 80045d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004808 <HAL_UART_RxCpltCallback+0x274>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4b87      	ldr	r3, [pc, #540]	@ (80047fc <HAL_UART_RxCpltCallback+0x268>)
 80045de:	7819      	ldrb	r1, [r3, #0]
 80045e0:	4b8b      	ldr	r3, [pc, #556]	@ (8004810 <HAL_UART_RxCpltCallback+0x27c>)
 80045e2:	5499      	strb	r1, [r3, r2]
			Rx_Idx++;
 80045e4:	4b88      	ldr	r3, [pc, #544]	@ (8004808 <HAL_UART_RxCpltCallback+0x274>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	4b86      	ldr	r3, [pc, #536]	@ (8004808 <HAL_UART_RxCpltCallback+0x274>)
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e023      	b.n	800463a <HAL_UART_RxCpltCallback+0xa6>
    	}
    	else if((byte_rx == 0x50) && (ena_rx == 1))
 80045f2:	4b82      	ldr	r3, [pc, #520]	@ (80047fc <HAL_UART_RxCpltCallback+0x268>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b50      	cmp	r3, #80	@ 0x50
 80045f8:	d11f      	bne.n	800463a <HAL_UART_RxCpltCallback+0xa6>
 80045fa:	4b82      	ldr	r3, [pc, #520]	@ (8004804 <HAL_UART_RxCpltCallback+0x270>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11b      	bne.n	800463a <HAL_UART_RxCpltCallback+0xa6>
    	{
    		if(receivedData[0] == 0xFE)
 8004602:	4b83      	ldr	r3, [pc, #524]	@ (8004810 <HAL_UART_RxCpltCallback+0x27c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2bfe      	cmp	r3, #254	@ 0xfe
 8004608:	d104      	bne.n	8004614 <HAL_UART_RxCpltCallback+0x80>
    		{
    			Buzzer = receivedData[1];
 800460a:	4b81      	ldr	r3, [pc, #516]	@ (8004810 <HAL_UART_RxCpltCallback+0x27c>)
 800460c:	785a      	ldrb	r2, [r3, #1]
 800460e:	4b81      	ldr	r3, [pc, #516]	@ (8004814 <HAL_UART_RxCpltCallback+0x280>)
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e00f      	b.n	8004634 <HAL_UART_RxCpltCallback+0xa0>
    		}
    		else if(receivedData[0] == 0xFD)
 8004614:	4b7e      	ldr	r3, [pc, #504]	@ (8004810 <HAL_UART_RxCpltCallback+0x27c>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2bfd      	cmp	r3, #253	@ 0xfd
 800461a:	d10b      	bne.n	8004634 <HAL_UART_RxCpltCallback+0xa0>
    		{
    			Ctr_Dev = ((uint16_t)receivedData[1] << 8) | (uint16_t)receivedData[2];
 800461c:	4b7c      	ldr	r3, [pc, #496]	@ (8004810 <HAL_UART_RxCpltCallback+0x27c>)
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	b21a      	sxth	r2, r3
 8004624:	4b7a      	ldr	r3, [pc, #488]	@ (8004810 <HAL_UART_RxCpltCallback+0x27c>)
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	b21b      	sxth	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	b21b      	sxth	r3, r3
 800462e:	b29a      	uxth	r2, r3
 8004630:	4b79      	ldr	r3, [pc, #484]	@ (8004818 <HAL_UART_RxCpltCallback+0x284>)
 8004632:	801a      	strh	r2, [r3, #0]
    		}
    		ena_rx = 0;
 8004634:	4b73      	ldr	r3, [pc, #460]	@ (8004804 <HAL_UART_RxCpltCallback+0x270>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
    	}
    	else;

    	if(Buzzer_Old != Buzzer)
 800463a:	4b78      	ldr	r3, [pc, #480]	@ (800481c <HAL_UART_RxCpltCallback+0x288>)
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	4b75      	ldr	r3, [pc, #468]	@ (8004814 <HAL_UART_RxCpltCallback+0x280>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	f000 80d0 	beq.w	80047e8 <HAL_UART_RxCpltCallback+0x254>
		{
			if (0 == Buzzer)
 8004648:	4b72      	ldr	r3, [pc, #456]	@ (8004814 <HAL_UART_RxCpltCallback+0x280>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d166      	bne.n	800471e <HAL_UART_RxCpltCallback+0x18a>
			{
				BUZZER_OFF;
 8004650:	2201      	movs	r2, #1
 8004652:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004656:	4872      	ldr	r0, [pc, #456]	@ (8004820 <HAL_UART_RxCpltCallback+0x28c>)
 8004658:	f002 fbbe 	bl	8006dd8 <HAL_GPIO_WritePin>
				if(StDisplay == CTRL_SCREEN_2)
 800465c:	4b71      	ldr	r3, [pc, #452]	@ (8004824 <HAL_UART_RxCpltCallback+0x290>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	f040 80c1 	bne.w	80047e8 <HAL_UART_RxCpltCallback+0x254>
				{
					LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_RED);
 8004666:	4b70      	ldr	r3, [pc, #448]	@ (8004828 <HAL_UART_RxCpltCallback+0x294>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	4b6f      	ldr	r3, [pc, #444]	@ (800482c <HAL_UART_RxCpltCallback+0x298>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	4413      	add	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	336e      	adds	r3, #110	@ 0x6e
 8004676:	b298      	uxth	r0, r3
 8004678:	4b6d      	ldr	r3, [pc, #436]	@ (8004830 <HAL_UART_RxCpltCallback+0x29c>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	4b6d      	ldr	r3, [pc, #436]	@ (8004834 <HAL_UART_RxCpltCallback+0x2a0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	4413      	add	r3, r2
 8004684:	b29b      	uxth	r3, r3
 8004686:	3332      	adds	r3, #50	@ 0x32
 8004688:	b299      	uxth	r1, r3
 800468a:	4b68      	ldr	r3, [pc, #416]	@ (800482c <HAL_UART_RxCpltCallback+0x298>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	3332      	adds	r3, #50	@ 0x32
 8004690:	b29a      	uxth	r2, r3
 8004692:	4b68      	ldr	r3, [pc, #416]	@ (8004834 <HAL_UART_RxCpltCallback+0x2a0>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	331e      	adds	r3, #30
 8004698:	b29b      	uxth	r3, r3
 800469a:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 800469e:	9401      	str	r4, [sp, #4]
 80046a0:	2405      	movs	r4, #5
 80046a2:	9400      	str	r4, [sp, #0]
 80046a4:	f7fd fad1 	bl	8001c4a <LCD_Rect_Round_Fill>
					LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: TAT", _Open_Sans_Bold_26, 1, BLACK);
 80046a8:	4b5f      	ldr	r3, [pc, #380]	@ (8004828 <HAL_UART_RxCpltCallback+0x294>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b5f      	ldr	r3, [pc, #380]	@ (800482c <HAL_UART_RxCpltCallback+0x298>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	338c      	adds	r3, #140	@ 0x8c
 80046b8:	b29e      	uxth	r6, r3
 80046ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004830 <HAL_UART_RxCpltCallback+0x29c>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb ff37 	bl	8000534 <__aeabi_i2d>
 80046c6:	4604      	mov	r4, r0
 80046c8:	460d      	mov	r5, r1
 80046ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004834 <HAL_UART_RxCpltCallback+0x2a0>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb ff30 	bl	8000534 <__aeabi_i2d>
 80046d4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80046d8:	4b57      	ldr	r3, [pc, #348]	@ (8004838 <HAL_UART_RxCpltCallback+0x2a4>)
 80046da:	f7fb ff95 	bl	8000608 <__aeabi_dmul>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	f7fb fdd7 	bl	800029c <__adddf3>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4620      	mov	r0, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	f7fb fdd1 	bl	800029c <__adddf3>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	f7fc fa59 	bl	8000bb8 <__aeabi_d2uiz>
 8004706:	4603      	mov	r3, r0
 8004708:	b299      	uxth	r1, r3
 800470a:	2300      	movs	r3, #0
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	2301      	movs	r3, #1
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	4b4a      	ldr	r3, [pc, #296]	@ (800483c <HAL_UART_RxCpltCallback+0x2a8>)
 8004714:	4a4a      	ldr	r2, [pc, #296]	@ (8004840 <HAL_UART_RxCpltCallback+0x2ac>)
 8004716:	4630      	mov	r0, r6
 8004718:	f7fd f8d2 	bl	80018c0 <LCD_Font>
 800471c:	e064      	b.n	80047e8 <HAL_UART_RxCpltCallback+0x254>
				}
			}
			else
			{
				BUZZER_ON;
 800471e:	2200      	movs	r2, #0
 8004720:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004724:	483e      	ldr	r0, [pc, #248]	@ (8004820 <HAL_UART_RxCpltCallback+0x28c>)
 8004726:	f002 fb57 	bl	8006dd8 <HAL_GPIO_WritePin>
				if(StDisplay == CTRL_SCREEN_2)
 800472a:	4b3e      	ldr	r3, [pc, #248]	@ (8004824 <HAL_UART_RxCpltCallback+0x290>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d15a      	bne.n	80047e8 <HAL_UART_RxCpltCallback+0x254>
				{
					LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_PINK);
 8004732:	4b3d      	ldr	r3, [pc, #244]	@ (8004828 <HAL_UART_RxCpltCallback+0x294>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	4b3c      	ldr	r3, [pc, #240]	@ (800482c <HAL_UART_RxCpltCallback+0x298>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	4413      	add	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	336e      	adds	r3, #110	@ 0x6e
 8004742:	b298      	uxth	r0, r3
 8004744:	4b3a      	ldr	r3, [pc, #232]	@ (8004830 <HAL_UART_RxCpltCallback+0x29c>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4b3a      	ldr	r3, [pc, #232]	@ (8004834 <HAL_UART_RxCpltCallback+0x2a0>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4413      	add	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	3332      	adds	r3, #50	@ 0x32
 8004754:	b299      	uxth	r1, r3
 8004756:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_UART_RxCpltCallback+0x298>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	3332      	adds	r3, #50	@ 0x32
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b35      	ldr	r3, [pc, #212]	@ (8004834 <HAL_UART_RxCpltCallback+0x2a0>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	331e      	adds	r3, #30
 8004764:	b29b      	uxth	r3, r3
 8004766:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 800476a:	9401      	str	r4, [sp, #4]
 800476c:	2405      	movs	r4, #5
 800476e:	9400      	str	r4, [sp, #0]
 8004770:	f7fd fa6b 	bl	8001c4a <LCD_Rect_Round_Fill>
					LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: BAT", _Open_Sans_Bold_26, 1, BLACK);
 8004774:	4b2c      	ldr	r3, [pc, #176]	@ (8004828 <HAL_UART_RxCpltCallback+0x294>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	4b2c      	ldr	r3, [pc, #176]	@ (800482c <HAL_UART_RxCpltCallback+0x298>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	4413      	add	r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	338c      	adds	r3, #140	@ 0x8c
 8004784:	b29e      	uxth	r6, r3
 8004786:	4b2a      	ldr	r3, [pc, #168]	@ (8004830 <HAL_UART_RxCpltCallback+0x29c>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fed1 	bl	8000534 <__aeabi_i2d>
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	4b27      	ldr	r3, [pc, #156]	@ (8004834 <HAL_UART_RxCpltCallback+0x2a0>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fb feca 	bl	8000534 <__aeabi_i2d>
 80047a0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80047a4:	4b24      	ldr	r3, [pc, #144]	@ (8004838 <HAL_UART_RxCpltCallback+0x2a4>)
 80047a6:	f7fb ff2f 	bl	8000608 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	f7fb fd71 	bl	800029c <__adddf3>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fb fd6b 	bl	800029c <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f7fc f9f3 	bl	8000bb8 <__aeabi_d2uiz>
 80047d2:	4603      	mov	r3, r0
 80047d4:	b299      	uxth	r1, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	2301      	movs	r3, #1
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4b17      	ldr	r3, [pc, #92]	@ (800483c <HAL_UART_RxCpltCallback+0x2a8>)
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_UART_RxCpltCallback+0x2b0>)
 80047e2:	4630      	mov	r0, r6
 80047e4:	f7fd f86c 	bl	80018c0 <LCD_Font>
			}
			//Buzzer_Old = Buzzer;
		}
    	/* Update new values */
		//Ctr_Dev_Old = Ctr_Dev;
		Flag_Uart = true;
 80047e8:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <HAL_UART_RxCpltCallback+0x2b4>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
    }
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40011000 	.word	0x40011000
 80047fc:	2000061c 	.word	0x2000061c
 8004800:	2000000d 	.word	0x2000000d
 8004804:	2000061d 	.word	0x2000061d
 8004808:	20000623 	.word	0x20000623
 800480c:	2000001a 	.word	0x2000001a
 8004810:	20000620 	.word	0x20000620
 8004814:	20000478 	.word	0x20000478
 8004818:	20000470 	.word	0x20000470
 800481c:	20000479 	.word	0x20000479
 8004820:	40020000 	.word	0x40020000
 8004824:	2000046d 	.word	0x2000046d
 8004828:	20000000 	.word	0x20000000
 800482c:	20000002 	.word	0x20000002
 8004830:	20000001 	.word	0x20000001
 8004834:	20000003 	.word	0x20000003
 8004838:	3ff33333 	.word	0x3ff33333
 800483c:	0800f344 	.word	0x0800f344
 8004840:	0800cdcc 	.word	0x0800cdcc
 8004844:	0800cdd8 	.word	0x0800cdd8
 8004848:	2000047f 	.word	0x2000047f

0800484c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800484c:	b5b0      	push	{r4, r5, r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004852:	f001 fb93 	bl	8005f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004856:	f000 fbd9 	bl	800500c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800485a:	f000 fdc5 	bl	80053e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800485e:	f000 fda3 	bl	80053a8 <MX_DMA_Init>
  MX_TIM2_Init();
 8004862:	f000 fcdd 	bl	8005220 <MX_TIM2_Init>
  MX_SPI2_Init();
 8004866:	f000 fc6f 	bl	8005148 <MX_SPI2_Init>
  MX_SPI1_Init();
 800486a:	f000 fc37 	bl	80050dc <MX_SPI1_Init>
  MX_SPI3_Init();
 800486e:	f000 fca1 	bl	80051b4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8004872:	f000 fd21 	bl	80052b8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004876:	f000 fd6d 	bl	8005354 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800487a:	2200      	movs	r2, #0
 800487c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004880:	4837      	ldr	r0, [pc, #220]	@ (8004960 <main+0x114>)
 8004882:	f002 faa9 	bl	8006dd8 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	201c      	movs	r0, #28
 800488c:	f001 fce7 	bl	800625e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004890:	201c      	movs	r0, #28
 8004892:	f001 fd00 	bl	8006296 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 8004896:	4833      	ldr	r0, [pc, #204]	@ (8004964 <main+0x118>)
 8004898:	f003 ffda 	bl	8008850 <HAL_TIM_Base_Start_IT>
  ILI9488_Init();
 800489c:	f7fc fb24 	bl	8000ee8 <ILI9488_Init>
  setRotation(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fc fcf9 	bl	8001298 <setRotation>
  sx1278_init(0x6c4000);
 80048a6:	4830      	ldr	r0, [pc, #192]	@ (8004968 <main+0x11c>)
 80048a8:	f001 f926 	bl	8005af8 <sx1278_init>
  HAL_TIM_Base_Start_IT(&htim3);
 80048ac:	482f      	ldr	r0, [pc, #188]	@ (800496c <main+0x120>)
 80048ae:	f003 ffcf 	bl	8008850 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &byte_rx, 1);
 80048b2:	2201      	movs	r2, #1
 80048b4:	492e      	ldr	r1, [pc, #184]	@ (8004970 <main+0x124>)
 80048b6:	482f      	ldr	r0, [pc, #188]	@ (8004974 <main+0x128>)
 80048b8:	f004 fc8f 	bl	80091da <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/* Update Ctrl_Dev variable is received from ESP */
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 80048bc:	492e      	ldr	r1, [pc, #184]	@ (8004978 <main+0x12c>)
 80048be:	482f      	ldr	r0, [pc, #188]	@ (800497c <main+0x130>)
 80048c0:	f7fd fa2a 	bl	8001d18 <Check_Uart_update>

		if((timer_cnt3 == true) && (Flag_Uart == false))
 80048c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004980 <main+0x134>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 815a 	beq.w	8004b84 <main+0x338>
 80048d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004984 <main+0x138>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f083 0301 	eor.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8151 	beq.w	8004b84 <main+0x338>
		{
			if ((readRegister(0x12) & 0x40) == 0x40)  // Check for data sent by nodes
 80048e2:	2012      	movs	r0, #18
 80048e4:	f001 f86e 	bl	80059c4 <readRegister>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	f040 80f4 	bne.w	8004adc <main+0x290>
			{
				writeRegister(0x12, readRegister(0x12) | 0x40); // Clear flag
 80048f4:	2012      	movs	r0, #18
 80048f6:	f001 f865 	bl	80059c4 <readRegister>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	2012      	movs	r0, #18
 8004906:	f001 f88b 	bl	8005a20 <writeRegister>
				writeRegister(0x0d, readRegister(0x10)); // Reset address pointer
 800490a:	2010      	movs	r0, #16
 800490c:	f001 f85a 	bl	80059c4 <readRegister>
 8004910:	4603      	mov	r3, r0
 8004912:	4619      	mov	r1, r3
 8004914:	200d      	movs	r0, #13
 8004916:	f001 f883 	bl	8005a20 <writeRegister>

				if (readRegister(0) == Node_IsCommunicating) // Check the first byte data
 800491a:	2000      	movs	r0, #0
 800491c:	f001 f852 	bl	80059c4 <readRegister>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <main+0x13c>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	f040 80d7 	bne.w	8004adc <main+0x290>
				{
					Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 800492e:	4912      	ldr	r1, [pc, #72]	@ (8004978 <main+0x12c>)
 8004930:	4812      	ldr	r0, [pc, #72]	@ (800497c <main+0x130>)
 8004932:	f7fd f9f1 	bl	8001d18 <Check_Uart_update>
					check_node[Node_IsCommunicating] = 1;
 8004936:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <main+0x13c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	4b13      	ldr	r3, [pc, #76]	@ (800498c <main+0x140>)
 800493e:	2101      	movs	r1, #1
 8004940:	5499      	strb	r1, [r3, r2]
					NodeStatus_arr[Node_IsCommunicating] = 1;
 8004942:	4b11      	ldr	r3, [pc, #68]	@ (8004988 <main+0x13c>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <main+0x144>)
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]
					request_error[Node_IsCommunicating] = 0;
 800494e:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <main+0x13c>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <main+0x148>)
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]

					/* Store data to buffer */
					for (unsigned char i = 0; i < 17; i++) {
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e030      	b.n	80049c2 <main+0x176>
 8004960:	40020000 	.word	0x40020000
 8004964:	2000037c 	.word	0x2000037c
 8004968:	006c4000 	.word	0x006c4000
 800496c:	200003c4 	.word	0x200003c4
 8004970:	2000061c 	.word	0x2000061c
 8004974:	2000040c 	.word	0x2000040c
 8004978:	20000580 	.word	0x20000580
 800497c:	20000574 	.word	0x20000574
 8004980:	2000047d 	.word	0x2000047d
 8004984:	2000047f 	.word	0x2000047f
 8004988:	2000054c 	.word	0x2000054c
 800498c:	2000055c 	.word	0x2000055c
 8004990:	2000058c 	.word	0x2000058c
 8004994:	20000550 	.word	0x20000550
						data_node[Node_IsCommunicating][i] = readRegister(0);
 8004998:	4ba6      	ldr	r3, [pc, #664]	@ (8004c34 <main+0x3e8>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461d      	mov	r5, r3
 800499e:	7bfc      	ldrb	r4, [r7, #15]
 80049a0:	2000      	movs	r0, #0
 80049a2:	f001 f80f 	bl	80059c4 <readRegister>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4619      	mov	r1, r3
 80049aa:	4aa3      	ldr	r2, [pc, #652]	@ (8004c38 <main+0x3ec>)
 80049ac:	462b      	mov	r3, r5
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	442b      	add	r3, r5
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	4423      	add	r3, r4
 80049b8:	460a      	mov	r2, r1
 80049ba:	701a      	strb	r2, [r3, #0]
					for (unsigned char i = 0; i < 17; i++) {
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3301      	adds	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d9e7      	bls.n	8004998 <main+0x14c>
					}

					/* Process data */
					uint16_t irms_byte = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	817b      	strh	r3, [r7, #10]
					irms_byte = (data_node[Node_IsCommunicating][0] - 48) * 1000
 80049cc:	4b99      	ldr	r3, [pc, #612]	@ (8004c34 <main+0x3e8>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	4619      	mov	r1, r3
 80049d2:	4a99      	ldr	r2, [pc, #612]	@ (8004c38 <main+0x3ec>)
 80049d4:	460b      	mov	r3, r1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	3b30      	subs	r3, #48	@ 0x30
							+ (data_node[Node_IsCommunicating][1] - 48) * 100
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	0152      	lsls	r2, r2, #5
 80049e8:	1ad2      	subs	r2, r2, r3
 80049ea:	0092      	lsls	r2, r2, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	4b90      	ldr	r3, [pc, #576]	@ (8004c34 <main+0x3e8>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	498f      	ldr	r1, [pc, #572]	@ (8004c38 <main+0x3ec>)
 80049fa:	4603      	mov	r3, r0
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4403      	add	r3, r0
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3301      	adds	r3, #1
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	3b30      	subs	r3, #48	@ 0x30
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	0089      	lsls	r1, r1, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	4619      	mov	r1, r3
 8004a14:	0088      	lsls	r0, r1, #2
 8004a16:	4619      	mov	r1, r3
 8004a18:	4603      	mov	r3, r0
 8004a1a:	440b      	add	r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	b29a      	uxth	r2, r3
							+ (data_node[Node_IsCommunicating][2] - 48) * 10
 8004a24:	4b83      	ldr	r3, [pc, #524]	@ (8004c34 <main+0x3e8>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	4983      	ldr	r1, [pc, #524]	@ (8004c38 <main+0x3ec>)
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4403      	add	r3, r0
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3302      	adds	r3, #2
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	3b30      	subs	r3, #48	@ 0x30
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4619      	mov	r1, r3
 8004a40:	0089      	lsls	r1, r1, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	b29a      	uxth	r2, r3
							+ (data_node[Node_IsCommunicating][3] - 48);
 8004a4c:	4b79      	ldr	r3, [pc, #484]	@ (8004c34 <main+0x3e8>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	4979      	ldr	r1, [pc, #484]	@ (8004c38 <main+0x3ec>)
 8004a54:	4603      	mov	r3, r0
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4403      	add	r3, r0
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3303      	adds	r3, #3
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	b29b      	uxth	r3, r3
					irms_byte = (data_node[Node_IsCommunicating][0] - 48) * 1000
 8004a66:	3b30      	subs	r3, #48	@ 0x30
 8004a68:	817b      	strh	r3, [r7, #10]
					irms1_arr[Node_IsCommunicating] = (float) irms_byte / 100.0;
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a74:	4b6f      	ldr	r3, [pc, #444]	@ (8004c34 <main+0x3e8>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004c3c <main+0x3f0>
 8004a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a80:	4a6f      	ldr	r2, [pc, #444]	@ (8004c40 <main+0x3f4>)
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	edc3 7a00 	vstr	s15, [r3]
					if (irms1_arr[Node_IsCommunicating] >= 50)
 8004a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c34 <main+0x3e8>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c40 <main+0x3f4>)
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	edd3 7a00 	vldr	s15, [r3]
 8004a98:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8004c44 <main+0x3f8>
 8004a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	db06      	blt.n	8004ab4 <main+0x268>
					{
						irms1_arr[Node_IsCommunicating] = 50;
 8004aa6:	4b63      	ldr	r3, [pc, #396]	@ (8004c34 <main+0x3e8>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	4a65      	ldr	r2, [pc, #404]	@ (8004c40 <main+0x3f4>)
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a65      	ldr	r2, [pc, #404]	@ (8004c48 <main+0x3fc>)
 8004ab2:	601a      	str	r2, [r3, #0]
					}
					/* Store data node status */
					RelayStatus_arr_Node[Node_IsCommunicating] = data_node[Node_IsCommunicating][16];
 8004ab4:	4b5f      	ldr	r3, [pc, #380]	@ (8004c34 <main+0x3e8>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4b5e      	ldr	r3, [pc, #376]	@ (8004c34 <main+0x3e8>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c38 <main+0x3ec>)
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	3310      	adds	r3, #16
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8004c4c <main+0x400>)
 8004ad2:	541a      	strb	r2, [r3, r0]
					Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004ad4:	495d      	ldr	r1, [pc, #372]	@ (8004c4c <main+0x400>)
 8004ad6:	485e      	ldr	r0, [pc, #376]	@ (8004c50 <main+0x404>)
 8004ad8:	f7fd f91e 	bl	8001d18 <Check_Uart_update>
				}
			}

			/* Check error in case of nodes error or off */
			if (check_node[Node_IsCommunicating] == 0)
 8004adc:	4b55      	ldr	r3, [pc, #340]	@ (8004c34 <main+0x3e8>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c54 <main+0x408>)
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d128      	bne.n	8004b3c <main+0x2f0>
			{
				request_error[Node_IsCommunicating]++;
 8004aea:	4b52      	ldr	r3, [pc, #328]	@ (8004c34 <main+0x3e8>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	4a5a      	ldr	r2, [pc, #360]	@ (8004c58 <main+0x40c>)
 8004af0:	5cd2      	ldrb	r2, [r2, r3]
 8004af2:	3201      	adds	r2, #1
 8004af4:	b2d1      	uxtb	r1, r2
 8004af6:	4a58      	ldr	r2, [pc, #352]	@ (8004c58 <main+0x40c>)
 8004af8:	54d1      	strb	r1, [r2, r3]
				if (request_error[Node_IsCommunicating] >= ER_LIMIT_VLUE)
 8004afa:	4b4e      	ldr	r3, [pc, #312]	@ (8004c34 <main+0x3e8>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b55      	ldr	r3, [pc, #340]	@ (8004c58 <main+0x40c>)
 8004b02:	5c9b      	ldrb	r3, [r3, r2]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d919      	bls.n	8004b3c <main+0x2f0>
				{
					request_error[Node_IsCommunicating] = ER_LIMIT_VLUE;
 8004b08:	4b4a      	ldr	r3, [pc, #296]	@ (8004c34 <main+0x3e8>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b52      	ldr	r3, [pc, #328]	@ (8004c58 <main+0x40c>)
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]
					NodeStatus_arr[Node_IsCommunicating] = 0;
 8004b14:	4b47      	ldr	r3, [pc, #284]	@ (8004c34 <main+0x3e8>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b50      	ldr	r3, [pc, #320]	@ (8004c5c <main+0x410>)
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]
					irms1_arr[Node_IsCommunicating] = 0;
 8004b20:	4b44      	ldr	r3, [pc, #272]	@ (8004c34 <main+0x3e8>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	4a46      	ldr	r2, [pc, #280]	@ (8004c40 <main+0x3f4>)
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
					RelayStatus_arr_Node[Node_IsCommunicating] = 0;
 8004b30:	4b40      	ldr	r3, [pc, #256]	@ (8004c34 <main+0x3e8>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b45      	ldr	r3, [pc, #276]	@ (8004c4c <main+0x400>)
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]
				}
			}

			Node_IsCommunicating++;
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <main+0x3e8>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	4b3b      	ldr	r3, [pc, #236]	@ (8004c34 <main+0x3e8>)
 8004b46:	701a      	strb	r2, [r3, #0]
			if (Node_IsCommunicating >= 10)
 8004b48:	4b3a      	ldr	r3, [pc, #232]	@ (8004c34 <main+0x3e8>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b09      	cmp	r3, #9
 8004b4e:	d902      	bls.n	8004b56 <main+0x30a>
			{
				Node_IsCommunicating = 0;
 8004b50:	4b38      	ldr	r3, [pc, #224]	@ (8004c34 <main+0x3e8>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
			}
			Send_Request_Lora(Node_IsCommunicating);
 8004b56:	4b37      	ldr	r3, [pc, #220]	@ (8004c34 <main+0x3e8>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fc0c 	bl	8004378 <Send_Request_Lora>
			check_node[Node_IsCommunicating] = 0;
 8004b60:	4b34      	ldr	r3, [pc, #208]	@ (8004c34 <main+0x3e8>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <main+0x408>)
 8004b68:	2100      	movs	r1, #0
 8004b6a:	5499      	strb	r1, [r3, r2]
			Display_Updated_Flag = true;
 8004b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c60 <main+0x414>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
			timer_counter++;
 8004b72:	4b3c      	ldr	r3, [pc, #240]	@ (8004c64 <main+0x418>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <main+0x418>)
 8004b7c:	701a      	strb	r2, [r3, #0]
			timer_cnt3 = false;
 8004b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c68 <main+0x41c>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
		}

		/*------------ Processing when the button pressed -----------*/
		Touch_XY();
 8004b84:	f7fe fa3c 	bl	8003000 <Touch_XY>
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004b88:	4930      	ldr	r1, [pc, #192]	@ (8004c4c <main+0x400>)
 8004b8a:	4831      	ldr	r0, [pc, #196]	@ (8004c50 <main+0x404>)
 8004b8c:	f7fd f8c4 	bl	8001d18 <Check_Uart_update>
		if(StDisplay == DISPLAY_SCREEN)
 8004b90:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <main+0x420>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <main+0x360>
		{
			if(Display_Updated_Flag == true)
 8004b98:	4b31      	ldr	r3, [pc, #196]	@ (8004c60 <main+0x414>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <main+0x360>
			{
				Update_Current_Val(&index_data_changed[0]);
 8004ba0:	4833      	ldr	r0, [pc, #204]	@ (8004c70 <main+0x424>)
 8004ba2:	f7ff fa8f 	bl	80040c4 <Update_Current_Val>
				Display_Updated_Flag = false;
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c60 <main+0x414>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
			}
		}
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004bac:	4927      	ldr	r1, [pc, #156]	@ (8004c4c <main+0x400>)
 8004bae:	4828      	ldr	r0, [pc, #160]	@ (8004c50 <main+0x404>)
 8004bb0:	f7fd f8b2 	bl	8001d18 <Check_Uart_update>
		if(StDisplay == CTRL_SCREEN_1 && Display_Updated_Flag == true)
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <main+0x420>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d11c      	bne.n	8004bf6 <main+0x3aa>
 8004bbc:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <main+0x414>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d018      	beq.n	8004bf6 <main+0x3aa>
		{
			if(Cnt_Flag_Screen1 == false)
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c74 <main+0x428>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f083 0301 	eor.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <main+0x396>
			{
				Update_StatusBt(&RelayStatus_arr_Node[0], &RelayStatus_arr_ESP[0]);
 8004bd2:	491f      	ldr	r1, [pc, #124]	@ (8004c50 <main+0x404>)
 8004bd4:	481d      	ldr	r0, [pc, #116]	@ (8004c4c <main+0x400>)
 8004bd6:	f7fe fef3 	bl	80039c0 <Update_StatusBt>
				Display_Updated_Flag = false;
 8004bda:	4b21      	ldr	r3, [pc, #132]	@ (8004c60 <main+0x414>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	e009      	b.n	8004bf6 <main+0x3aa>
			}
			else
			{
				Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004be2:	491a      	ldr	r1, [pc, #104]	@ (8004c4c <main+0x400>)
 8004be4:	481a      	ldr	r0, [pc, #104]	@ (8004c50 <main+0x404>)
 8004be6:	f7fe feeb 	bl	80039c0 <Update_StatusBt>
				Display_Updated_Flag = false;
 8004bea:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <main+0x414>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
				Cnt_Flag_Screen1 = false;
 8004bf0:	4b20      	ldr	r3, [pc, #128]	@ (8004c74 <main+0x428>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
			}
		}
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004bf6:	4915      	ldr	r1, [pc, #84]	@ (8004c4c <main+0x400>)
 8004bf8:	4815      	ldr	r0, [pc, #84]	@ (8004c50 <main+0x404>)
 8004bfa:	f7fd f88d 	bl	8001d18 <Check_Uart_update>
		/* Update data after the center circuit has received 10 data frames from the nodes */
		if(timer_counter >= 11)
 8004bfe:	4b19      	ldr	r3, [pc, #100]	@ (8004c64 <main+0x418>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b0a      	cmp	r3, #10
 8004c04:	f67f ae5a 	bls.w	80048bc <main+0x70>
		{
			uint8_t idx_bf;
			uint8_t idx_relay;
			uint8_t Ctr_Dev_Temp[2]={0, 0};
 8004c08:	2300      	movs	r3, #0
 8004c0a:	813b      	strh	r3, [r7, #8]
			uint8_t StNode_Temp[2]={0, 0};
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	80bb      	strh	r3, [r7, #4]

			if(Flag == false)               /* Send only one the first time */
 8004c10:	4b19      	ldr	r3, [pc, #100]	@ (8004c78 <main+0x42c>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f083 0301 	eor.w	r3, r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80dd 	beq.w	8004dda <main+0x58e>
			{
				if(StDisplay == DISPLAY_SCREEN)
 8004c20:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <main+0x420>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <main+0x3e0>
				{
					Default_Display();
 8004c28:	f7fd f962 	bl	8001ef0 <Default_Display>
				}
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	737b      	strb	r3, [r7, #13]
 8004c30:	e069      	b.n	8004d06 <main+0x4ba>
 8004c32:	bf00      	nop
 8004c34:	2000054c 	.word	0x2000054c
 8004c38:	20000484 	.word	0x20000484
 8004c3c:	42c80000 	.word	0x42c80000
 8004c40:	200005a4 	.word	0x200005a4
 8004c44:	42480000 	.word	0x42480000
 8004c48:	42480000 	.word	0x42480000
 8004c4c:	20000580 	.word	0x20000580
 8004c50:	20000574 	.word	0x20000574
 8004c54:	2000055c 	.word	0x2000055c
 8004c58:	20000550 	.word	0x20000550
 8004c5c:	2000058c 	.word	0x2000058c
 8004c60:	2000046e 	.word	0x2000046e
 8004c64:	2000047c 	.word	0x2000047c
 8004c68:	2000047d 	.word	0x2000047d
 8004c6c:	2000046d 	.word	0x2000046d
 8004c70:	20000624 	.word	0x20000624
 8004c74:	2000046c 	.word	0x2000046c
 8004c78:	2000047e 	.word	0x2000047e
				{
					if(RelayStatus_arr_Node[idx_relay] == 0)
 8004c7c:	7b7b      	ldrb	r3, [r7, #13]
 8004c7e:	4a73      	ldr	r2, [pc, #460]	@ (8004e4c <main+0x600>)
 8004c80:	5cd3      	ldrb	r3, [r2, r3]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <main+0x456>
					{
						CLEAR_BIT_USER(Ctr_Dev, idx_relay);
 8004c86:	7b7b      	ldrb	r3, [r7, #13]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	4b6e      	ldr	r3, [pc, #440]	@ (8004e50 <main+0x604>)
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e50 <main+0x604>)
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	e00a      	b.n	8004cb8 <main+0x46c>
					}
					else
					{
						SET_BIT_USER(Ctr_Dev, idx_relay);
 8004ca2:	7b7b      	ldrb	r3, [r7, #13]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	4b68      	ldr	r3, [pc, #416]	@ (8004e50 <main+0x604>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	4b66      	ldr	r3, [pc, #408]	@ (8004e50 <main+0x604>)
 8004cb6:	801a      	strh	r2, [r3, #0]
					}

					if(NodeStatus_arr[idx_relay] == 0)
 8004cb8:	7b7b      	ldrb	r3, [r7, #13]
 8004cba:	4a66      	ldr	r2, [pc, #408]	@ (8004e54 <main+0x608>)
 8004cbc:	5cd3      	ldrb	r3, [r2, r3]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <main+0x492>
					{
						CLEAR_BIT_USER(StNode, idx_relay);
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	4b61      	ldr	r3, [pc, #388]	@ (8004e58 <main+0x60c>)
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e58 <main+0x60c>)
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	e00a      	b.n	8004cf4 <main+0x4a8>
					}
					else
					{
						SET_BIT_USER(StNode, idx_relay);
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e58 <main+0x60c>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	4b59      	ldr	r3, [pc, #356]	@ (8004e58 <main+0x60c>)
 8004cf2:	801a      	strh	r2, [r3, #0]
					}
					NodeStatus_arr_Old[idx_relay] = NodeStatus_arr[idx_relay];
 8004cf4:	7b7a      	ldrb	r2, [r7, #13]
 8004cf6:	7b7b      	ldrb	r3, [r7, #13]
 8004cf8:	4956      	ldr	r1, [pc, #344]	@ (8004e54 <main+0x608>)
 8004cfa:	5c89      	ldrb	r1, [r1, r2]
 8004cfc:	4a57      	ldr	r2, [pc, #348]	@ (8004e5c <main+0x610>)
 8004cfe:	54d1      	strb	r1, [r2, r3]
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004d00:	7b7b      	ldrb	r3, [r7, #13]
 8004d02:	3301      	adds	r3, #1
 8004d04:	737b      	strb	r3, [r7, #13]
 8004d06:	7b7b      	ldrb	r3, [r7, #13]
 8004d08:	2b09      	cmp	r3, #9
 8004d0a:	d9b7      	bls.n	8004c7c <main+0x430>
				}

				Send_Uart1(&start_byte_warning[0], &Buzzer, &stop_byte, 2, 1);
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2302      	movs	r3, #2
 8004d12:	4a53      	ldr	r2, [pc, #332]	@ (8004e60 <main+0x614>)
 8004d14:	4953      	ldr	r1, [pc, #332]	@ (8004e64 <main+0x618>)
 8004d16:	4854      	ldr	r0, [pc, #336]	@ (8004e68 <main+0x61c>)
 8004d18:	f7ff fc18 	bl	800454c <Send_Uart1>
				Buzzer_Old = Buzzer;
 8004d1c:	4b51      	ldr	r3, [pc, #324]	@ (8004e64 <main+0x618>)
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	4b52      	ldr	r3, [pc, #328]	@ (8004e6c <main+0x620>)
 8004d22:	701a      	strb	r2, [r3, #0]
				/* Send Ctrl_Dev variable */
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8004d24:	4b4a      	ldr	r3, [pc, #296]	@ (8004e50 <main+0x604>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8004d30:	4b47      	ldr	r3, [pc, #284]	@ (8004e50 <main+0x604>)
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	727b      	strb	r3, [r7, #9]
				Ctr_Dev_Old = Ctr_Dev;
 8004d38:	4b45      	ldr	r3, [pc, #276]	@ (8004e50 <main+0x604>)
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004e70 <main+0x624>)
 8004d3e:	801a      	strh	r2, [r3, #0]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8004d40:	f107 0108 	add.w	r1, r7, #8
 8004d44:	2302      	movs	r3, #2
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2302      	movs	r3, #2
 8004d4a:	4a45      	ldr	r2, [pc, #276]	@ (8004e60 <main+0x614>)
 8004d4c:	4849      	ldr	r0, [pc, #292]	@ (8004e74 <main+0x628>)
 8004d4e:	f7ff fbfd 	bl	800454c <Send_Uart1>
				/* Send node status variable*/
				StNode_Temp[0] = (StNode >> 8) & 0xFF;
 8004d52:	4b41      	ldr	r3, [pc, #260]	@ (8004e58 <main+0x60c>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	713b      	strb	r3, [r7, #4]
				StNode_Temp[1] = StNode & 0xFF;
 8004d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e58 <main+0x60c>)
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	717b      	strb	r3, [r7, #5]
				StNode_Old = StNode;
 8004d66:	4b3c      	ldr	r3, [pc, #240]	@ (8004e58 <main+0x60c>)
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	4b43      	ldr	r3, [pc, #268]	@ (8004e78 <main+0x62c>)
 8004d6c:	801a      	strh	r2, [r3, #0]
				Send_Uart1(&start_byte_status[0], &StNode_Temp[0], &stop_byte, 2, 2);
 8004d6e:	1d39      	adds	r1, r7, #4
 8004d70:	2302      	movs	r3, #2
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2302      	movs	r3, #2
 8004d76:	4a3a      	ldr	r2, [pc, #232]	@ (8004e60 <main+0x614>)
 8004d78:	4840      	ldr	r0, [pc, #256]	@ (8004e7c <main+0x630>)
 8004d7a:	f7ff fbe7 	bl	800454c <Send_Uart1>

				/* Send irsm data */
				for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73bb      	strb	r3, [r7, #14]
 8004d82:	e01b      	b.n	8004dbc <main+0x570>
				{
					irms1_old[idx_bf] = irms1_arr[idx_bf];    // Copy data to compare with
 8004d84:	7bba      	ldrb	r2, [r7, #14]
 8004d86:	7bbb      	ldrb	r3, [r7, #14]
 8004d88:	493d      	ldr	r1, [pc, #244]	@ (8004e80 <main+0x634>)
 8004d8a:	0092      	lsls	r2, r2, #2
 8004d8c:	440a      	add	r2, r1
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	493c      	ldr	r1, [pc, #240]	@ (8004e84 <main+0x638>)
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	601a      	str	r2, [r3, #0]
					ConvertFloatAsBytes(irms1_arr[idx_bf], &Tx_Buf[idx_bf * 4]); // Pack 4 bytes per float
 8004d98:	7bbb      	ldrb	r3, [r7, #14]
 8004d9a:	4a39      	ldr	r2, [pc, #228]	@ (8004e80 <main+0x634>)
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	edd3 7a00 	vldr	s15, [r3]
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4a37      	ldr	r2, [pc, #220]	@ (8004e88 <main+0x63c>)
 8004daa:	4413      	add	r3, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	eeb0 0a67 	vmov.f32	s0, s15
 8004db2:	f7ff fbbc 	bl	800452e <ConvertFloatAsBytes>
				for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004db6:	7bbb      	ldrb	r3, [r7, #14]
 8004db8:	3301      	adds	r3, #1
 8004dba:	73bb      	strb	r3, [r7, #14]
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	d9e0      	bls.n	8004d84 <main+0x538>
				}
				Send_Uart1(&start_byte_data, &Tx_Buf[0], &stop_byte, 1, SIZEOF_DATABUFFER);
 8004dc2:	2328      	movs	r3, #40	@ 0x28
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4a25      	ldr	r2, [pc, #148]	@ (8004e60 <main+0x614>)
 8004dca:	492f      	ldr	r1, [pc, #188]	@ (8004e88 <main+0x63c>)
 8004dcc:	482f      	ldr	r0, [pc, #188]	@ (8004e8c <main+0x640>)
 8004dce:	f7ff fbbd 	bl	800454c <Send_Uart1>
				Flag = true;
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e90 <main+0x644>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e0ed      	b.n	8004fb6 <main+0x76a>
			}
			else          /* Send only one the continue time */
			{
				Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004dda:	491c      	ldr	r1, [pc, #112]	@ (8004e4c <main+0x600>)
 8004ddc:	482d      	ldr	r0, [pc, #180]	@ (8004e94 <main+0x648>)
 8004dde:	f7fc ff9b 	bl	8001d18 <Check_Uart_update>
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	737b      	strb	r3, [r7, #13]
 8004de6:	e06b      	b.n	8004ec0 <main+0x674>
				{
					if(RelayStatus_arr_Node[idx_relay] == 0)
 8004de8:	7b7b      	ldrb	r3, [r7, #13]
 8004dea:	4a18      	ldr	r2, [pc, #96]	@ (8004e4c <main+0x600>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <main+0x5c2>
					{
						CLEAR_BIT_USER(Ctr_Dev, idx_relay);
 8004df2:	7b7b      	ldrb	r3, [r7, #13]
 8004df4:	2201      	movs	r2, #1
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <main+0x604>)
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	4013      	ands	r3, r2
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <main+0x604>)
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	e00a      	b.n	8004e24 <main+0x5d8>
					}
					else
					{
						SET_BIT_USER(Ctr_Dev, idx_relay);
 8004e0e:	7b7b      	ldrb	r3, [r7, #13]
 8004e10:	2201      	movs	r2, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <main+0x604>)
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <main+0x604>)
 8004e22:	801a      	strh	r2, [r3, #0]
					}

					if(NodeStatus_arr[idx_relay] == 0)
 8004e24:	7b7b      	ldrb	r3, [r7, #13]
 8004e26:	4a0b      	ldr	r2, [pc, #44]	@ (8004e54 <main+0x608>)
 8004e28:	5cd3      	ldrb	r3, [r2, r3]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d134      	bne.n	8004e98 <main+0x64c>
					{
						CLEAR_BIT_USER(StNode, idx_relay);
 8004e2e:	7b7b      	ldrb	r3, [r7, #13]
 8004e30:	2201      	movs	r2, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <main+0x60c>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	4013      	ands	r3, r2
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <main+0x60c>)
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e031      	b.n	8004eae <main+0x662>
 8004e4a:	bf00      	nop
 8004e4c:	20000580 	.word	0x20000580
 8004e50:	20000470 	.word	0x20000470
 8004e54:	2000058c 	.word	0x2000058c
 8004e58:	20000474 	.word	0x20000474
 8004e5c:	20000598 	.word	0x20000598
 8004e60:	2000001a 	.word	0x2000001a
 8004e64:	20000478 	.word	0x20000478
 8004e68:	20000014 	.word	0x20000014
 8004e6c:	20000479 	.word	0x20000479
 8004e70:	20000472 	.word	0x20000472
 8004e74:	20000010 	.word	0x20000010
 8004e78:	20000476 	.word	0x20000476
 8004e7c:	20000018 	.word	0x20000018
 8004e80:	200005a4 	.word	0x200005a4
 8004e84:	200005cc 	.word	0x200005cc
 8004e88:	200005f4 	.word	0x200005f4
 8004e8c:	2000000d 	.word	0x2000000d
 8004e90:	2000047e 	.word	0x2000047e
 8004e94:	20000574 	.word	0x20000574
					}
					else
					{
						SET_BIT_USER(StNode, idx_relay);
 8004e98:	7b7b      	ldrb	r3, [r7, #13]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	4b47      	ldr	r3, [pc, #284]	@ (8004fc0 <main+0x774>)
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	4b45      	ldr	r3, [pc, #276]	@ (8004fc0 <main+0x774>)
 8004eac:	801a      	strh	r2, [r3, #0]
					}
					NodeStatus_arr_Old[idx_relay] = NodeStatus_arr[idx_relay];
 8004eae:	7b7a      	ldrb	r2, [r7, #13]
 8004eb0:	7b7b      	ldrb	r3, [r7, #13]
 8004eb2:	4944      	ldr	r1, [pc, #272]	@ (8004fc4 <main+0x778>)
 8004eb4:	5c89      	ldrb	r1, [r1, r2]
 8004eb6:	4a44      	ldr	r2, [pc, #272]	@ (8004fc8 <main+0x77c>)
 8004eb8:	54d1      	strb	r1, [r2, r3]
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004eba:	7b7b      	ldrb	r3, [r7, #13]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	737b      	strb	r3, [r7, #13]
 8004ec0:	7b7b      	ldrb	r3, [r7, #13]
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	d990      	bls.n	8004de8 <main+0x59c>
				}
				// Check if the new value with the old value is different - send to Esp
				if(Buzzer_Old != Buzzer)
 8004ec6:	4b41      	ldr	r3, [pc, #260]	@ (8004fcc <main+0x780>)
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <main+0x784>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d00b      	beq.n	8004eea <main+0x69e>
				{
					Send_Uart1(&start_byte_warning[0], &Buzzer, &stop_byte, 2, 1);
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd4 <main+0x788>)
 8004eda:	493d      	ldr	r1, [pc, #244]	@ (8004fd0 <main+0x784>)
 8004edc:	483e      	ldr	r0, [pc, #248]	@ (8004fd8 <main+0x78c>)
 8004ede:	f7ff fb35 	bl	800454c <Send_Uart1>
					Buzzer_Old = Buzzer;
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd0 <main+0x784>)
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	4b39      	ldr	r3, [pc, #228]	@ (8004fcc <main+0x780>)
 8004ee8:	701a      	strb	r2, [r3, #0]
				}
				// Check if the new value with the old value is different - send to Esp
				if(StNode_Old != StNode)
 8004eea:	4b3c      	ldr	r3, [pc, #240]	@ (8004fdc <main+0x790>)
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	4b34      	ldr	r3, [pc, #208]	@ (8004fc0 <main+0x774>)
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d015      	beq.n	8004f22 <main+0x6d6>
				{
					StNode_Old = StNode;
 8004ef6:	4b32      	ldr	r3, [pc, #200]	@ (8004fc0 <main+0x774>)
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	4b38      	ldr	r3, [pc, #224]	@ (8004fdc <main+0x790>)
 8004efc:	801a      	strh	r2, [r3, #0]
					StNode_Temp[0] = (StNode_Old >> 8) & 0xFF;
 8004efe:	4b37      	ldr	r3, [pc, #220]	@ (8004fdc <main+0x790>)
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	713b      	strb	r3, [r7, #4]
					StNode_Temp[1] = StNode_Old & 0xFF;
 8004f0a:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <main+0x790>)
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	717b      	strb	r3, [r7, #5]
					Send_Uart1(&start_byte_status[0], &StNode_Temp[0], &stop_byte, 2, 2);
 8004f12:	1d39      	adds	r1, r7, #4
 8004f14:	2302      	movs	r3, #2
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2302      	movs	r3, #2
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd4 <main+0x788>)
 8004f1c:	4830      	ldr	r0, [pc, #192]	@ (8004fe0 <main+0x794>)
 8004f1e:	f7ff fb15 	bl	800454c <Send_Uart1>
				}
				// Check if the new value with the old value is different - send to Esp
				if(Ctr_Dev_Old != Ctr_Dev)
 8004f22:	4b30      	ldr	r3, [pc, #192]	@ (8004fe4 <main+0x798>)
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	4b30      	ldr	r3, [pc, #192]	@ (8004fe8 <main+0x79c>)
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d016      	beq.n	8004f5c <main+0x710>
				{
					Ctr_Dev_Old = Ctr_Dev;
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe8 <main+0x79c>)
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe4 <main+0x798>)
 8004f34:	801a      	strh	r2, [r3, #0]
					Ctr_Dev_Temp[0] = (Ctr_Dev_Old >> 8) & 0xFF;
 8004f36:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <main+0x798>)
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	723b      	strb	r3, [r7, #8]
					Ctr_Dev_Temp[1] = Ctr_Dev_Old & 0xFF;
 8004f42:	4b28      	ldr	r3, [pc, #160]	@ (8004fe4 <main+0x798>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	727b      	strb	r3, [r7, #9]
					Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8004f4a:	f107 0108 	add.w	r1, r7, #8
 8004f4e:	2302      	movs	r3, #2
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2302      	movs	r3, #2
 8004f54:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <main+0x788>)
 8004f56:	4825      	ldr	r0, [pc, #148]	@ (8004fec <main+0x7a0>)
 8004f58:	f7ff faf8 	bl	800454c <Send_Uart1>
				}
				// Check if the new value with the old value is different - send to Esp
				stDataChanged = isIrmsChanged(irms1_old, irms1_arr, &index_data_changed[0]);
 8004f5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ff0 <main+0x7a4>)
 8004f5e:	4925      	ldr	r1, [pc, #148]	@ (8004ff4 <main+0x7a8>)
 8004f60:	4825      	ldr	r0, [pc, #148]	@ (8004ff8 <main+0x7ac>)
 8004f62:	f7fc ff5d 	bl	8001e20 <isIrmsChanged>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b24      	ldr	r3, [pc, #144]	@ (8004ffc <main+0x7b0>)
 8004f6c:	701a      	strb	r2, [r3, #0]
				if(stDataChanged == true)
 8004f6e:	4b23      	ldr	r3, [pc, #140]	@ (8004ffc <main+0x7b0>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01f      	beq.n	8004fb6 <main+0x76a>
				{
					for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	73bb      	strb	r3, [r7, #14]
 8004f7a:	e011      	b.n	8004fa0 <main+0x754>
					{
						ConvertFloatAsBytes(irms1_old[idx_bf], &Tx_Buf[idx_bf * 4]); // Pack 4 bytes per float
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff8 <main+0x7ac>)
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	edd3 7a00 	vldr	s15, [r3]
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005000 <main+0x7b4>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	eeb0 0a67 	vmov.f32	s0, s15
 8004f96:	f7ff faca 	bl	800452e <ConvertFloatAsBytes>
					for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	73bb      	strb	r3, [r7, #14]
 8004fa0:	7bbb      	ldrb	r3, [r7, #14]
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	d9ea      	bls.n	8004f7c <main+0x730>
					}
					Send_Uart1(&start_byte_data, &Tx_Buf[0], &stop_byte, 1, SIZEOF_DATABUFFER);
 8004fa6:	2328      	movs	r3, #40	@ 0x28
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	2301      	movs	r3, #1
 8004fac:	4a09      	ldr	r2, [pc, #36]	@ (8004fd4 <main+0x788>)
 8004fae:	4914      	ldr	r1, [pc, #80]	@ (8005000 <main+0x7b4>)
 8004fb0:	4814      	ldr	r0, [pc, #80]	@ (8005004 <main+0x7b8>)
 8004fb2:	f7ff facb 	bl	800454c <Send_Uart1>
				}
			}
			timer_counter = 0;
 8004fb6:	4b14      	ldr	r3, [pc, #80]	@ (8005008 <main+0x7bc>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_Node[0]);
 8004fbc:	e47e      	b.n	80048bc <main+0x70>
 8004fbe:	bf00      	nop
 8004fc0:	20000474 	.word	0x20000474
 8004fc4:	2000058c 	.word	0x2000058c
 8004fc8:	20000598 	.word	0x20000598
 8004fcc:	20000479 	.word	0x20000479
 8004fd0:	20000478 	.word	0x20000478
 8004fd4:	2000001a 	.word	0x2000001a
 8004fd8:	20000014 	.word	0x20000014
 8004fdc:	20000476 	.word	0x20000476
 8004fe0:	20000018 	.word	0x20000018
 8004fe4:	20000472 	.word	0x20000472
 8004fe8:	20000470 	.word	0x20000470
 8004fec:	20000010 	.word	0x20000010
 8004ff0:	20000624 	.word	0x20000624
 8004ff4:	200005a4 	.word	0x200005a4
 8004ff8:	200005cc 	.word	0x200005cc
 8004ffc:	2000062e 	.word	0x2000062e
 8005000:	200005f4 	.word	0x200005f4
 8005004:	2000000d 	.word	0x2000000d
 8005008:	2000047c 	.word	0x2000047c

0800500c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b094      	sub	sp, #80	@ 0x50
 8005010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005012:	f107 0320 	add.w	r3, r7, #32
 8005016:	2230      	movs	r2, #48	@ 0x30
 8005018:	2100      	movs	r1, #0
 800501a:	4618      	mov	r0, r3
 800501c:	f005 fdd5 	bl	800abca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005030:	2300      	movs	r3, #0
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <SystemClock_Config+0xc8>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	4a26      	ldr	r2, [pc, #152]	@ (80050d4 <SystemClock_Config+0xc8>)
 800503a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800503e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005040:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <SystemClock_Config+0xc8>)
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800504c:	2300      	movs	r3, #0
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <SystemClock_Config+0xcc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a20      	ldr	r2, [pc, #128]	@ (80050d8 <SystemClock_Config+0xcc>)
 8005056:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <SystemClock_Config+0xcc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005068:	2301      	movs	r3, #1
 800506a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800506c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005072:	2302      	movs	r3, #2
 8005074:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005076:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800507c:	2304      	movs	r3, #4
 800507e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005080:	2364      	movs	r3, #100	@ 0x64
 8005082:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005084:	2302      	movs	r3, #2
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005088:	2304      	movs	r3, #4
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800508c:	f107 0320 	add.w	r3, r7, #32
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fed3 	bl	8006e3c <HAL_RCC_OscConfig>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800509c:	f000 fa5a 	bl	8005554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050a0:	230f      	movs	r3, #15
 80050a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050a4:	2302      	movs	r3, #2
 80050a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80050b6:	f107 030c 	add.w	r3, r7, #12
 80050ba:	2103      	movs	r1, #3
 80050bc:	4618      	mov	r0, r3
 80050be:	f002 f935 	bl	800732c <HAL_RCC_ClockConfig>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80050c8:	f000 fa44 	bl	8005554 <Error_Handler>
  }
}
 80050cc:	bf00      	nop
 80050ce:	3750      	adds	r7, #80	@ 0x50
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000

080050dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80050e0:	4b17      	ldr	r3, [pc, #92]	@ (8005140 <MX_SPI1_Init+0x64>)
 80050e2:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <MX_SPI1_Init+0x68>)
 80050e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050e6:	4b16      	ldr	r3, [pc, #88]	@ (8005140 <MX_SPI1_Init+0x64>)
 80050e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80050ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050ee:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <MX_SPI1_Init+0x64>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050f4:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <MX_SPI1_Init+0x64>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050fa:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <MX_SPI1_Init+0x64>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005100:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <MX_SPI1_Init+0x64>)
 8005102:	2200      	movs	r2, #0
 8005104:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005106:	4b0e      	ldr	r3, [pc, #56]	@ (8005140 <MX_SPI1_Init+0x64>)
 8005108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800510c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800510e:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <MX_SPI1_Init+0x64>)
 8005110:	2218      	movs	r2, #24
 8005112:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005114:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <MX_SPI1_Init+0x64>)
 8005116:	2200      	movs	r2, #0
 8005118:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800511a:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <MX_SPI1_Init+0x64>)
 800511c:	2200      	movs	r2, #0
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005120:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <MX_SPI1_Init+0x64>)
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005126:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <MX_SPI1_Init+0x64>)
 8005128:	220a      	movs	r2, #10
 800512a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800512c:	4804      	ldr	r0, [pc, #16]	@ (8005140 <MX_SPI1_Init+0x64>)
 800512e:	f002 fb1d 	bl	800776c <HAL_SPI_Init>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005138:	f000 fa0c 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000214 	.word	0x20000214
 8005144:	40013000 	.word	0x40013000

08005148 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800514c:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <MX_SPI2_Init+0x64>)
 800514e:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <MX_SPI2_Init+0x68>)
 8005150:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005152:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005154:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005158:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800515a:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <MX_SPI2_Init+0x64>)
 800515c:	2200      	movs	r2, #0
 800515e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005160:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005162:	2200      	movs	r2, #0
 8005164:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005166:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005168:	2200      	movs	r2, #0
 800516a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800516c:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <MX_SPI2_Init+0x64>)
 800516e:	2200      	movs	r2, #0
 8005170:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005172:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005178:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <MX_SPI2_Init+0x64>)
 800517c:	2200      	movs	r2, #0
 800517e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005182:	2200      	movs	r2, #0
 8005184:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005188:	2200      	movs	r2, #0
 800518a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <MX_SPI2_Init+0x64>)
 800518e:	2200      	movs	r2, #0
 8005190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005192:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <MX_SPI2_Init+0x64>)
 8005194:	220a      	movs	r2, #10
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005198:	4804      	ldr	r0, [pc, #16]	@ (80051ac <MX_SPI2_Init+0x64>)
 800519a:	f002 fae7 	bl	800776c <HAL_SPI_Init>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80051a4:	f000 f9d6 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80051a8:	bf00      	nop
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	2000026c 	.word	0x2000026c
 80051b0:	40003800 	.word	0x40003800

080051b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80051b8:	4b17      	ldr	r3, [pc, #92]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051ba:	4a18      	ldr	r2, [pc, #96]	@ (800521c <MX_SPI3_Init+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80051be:	4b16      	ldr	r3, [pc, #88]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80051c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80051c6:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80051cc:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051d2:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051da:	2200      	movs	r2, #0
 80051dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80051de:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051e8:	2218      	movs	r2, #24
 80051ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051f8:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <MX_SPI3_Init+0x64>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80051fe:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <MX_SPI3_Init+0x64>)
 8005200:	220a      	movs	r2, #10
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005204:	4804      	ldr	r0, [pc, #16]	@ (8005218 <MX_SPI3_Init+0x64>)
 8005206:	f002 fab1 	bl	800776c <HAL_SPI_Init>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005210:	f000 f9a0 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005214:	bf00      	nop
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200002c4 	.word	0x200002c4
 800521c:	40003c00 	.word	0x40003c00

08005220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005226:	f107 0308 	add.w	r3, r7, #8
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	609a      	str	r2, [r3, #8]
 8005232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005234:	463b      	mov	r3, r7
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800523c:	4b1d      	ldr	r3, [pc, #116]	@ (80052b4 <MX_TIM2_Init+0x94>)
 800523e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8005244:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <MX_TIM2_Init+0x94>)
 8005246:	2263      	movs	r2, #99	@ 0x63
 8005248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524a:	4b1a      	ldr	r3, [pc, #104]	@ (80052b4 <MX_TIM2_Init+0x94>)
 800524c:	2200      	movs	r2, #0
 800524e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8005250:	4b18      	ldr	r3, [pc, #96]	@ (80052b4 <MX_TIM2_Init+0x94>)
 8005252:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005258:	4b16      	ldr	r3, [pc, #88]	@ (80052b4 <MX_TIM2_Init+0x94>)
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800525e:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <MX_TIM2_Init+0x94>)
 8005260:	2200      	movs	r2, #0
 8005262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005264:	4813      	ldr	r0, [pc, #76]	@ (80052b4 <MX_TIM2_Init+0x94>)
 8005266:	f003 faa3 	bl	80087b0 <HAL_TIM_Base_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005270:	f000 f970 	bl	8005554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	4619      	mov	r1, r3
 8005280:	480c      	ldr	r0, [pc, #48]	@ (80052b4 <MX_TIM2_Init+0x94>)
 8005282:	f003 fc37 	bl	8008af4 <HAL_TIM_ConfigClockSource>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800528c:	f000 f962 	bl	8005554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005290:	2300      	movs	r3, #0
 8005292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005294:	2300      	movs	r3, #0
 8005296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005298:	463b      	mov	r3, r7
 800529a:	4619      	mov	r1, r3
 800529c:	4805      	ldr	r0, [pc, #20]	@ (80052b4 <MX_TIM2_Init+0x94>)
 800529e:	f003 fe3f 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80052a8:	f000 f954 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052ac:	bf00      	nop
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	2000037c 	.word	0x2000037c

080052b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052cc:	463b      	mov	r3, r7
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052d4:	4b1d      	ldr	r3, [pc, #116]	@ (800534c <MX_TIM3_Init+0x94>)
 80052d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005350 <MX_TIM3_Init+0x98>)
 80052d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80052da:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <MX_TIM3_Init+0x94>)
 80052dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80052e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e2:	4b1a      	ldr	r3, [pc, #104]	@ (800534c <MX_TIM3_Init+0x94>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80052e8:	4b18      	ldr	r3, [pc, #96]	@ (800534c <MX_TIM3_Init+0x94>)
 80052ea:	f241 3287 	movw	r2, #4999	@ 0x1387
 80052ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052f0:	4b16      	ldr	r3, [pc, #88]	@ (800534c <MX_TIM3_Init+0x94>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f6:	4b15      	ldr	r3, [pc, #84]	@ (800534c <MX_TIM3_Init+0x94>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80052fc:	4813      	ldr	r0, [pc, #76]	@ (800534c <MX_TIM3_Init+0x94>)
 80052fe:	f003 fa57 	bl	80087b0 <HAL_TIM_Base_Init>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005308:	f000 f924 	bl	8005554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800530c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005312:	f107 0308 	add.w	r3, r7, #8
 8005316:	4619      	mov	r1, r3
 8005318:	480c      	ldr	r0, [pc, #48]	@ (800534c <MX_TIM3_Init+0x94>)
 800531a:	f003 fbeb 	bl	8008af4 <HAL_TIM_ConfigClockSource>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005324:	f000 f916 	bl	8005554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800532c:	2300      	movs	r3, #0
 800532e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005330:	463b      	mov	r3, r7
 8005332:	4619      	mov	r1, r3
 8005334:	4805      	ldr	r0, [pc, #20]	@ (800534c <MX_TIM3_Init+0x94>)
 8005336:	f003 fdf3 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005340:	f000 f908 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005344:	bf00      	nop
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	200003c4 	.word	0x200003c4
 8005350:	40000400 	.word	0x40000400

08005354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 800535a:	4a12      	ldr	r2, [pc, #72]	@ (80053a4 <MX_USART1_UART_Init+0x50>)
 800535c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800535e:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 8005360:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8005364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005366:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 8005368:	2200      	movs	r2, #0
 800536a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800536c:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005372:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 8005374:	2200      	movs	r2, #0
 8005376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005378:	4b09      	ldr	r3, [pc, #36]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 800537a:	220c      	movs	r2, #12
 800537c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800537e:	4b08      	ldr	r3, [pc, #32]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 8005380:	2200      	movs	r2, #0
 8005382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 8005386:	2200      	movs	r2, #0
 8005388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800538a:	4805      	ldr	r0, [pc, #20]	@ (80053a0 <MX_USART1_UART_Init+0x4c>)
 800538c:	f003 fe4a 	bl	8009024 <HAL_UART_Init>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005396:	f000 f8dd 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2000040c 	.word	0x2000040c
 80053a4:	40011000 	.word	0x40011000

080053a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	4b0c      	ldr	r3, [pc, #48]	@ (80053e4 <MX_DMA_Init+0x3c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	4a0b      	ldr	r2, [pc, #44]	@ (80053e4 <MX_DMA_Init+0x3c>)
 80053b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053be:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <MX_DMA_Init+0x3c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	200f      	movs	r0, #15
 80053d0:	f000 ff45 	bl	800625e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80053d4:	200f      	movs	r0, #15
 80053d6:	f000 ff5e 	bl	8006296 <HAL_NVIC_EnableIRQ>

}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800

080053e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ee:	f107 0314 	add.w	r3, r7, #20
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	609a      	str	r2, [r3, #8]
 80053fa:	60da      	str	r2, [r3, #12]
 80053fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	4b50      	ldr	r3, [pc, #320]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	4a4f      	ldr	r2, [pc, #316]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6313      	str	r3, [r2, #48]	@ 0x30
 800540e:	4b4d      	ldr	r3, [pc, #308]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	4b49      	ldr	r3, [pc, #292]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	4a48      	ldr	r2, [pc, #288]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005428:	6313      	str	r3, [r2, #48]	@ 0x30
 800542a:	4b46      	ldr	r3, [pc, #280]	@ (8005544 <MX_GPIO_Init+0x15c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b42      	ldr	r3, [pc, #264]	@ (8005544 <MX_GPIO_Init+0x15c>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	4a41      	ldr	r2, [pc, #260]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6313      	str	r3, [r2, #48]	@ 0x30
 8005446:	4b3f      	ldr	r3, [pc, #252]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	4b3b      	ldr	r3, [pc, #236]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	4a3a      	ldr	r2, [pc, #232]	@ (8005544 <MX_GPIO_Init+0x15c>)
 800545c:	f043 0302 	orr.w	r3, r3, #2
 8005460:	6313      	str	r3, [r2, #48]	@ 0x30
 8005462:	4b38      	ldr	r3, [pc, #224]	@ (8005544 <MX_GPIO_Init+0x15c>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800546e:	2200      	movs	r2, #0
 8005470:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8005474:	4834      	ldr	r0, [pc, #208]	@ (8005548 <MX_GPIO_Init+0x160>)
 8005476:	f001 fcaf 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 800547a:	2200      	movs	r2, #0
 800547c:	f242 0107 	movw	r1, #8199	@ 0x2007
 8005480:	4832      	ldr	r0, [pc, #200]	@ (800554c <MX_GPIO_Init+0x164>)
 8005482:	f001 fca9 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8005486:	2200      	movs	r2, #0
 8005488:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800548c:	4830      	ldr	r0, [pc, #192]	@ (8005550 <MX_GPIO_Init+0x168>)
 800548e:	f001 fca3 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005492:	2201      	movs	r2, #1
 8005494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005498:	482d      	ldr	r0, [pc, #180]	@ (8005550 <MX_GPIO_Init+0x168>)
 800549a:	f001 fc9d 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800549e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80054a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054a4:	2301      	movs	r3, #1
 80054a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ac:	2300      	movs	r3, #0
 80054ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4619      	mov	r1, r3
 80054b6:	4824      	ldr	r0, [pc, #144]	@ (8005548 <MX_GPIO_Init+0x160>)
 80054b8:	f001 fb0a 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80054bc:	2308      	movs	r3, #8
 80054be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80054c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054c6:	2302      	movs	r3, #2
 80054c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ca:	f107 0314 	add.w	r3, r7, #20
 80054ce:	4619      	mov	r1, r3
 80054d0:	481f      	ldr	r0, [pc, #124]	@ (8005550 <MX_GPIO_Init+0x168>)
 80054d2:	f001 fafd 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80054d6:	2310      	movs	r3, #16
 80054d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	4619      	mov	r1, r3
 80054e8:	4819      	ldr	r0, [pc, #100]	@ (8005550 <MX_GPIO_Init+0x168>)
 80054ea:	f001 faf1 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin TFT_DC_Pin TFT_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin;
 80054ee:	f242 0307 	movw	r3, #8199	@ 0x2007
 80054f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054f4:	2301      	movs	r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fc:	2300      	movs	r3, #0
 80054fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	4619      	mov	r1, r3
 8005506:	4811      	ldr	r0, [pc, #68]	@ (800554c <MX_GPIO_Init+0x164>)
 8005508:	f001 fae2 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800550c:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005512:	2301      	movs	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551a:	2300      	movs	r3, #0
 800551c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4619      	mov	r1, r3
 8005524:	480a      	ldr	r0, [pc, #40]	@ (8005550 <MX_GPIO_Init+0x168>)
 8005526:	f001 fad3 	bl	8006ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800552a:	2200      	movs	r2, #0
 800552c:	2101      	movs	r1, #1
 800552e:	2009      	movs	r0, #9
 8005530:	f000 fe95 	bl	800625e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005534:	2009      	movs	r0, #9
 8005536:	f000 feae 	bl	8006296 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800553a:	bf00      	nop
 800553c:	3728      	adds	r7, #40	@ 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	40020800 	.word	0x40020800
 800554c:	40020400 	.word	0x40020400
 8005550:	40020000 	.word	0x40020000

08005554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005558:	b672      	cpsid	i
}
 800555a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <Error_Handler+0x8>

08005560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_MspInit+0x4c>)
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	4a0f      	ldr	r2, [pc, #60]	@ (80055ac <HAL_MspInit+0x4c>)
 8005570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005574:	6453      	str	r3, [r2, #68]	@ 0x44
 8005576:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <HAL_MspInit+0x4c>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <HAL_MspInit+0x4c>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <HAL_MspInit+0x4c>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	@ 0x40
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_MspInit+0x4c>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800

080055b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08e      	sub	sp, #56	@ 0x38
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a72      	ldr	r2, [pc, #456]	@ (8005798 <HAL_SPI_MspInit+0x1e8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d134      	bne.n	800563c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	4b71      	ldr	r3, [pc, #452]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055da:	4a70      	ldr	r2, [pc, #448]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 80055dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80055e2:	4b6e      	ldr	r3, [pc, #440]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	4b6a      	ldr	r3, [pc, #424]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f6:	4a69      	ldr	r2, [pc, #420]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fe:	4b67      	ldr	r3, [pc, #412]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800560a:	23e0      	movs	r3, #224	@ 0xe0
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560e:	2302      	movs	r3, #2
 8005610:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	2300      	movs	r3, #0
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005616:	2303      	movs	r3, #3
 8005618:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800561a:	2305      	movs	r3, #5
 800561c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005622:	4619      	mov	r1, r3
 8005624:	485e      	ldr	r0, [pc, #376]	@ (80057a0 <HAL_SPI_MspInit+0x1f0>)
 8005626:	f001 fa53 	bl	8006ad0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800562a:	2200      	movs	r2, #0
 800562c:	2100      	movs	r1, #0
 800562e:	2023      	movs	r0, #35	@ 0x23
 8005630:	f000 fe15 	bl	800625e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005634:	2023      	movs	r0, #35	@ 0x23
 8005636:	f000 fe2e 	bl	8006296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800563a:	e0a9      	b.n	8005790 <HAL_SPI_MspInit+0x1e0>
  else if(hspi->Instance==SPI2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a58      	ldr	r2, [pc, #352]	@ (80057a4 <HAL_SPI_MspInit+0x1f4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d162      	bne.n	800570c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	4b54      	ldr	r3, [pc, #336]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	4a53      	ldr	r2, [pc, #332]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005654:	6413      	str	r3, [r2, #64]	@ 0x40
 8005656:	4b51      	ldr	r3, [pc, #324]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	4b4d      	ldr	r3, [pc, #308]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	4a4c      	ldr	r2, [pc, #304]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	6313      	str	r3, [r2, #48]	@ 0x30
 8005672:	4b4a      	ldr	r3, [pc, #296]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800567e:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005684:	2302      	movs	r3, #2
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005688:	2300      	movs	r3, #0
 800568a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568c:	2303      	movs	r3, #3
 800568e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005690:	2305      	movs	r3, #5
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005698:	4619      	mov	r1, r3
 800569a:	4843      	ldr	r0, [pc, #268]	@ (80057a8 <HAL_SPI_MspInit+0x1f8>)
 800569c:	f001 fa18 	bl	8006ad0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80056a0:	4b42      	ldr	r3, [pc, #264]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056a2:	4a43      	ldr	r2, [pc, #268]	@ (80057b0 <HAL_SPI_MspInit+0x200>)
 80056a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80056a6:	4b41      	ldr	r3, [pc, #260]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ac:	4b3f      	ldr	r3, [pc, #252]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056ae:	2240      	movs	r2, #64	@ 0x40
 80056b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b2:	4b3e      	ldr	r3, [pc, #248]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056b8:	4b3c      	ldr	r3, [pc, #240]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056c0:	4b3a      	ldr	r3, [pc, #232]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056c6:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80056cc:	4b37      	ldr	r3, [pc, #220]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056d2:	4b36      	ldr	r3, [pc, #216]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056d8:	4b34      	ldr	r3, [pc, #208]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056da:	2200      	movs	r2, #0
 80056dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80056de:	4833      	ldr	r0, [pc, #204]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056e0:	f000 fdf4 	bl	80062cc <HAL_DMA_Init>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_SPI_MspInit+0x13e>
      Error_Handler();
 80056ea:	f7ff ff33 	bl	8005554 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2e      	ldr	r2, [pc, #184]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056f2:	649a      	str	r2, [r3, #72]	@ 0x48
 80056f4:	4a2d      	ldr	r2, [pc, #180]	@ (80057ac <HAL_SPI_MspInit+0x1fc>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2101      	movs	r1, #1
 80056fe:	2024      	movs	r0, #36	@ 0x24
 8005700:	f000 fdad 	bl	800625e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005704:	2024      	movs	r0, #36	@ 0x24
 8005706:	f000 fdc6 	bl	8006296 <HAL_NVIC_EnableIRQ>
}
 800570a:	e041      	b.n	8005790 <HAL_SPI_MspInit+0x1e0>
  else if(hspi->Instance==SPI3)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a28      	ldr	r2, [pc, #160]	@ (80057b4 <HAL_SPI_MspInit+0x204>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d13c      	bne.n	8005790 <HAL_SPI_MspInit+0x1e0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	4b20      	ldr	r3, [pc, #128]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	4a1f      	ldr	r2, [pc, #124]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005724:	6413      	str	r3, [r2, #64]	@ 0x40
 8005726:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	4b19      	ldr	r3, [pc, #100]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	4a18      	ldr	r2, [pc, #96]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	6313      	str	r3, [r2, #48]	@ 0x30
 8005742:	4b16      	ldr	r3, [pc, #88]	@ (800579c <HAL_SPI_MspInit+0x1ec>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800574e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005754:	2302      	movs	r3, #2
 8005756:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005758:	2300      	movs	r3, #0
 800575a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800575c:	2303      	movs	r3, #3
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005760:	2307      	movs	r3, #7
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005768:	4619      	mov	r1, r3
 800576a:	480f      	ldr	r0, [pc, #60]	@ (80057a8 <HAL_SPI_MspInit+0x1f8>)
 800576c:	f001 f9b0 	bl	8006ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005770:	2330      	movs	r3, #48	@ 0x30
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	2302      	movs	r3, #2
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577c:	2303      	movs	r3, #3
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005780:	2306      	movs	r3, #6
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005788:	4619      	mov	r1, r3
 800578a:	4807      	ldr	r0, [pc, #28]	@ (80057a8 <HAL_SPI_MspInit+0x1f8>)
 800578c:	f001 f9a0 	bl	8006ad0 <HAL_GPIO_Init>
}
 8005790:	bf00      	nop
 8005792:	3738      	adds	r7, #56	@ 0x38
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40013000 	.word	0x40013000
 800579c:	40023800 	.word	0x40023800
 80057a0:	40020000 	.word	0x40020000
 80057a4:	40003800 	.word	0x40003800
 80057a8:	40020400 	.word	0x40020400
 80057ac:	2000031c 	.word	0x2000031c
 80057b0:	40026070 	.word	0x40026070
 80057b4:	40003c00 	.word	0x40003c00

080057b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c8:	d116      	bne.n	80057f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005838 <HAL_TIM_Base_MspInit+0x80>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	4a19      	ldr	r2, [pc, #100]	@ (8005838 <HAL_TIM_Base_MspInit+0x80>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80057da:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <HAL_TIM_Base_MspInit+0x80>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2101      	movs	r1, #1
 80057ea:	201c      	movs	r0, #28
 80057ec:	f000 fd37 	bl	800625e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80057f0:	201c      	movs	r0, #28
 80057f2:	f000 fd50 	bl	8006296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80057f6:	e01a      	b.n	800582e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a0f      	ldr	r2, [pc, #60]	@ (800583c <HAL_TIM_Base_MspInit+0x84>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d115      	bne.n	800582e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <HAL_TIM_Base_MspInit+0x80>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	4a0b      	ldr	r2, [pc, #44]	@ (8005838 <HAL_TIM_Base_MspInit+0x80>)
 800580c:	f043 0302 	orr.w	r3, r3, #2
 8005810:	6413      	str	r3, [r2, #64]	@ 0x40
 8005812:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <HAL_TIM_Base_MspInit+0x80>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2101      	movs	r1, #1
 8005822:	201d      	movs	r0, #29
 8005824:	f000 fd1b 	bl	800625e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005828:	201d      	movs	r0, #29
 800582a:	f000 fd34 	bl	8006296 <HAL_NVIC_EnableIRQ>
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	40000400 	.word	0x40000400

08005840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	@ 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005848:	f107 0314 	add.w	r3, r7, #20
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <HAL_UART_MspInit+0x94>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d134      	bne.n	80058cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	4b1c      	ldr	r3, [pc, #112]	@ (80058d8 <HAL_UART_MspInit+0x98>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <HAL_UART_MspInit+0x98>)
 800586c:	f043 0310 	orr.w	r3, r3, #16
 8005870:	6453      	str	r3, [r2, #68]	@ 0x44
 8005872:	4b19      	ldr	r3, [pc, #100]	@ (80058d8 <HAL_UART_MspInit+0x98>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	4b15      	ldr	r3, [pc, #84]	@ (80058d8 <HAL_UART_MspInit+0x98>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	4a14      	ldr	r2, [pc, #80]	@ (80058d8 <HAL_UART_MspInit+0x98>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6313      	str	r3, [r2, #48]	@ 0x30
 800588e:	4b12      	ldr	r3, [pc, #72]	@ (80058d8 <HAL_UART_MspInit+0x98>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800589a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800589e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a0:	2302      	movs	r3, #2
 80058a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058a8:	2303      	movs	r3, #3
 80058aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80058ac:	2307      	movs	r3, #7
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b0:	f107 0314 	add.w	r3, r7, #20
 80058b4:	4619      	mov	r1, r3
 80058b6:	4809      	ldr	r0, [pc, #36]	@ (80058dc <HAL_UART_MspInit+0x9c>)
 80058b8:	f001 f90a 	bl	8006ad0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80058bc:	2200      	movs	r2, #0
 80058be:	2100      	movs	r1, #0
 80058c0:	2025      	movs	r0, #37	@ 0x25
 80058c2:	f000 fccc 	bl	800625e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058c6:	2025      	movs	r0, #37	@ 0x25
 80058c8:	f000 fce5 	bl	8006296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80058cc:	bf00      	nop
 80058ce:	3728      	adds	r7, #40	@ 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40011000 	.word	0x40011000
 80058d8:	40023800 	.word	0x40023800
 80058dc:	40020000 	.word	0x40020000

080058e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <NMI_Handler+0x4>

080058e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <HardFault_Handler+0x4>

080058f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <MemManage_Handler+0x4>

080058f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <BusFault_Handler+0x4>

08005900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <UsageFault_Handler+0x4>

08005908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005936:	f000 fb73 	bl	8006020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}

0800593e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005942:	2008      	movs	r0, #8
 8005944:	f001 fa62 	bl	8006e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005948:	bf00      	nop
 800594a:	bd80      	pop	{r7, pc}

0800594c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005950:	4802      	ldr	r0, [pc, #8]	@ (800595c <DMA1_Stream4_IRQHandler+0x10>)
 8005952:	f000 fe53 	bl	80065fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	2000031c 	.word	0x2000031c

08005960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005964:	4802      	ldr	r0, [pc, #8]	@ (8005970 <TIM2_IRQHandler+0x10>)
 8005966:	f002 ffd5 	bl	8008914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	2000037c 	.word	0x2000037c

08005974 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005978:	4802      	ldr	r0, [pc, #8]	@ (8005984 <TIM3_IRQHandler+0x10>)
 800597a:	f002 ffcb 	bl	8008914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	200003c4 	.word	0x200003c4

08005988 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800598c:	4802      	ldr	r0, [pc, #8]	@ (8005998 <SPI1_IRQHandler+0x10>)
 800598e:	f002 fc2f 	bl	80081f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000214 	.word	0x20000214

0800599c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80059a0:	4802      	ldr	r0, [pc, #8]	@ (80059ac <SPI2_IRQHandler+0x10>)
 80059a2:	f002 fc25 	bl	80081f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	2000026c 	.word	0x2000026c

080059b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059b4:	4802      	ldr	r0, [pc, #8]	@ (80059c0 <USART1_IRQHandler+0x10>)
 80059b6:	f003 fc35 	bl	8009224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2000040c 	.word	0x2000040c

080059c4 <readRegister>:
#include "sx1278.h"

uint8_t data_spi_tx[2] = { };
uint8_t data_spi_rx[2] = { };

uint8_t readRegister(uint8_t addr) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
	CS = 0;
 80059ce:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <readRegister+0x4c>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
	data_spi_tx[0] = addr & 0x7F;
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a14 <readRegister+0x50>)
 80059de:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, data_spi_tx, 1, HAL_MAX_DELAY);
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
 80059e4:	2201      	movs	r2, #1
 80059e6:	490b      	ldr	r1, [pc, #44]	@ (8005a14 <readRegister+0x50>)
 80059e8:	480b      	ldr	r0, [pc, #44]	@ (8005a18 <readRegister+0x54>)
 80059ea:	f001 ff48 	bl	800787e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, data_spi_rx, 1, HAL_MAX_DELAY);
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295
 80059f2:	2201      	movs	r2, #1
 80059f4:	4909      	ldr	r1, [pc, #36]	@ (8005a1c <readRegister+0x58>)
 80059f6:	4808      	ldr	r0, [pc, #32]	@ (8005a18 <readRegister+0x54>)
 80059f8:	f002 f885 	bl	8007b06 <HAL_SPI_Receive>
	CS = 1;
 80059fc:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <readRegister+0x4c>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
	return data_spi_rx[0];
 8005a02:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <readRegister+0x58>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	424102b4 	.word	0x424102b4
 8005a14:	20000630 	.word	0x20000630
 8005a18:	200002c4 	.word	0x200002c4
 8005a1c:	20000634 	.word	0x20000634

08005a20 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t data) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	460a      	mov	r2, r1
 8005a2a:	71fb      	strb	r3, [r7, #7]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	71bb      	strb	r3, [r7, #6]
	CS = 0;
 8005a30:	4b10      	ldr	r3, [pc, #64]	@ (8005a74 <writeRegister+0x54>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
	data_spi_tx[0] = addr | 0x80;
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <writeRegister+0x58>)
 8005a40:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, data_spi_tx, 1, HAL_MAX_DELAY);
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	2201      	movs	r2, #1
 8005a48:	490b      	ldr	r1, [pc, #44]	@ (8005a78 <writeRegister+0x58>)
 8005a4a:	480c      	ldr	r0, [pc, #48]	@ (8005a7c <writeRegister+0x5c>)
 8005a4c:	f001 ff17 	bl	800787e <HAL_SPI_Transmit>
	data_spi_tx[0] = data;
 8005a50:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <writeRegister+0x58>)
 8005a52:	79bb      	ldrb	r3, [r7, #6]
 8005a54:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi3, data_spi_tx, 1, HAL_MAX_DELAY);
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4906      	ldr	r1, [pc, #24]	@ (8005a78 <writeRegister+0x58>)
 8005a5e:	4807      	ldr	r0, [pc, #28]	@ (8005a7c <writeRegister+0x5c>)
 8005a60:	f001 ff0d 	bl	800787e <HAL_SPI_Transmit>
	CS = 1;
 8005a64:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <writeRegister+0x54>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	424102b4 	.word	0x424102b4
 8005a78:	20000630 	.word	0x20000630
 8005a7c:	200002c4 	.word	0x200002c4

08005a80 <standby_mode>:

void standby_mode() {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8005a84:	2181      	movs	r1, #129	@ 0x81
 8005a86:	2001      	movs	r0, #1
 8005a88:	f7ff ffca 	bl	8005a20 <writeRegister>
}
 8005a8c:	bf00      	nop
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <sleep_mode>:

void sleep_mode() {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8005a94:	2180      	movs	r1, #128	@ 0x80
 8005a96:	2001      	movs	r0, #1
 8005a98:	f7ff ffc2 	bl	8005a20 <writeRegister>
}
 8005a9c:	bf00      	nop
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <tx_mode>:

void tx_mode() {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8005aa4:	2183      	movs	r1, #131	@ 0x83
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7ff ffba 	bl	8005a20 <writeRegister>
}
 8005aac:	bf00      	nop
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <rx_mode>:

void rx_mode() {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8005ab4:	2185      	movs	r1, #133	@ 0x85
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7ff ffb2 	bl	8005a20 <writeRegister>
}
 8005abc:	bf00      	nop
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <setFrequency>:

void setFrequency(unsigned long frequency) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	writeRegister(REG_FRF_MSB, (uint8_t) (frequency >> 16));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	4619      	mov	r1, r3
 8005ad0:	2006      	movs	r0, #6
 8005ad2:	f7ff ffa5 	bl	8005a20 <writeRegister>
	writeRegister(REG_FRF_MID, (uint8_t) (frequency >> 8));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	2007      	movs	r0, #7
 8005ae0:	f7ff ff9e 	bl	8005a20 <writeRegister>
	writeRegister(REG_FRF_LSB, (uint8_t) (frequency >> 0));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	2008      	movs	r0, #8
 8005aec:	f7ff ff98 	bl	8005a20 <writeRegister>
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <sx1278_init>:

void sx1278_init(unsigned long frequency) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	RST_LORA = 0;
 8005b00:	4b21      	ldr	r3, [pc, #132]	@ (8005b88 <sx1278_init+0x90>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8005b06:	2001      	movs	r0, #1
 8005b08:	f000 faaa 	bl	8006060 <HAL_Delay>
	RST_LORA = 1;
 8005b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b88 <sx1278_init+0x90>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f000 faa4 	bl	8006060 <HAL_Delay>
	standby_mode();
 8005b18:	f7ff ffb2 	bl	8005a80 <standby_mode>
	HAL_Delay(1);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f000 fa9f 	bl	8006060 <HAL_Delay>
	sleep_mode();
 8005b22:	f7ff ffb5 	bl	8005a90 <sleep_mode>

	setFrequency(frequency);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff ffca 	bl	8005ac0 <setFrequency>

	writeRegister(0x1d, 0x72); //BW = 125khz, CR = 4/5
 8005b2c:	2172      	movs	r1, #114	@ 0x72
 8005b2e:	201d      	movs	r0, #29
 8005b30:	f7ff ff76 	bl	8005a20 <writeRegister>
	writeRegister(0x1e, 0x70); //SF = 7
 8005b34:	2170      	movs	r1, #112	@ 0x70
 8005b36:	201e      	movs	r0, #30
 8005b38:	f7ff ff72 	bl	8005a20 <writeRegister>

	writeRegister(0x0e, 0);
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	200e      	movs	r0, #14
 8005b40:	f7ff ff6e 	bl	8005a20 <writeRegister>
	writeRegister(0x0f, 0);
 8005b44:	2100      	movs	r1, #0
 8005b46:	200f      	movs	r0, #15
 8005b48:	f7ff ff6a 	bl	8005a20 <writeRegister>
	writeRegister(0x0c, 0x23);
 8005b4c:	2123      	movs	r1, #35	@ 0x23
 8005b4e:	200c      	movs	r0, #12
 8005b50:	f7ff ff66 	bl	8005a20 <writeRegister>
	writeRegister(0x26, 0x04);
 8005b54:	2104      	movs	r1, #4
 8005b56:	2026      	movs	r0, #38	@ 0x26
 8005b58:	f7ff ff62 	bl	8005a20 <writeRegister>
	writeRegister(0x4d, 0x84);
 8005b5c:	2184      	movs	r1, #132	@ 0x84
 8005b5e:	204d      	movs	r0, #77	@ 0x4d
 8005b60:	f7ff ff5e 	bl	8005a20 <writeRegister>
	writeRegister(0x0b, 0x2b);
 8005b64:	212b      	movs	r1, #43	@ 0x2b
 8005b66:	200b      	movs	r0, #11
 8005b68:	f7ff ff5a 	bl	8005a20 <writeRegister>
	writeRegister(0x09, 0x8f);
 8005b6c:	218f      	movs	r1, #143	@ 0x8f
 8005b6e:	2009      	movs	r0, #9
 8005b70:	f7ff ff56 	bl	8005a20 <writeRegister>
	writeRegister(0x40, 0X40); // anh xa tx done
 8005b74:	2140      	movs	r1, #64	@ 0x40
 8005b76:	2040      	movs	r0, #64	@ 0x40
 8005b78:	f7ff ff52 	bl	8005a20 <writeRegister>
	standby_mode();
 8005b7c:	f7ff ff80 	bl	8005a80 <standby_mode>
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	424102b8 	.word	0x424102b8

08005b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return 1;
 8005b90:	2301      	movs	r3, #1
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <_kill>:

int _kill(int pid, int sig)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ba6:	f005 f863 	bl	800ac70 <__errno>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2216      	movs	r2, #22
 8005bae:	601a      	str	r2, [r3, #0]
  return -1;
 8005bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <_exit>:

void _exit (int status)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ffe7 	bl	8005b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <_exit+0x12>

08005bd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e00a      	b.n	8005bfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005be4:	f3af 8000 	nop.w
 8005be8:	4601      	mov	r1, r0
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	60ba      	str	r2, [r7, #8]
 8005bf0:	b2ca      	uxtb	r2, r1
 8005bf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	dbf0      	blt.n	8005be4 <_read+0x12>
  }

  return len;
 8005c02:	687b      	ldr	r3, [r7, #4]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e009      	b.n	8005c32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	60ba      	str	r2, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	dbf1      	blt.n	8005c1e <_write+0x12>
  }
  return len;
 8005c3a:	687b      	ldr	r3, [r7, #4]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_close>:

int _close(int file)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c6c:	605a      	str	r2, [r3, #4]
  return 0;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <_isatty>:

int _isatty(int file)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c84:	2301      	movs	r3, #1
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cb4:	4a14      	ldr	r2, [pc, #80]	@ (8005d08 <_sbrk+0x5c>)
 8005cb6:	4b15      	ldr	r3, [pc, #84]	@ (8005d0c <_sbrk+0x60>)
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cc0:	4b13      	ldr	r3, [pc, #76]	@ (8005d10 <_sbrk+0x64>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <_sbrk+0x64>)
 8005cca:	4a12      	ldr	r2, [pc, #72]	@ (8005d14 <_sbrk+0x68>)
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cce:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <_sbrk+0x64>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d207      	bcs.n	8005cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cdc:	f004 ffc8 	bl	800ac70 <__errno>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	220c      	movs	r2, #12
 8005ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cea:	e009      	b.n	8005d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cec:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <_sbrk+0x64>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <_sbrk+0x64>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	4a05      	ldr	r2, [pc, #20]	@ (8005d10 <_sbrk+0x64>)
 8005cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20020000 	.word	0x20020000
 8005d0c:	00000400 	.word	0x00000400
 8005d10:	20000638 	.word	0x20000638
 8005d14:	20000790 	.word	0x20000790

08005d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <SystemInit+0x20>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	4a05      	ldr	r2, [pc, #20]	@ (8005d38 <SystemInit+0x20>)
 8005d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <remap>:


extern SPI_HandleTypeDef hspi1;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	ed87 0a05 	vstr	s0, [r7, #20]
 8005d46:	edc7 0a04 	vstr	s1, [r7, #16]
 8005d4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8005d4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005d52:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005d56:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d62:	edd7 6a01 	vldr	s13, [r7, #4]
 8005d66:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005d72:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d86:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <getRaw>:
	HAL_SPI_Transmit(&hspi1, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005da2:	2200      	movs	r2, #0
 8005da4:	2101      	movs	r1, #1
 8005da6:	481a      	ldr	r0, [pc, #104]	@ (8005e10 <getRaw+0x78>)
 8005da8:	f001 f816 	bl	8006dd8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_SPI_Transmit(&hspi1, &address, 1, 1000);
 8005dac:	1df9      	adds	r1, r7, #7
 8005dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005db2:	2201      	movs	r2, #1
 8005db4:	4817      	ldr	r0, [pc, #92]	@ (8005e14 <getRaw+0x7c>)
 8005db6:	f001 fd62 	bl	800787e <HAL_SPI_Transmit>
	address = 0x00;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi1, &address, &data, sizeof(data), 1000);
 8005dbe:	f107 020b 	add.w	r2, r7, #11
 8005dc2:	1df9      	adds	r1, r7, #7
 8005dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4811      	ldr	r0, [pc, #68]	@ (8005e14 <getRaw+0x7c>)
 8005dce:	f001 ffb3 	bl	8007d38 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005dd2:	7afb      	ldrb	r3, [r7, #11]
 8005dd4:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi1, &address, &data, sizeof(data), 1000);
 8005dda:	f107 020b 	add.w	r2, r7, #11
 8005dde:	1df9      	adds	r1, r7, #7
 8005de0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2301      	movs	r3, #1
 8005de8:	480a      	ldr	r0, [pc, #40]	@ (8005e14 <getRaw+0x7c>)
 8005dea:	f001 ffa5 	bl	8007d38 <HAL_SPI_TransmitReceive>
	LSB = data;
 8005dee:	7afb      	ldrb	r3, [r7, #11]
 8005df0:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8005df2:	2201      	movs	r2, #1
 8005df4:	2101      	movs	r1, #1
 8005df6:	4806      	ldr	r0, [pc, #24]	@ (8005e10 <getRaw+0x78>)
 8005df8:	f000 ffee 	bl	8006dd8 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8005dfc:	89fb      	ldrh	r3, [r7, #14]
 8005dfe:	021a      	lsls	r2, r3, #8
 8005e00:	89bb      	ldrh	r3, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	10db      	asrs	r3, r3, #3
 8005e06:	b29b      	uxth	r3, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40020400 	.word	0x40020400
 8005e14:	20000214 	.word	0x20000214

08005e18 <X>:

inline static uint16_t X(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8005e1e:	20d0      	movs	r0, #208	@ 0xd0
 8005e20:	f7ff ffba 	bl	8005d98 <getRaw>
 8005e24:	4603      	mov	r3, r0
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8005e7c <X+0x64>
 8005e32:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8005e80 <X+0x68>
 8005e36:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8005e84 <X+0x6c>
 8005e3a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005e88 <X+0x70>
 8005e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e42:	f7ff ff7b 	bl	8005d3c <remap>
 8005e46:	eef0 7a40 	vmov.f32	s15, s0
 8005e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4e:	ee17 3a90 	vmov	r3, s15
 8005e52:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <X+0x58>
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8005e6a:	d801      	bhi.n	8005e70 <X+0x58>
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	e000      	b.n	8005e72 <X+0x5a>
	else return 0;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	439f8000 	.word	0x439f8000
 8005e80:	00000000 	.word	0x00000000
 8005e84:	456d8000 	.word	0x456d8000
 8005e88:	43960000 	.word	0x43960000

08005e8c <Y>:

inline static uint16_t Y(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8005e92:	2090      	movs	r0, #144	@ 0x90
 8005e94:	f7ff ff80 	bl	8005d98 <getRaw>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8005ef0 <Y+0x64>
 8005ea6:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8005ef4 <Y+0x68>
 8005eaa:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8005ef8 <Y+0x6c>
 8005eae:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005efc <Y+0x70>
 8005eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb6:	f7ff ff41 	bl	8005d3c <remap>
 8005eba:	eef0 7a40 	vmov.f32	s15, s0
 8005ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec2:	ee17 3a90 	vmov	r3, s15
 8005ec6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8005ece:	3301      	adds	r3, #1
 8005ed0:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <Y+0x58>
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8005ede:	d801      	bhi.n	8005ee4 <Y+0x58>
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	e000      	b.n	8005ee6 <Y+0x5a>
	else return 0;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	43ef8000 	.word	0x43ef8000
 8005ef4:	00000000 	.word	0x00000000
 8005ef8:	456a6000 	.word	0x456a6000
 8005efc:	43c80000 	.word	0x43c80000

08005f00 <getX>:

uint16_t getX(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 8005f06:	f7ff ffc1 	bl	8005e8c <Y>
 8005f0a:	4603      	mov	r3, r0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <getY>:

uint16_t getY(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 8005f1a:	f7ff ff7d 	bl	8005e18 <X>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f2c:	f7ff fef4 	bl	8005d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f30:	480c      	ldr	r0, [pc, #48]	@ (8005f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f32:	490d      	ldr	r1, [pc, #52]	@ (8005f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f34:	4a0d      	ldr	r2, [pc, #52]	@ (8005f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f38:	e002      	b.n	8005f40 <LoopCopyDataInit>

08005f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f3e:	3304      	adds	r3, #4

08005f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f44:	d3f9      	bcc.n	8005f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f46:	4a0a      	ldr	r2, [pc, #40]	@ (8005f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f48:	4c0a      	ldr	r4, [pc, #40]	@ (8005f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f4c:	e001      	b.n	8005f52 <LoopFillZerobss>

08005f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f50:	3204      	adds	r2, #4

08005f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f54:	d3fb      	bcc.n	8005f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f56:	f004 fe91 	bl	800ac7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f5a:	f7fe fc77 	bl	800484c <main>
  bx  lr    
 8005f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f68:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005f6c:	0800f6f0 	.word	0x0800f6f0
  ldr r2, =_sbss
 8005f70:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005f74:	2000078c 	.word	0x2000078c

08005f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f78:	e7fe      	b.n	8005f78 <ADC_IRQHandler>
	...

08005f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f80:	4b0e      	ldr	r3, [pc, #56]	@ (8005fbc <HAL_Init+0x40>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a0d      	ldr	r2, [pc, #52]	@ (8005fbc <HAL_Init+0x40>)
 8005f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_Init+0x40>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <HAL_Init+0x40>)
 8005f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f98:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <HAL_Init+0x40>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a07      	ldr	r2, [pc, #28]	@ (8005fbc <HAL_Init+0x40>)
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fa4:	2003      	movs	r0, #3
 8005fa6:	f000 f94f 	bl	8006248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005faa:	200f      	movs	r0, #15
 8005fac:	f000 f808 	bl	8005fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fb0:	f7ff fad6 	bl	8005560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00

08005fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fc8:	4b12      	ldr	r3, [pc, #72]	@ (8006014 <HAL_InitTick+0x54>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <HAL_InitTick+0x58>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f967 	bl	80062b2 <HAL_SYSTICK_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e00e      	b.n	800600c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b0f      	cmp	r3, #15
 8005ff2:	d80a      	bhi.n	800600a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	f000 f92f 	bl	800625e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006000:	4a06      	ldr	r2, [pc, #24]	@ (800601c <HAL_InitTick+0x5c>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	2000001c 	.word	0x2000001c
 8006018:	20000024 	.word	0x20000024
 800601c:	20000020 	.word	0x20000020

08006020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006024:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <HAL_IncTick+0x20>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <HAL_IncTick+0x24>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4413      	add	r3, r2
 8006030:	4a04      	ldr	r2, [pc, #16]	@ (8006044 <HAL_IncTick+0x24>)
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000024 	.word	0x20000024
 8006044:	2000063c 	.word	0x2000063c

08006048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return uwTick;
 800604c:	4b03      	ldr	r3, [pc, #12]	@ (800605c <HAL_GetTick+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	2000063c 	.word	0x2000063c

08006060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006068:	f7ff ffee 	bl	8006048 <HAL_GetTick>
 800606c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d005      	beq.n	8006086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800607a:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <HAL_Delay+0x44>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006086:	bf00      	nop
 8006088:	f7ff ffde 	bl	8006048 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	429a      	cmp	r2, r3
 8006096:	d8f7      	bhi.n	8006088 <HAL_Delay+0x28>
  {
  }
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000024 	.word	0x20000024

080060a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060b8:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <__NVIC_SetPriorityGrouping+0x44>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060c4:	4013      	ands	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060da:	4a04      	ldr	r2, [pc, #16]	@ (80060ec <__NVIC_SetPriorityGrouping+0x44>)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	60d3      	str	r3, [r2, #12]
}
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060f4:	4b04      	ldr	r3, [pc, #16]	@ (8006108 <__NVIC_GetPriorityGrouping+0x18>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	f003 0307 	and.w	r3, r3, #7
}
 80060fe:	4618      	mov	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	2b00      	cmp	r3, #0
 800611c:	db0b      	blt.n	8006136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	f003 021f 	and.w	r2, r3, #31
 8006124:	4907      	ldr	r1, [pc, #28]	@ (8006144 <__NVIC_EnableIRQ+0x38>)
 8006126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	2001      	movs	r0, #1
 800612e:	fa00 f202 	lsl.w	r2, r0, r2
 8006132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	e000e100 	.word	0xe000e100

08006148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006158:	2b00      	cmp	r3, #0
 800615a:	db0a      	blt.n	8006172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	490c      	ldr	r1, [pc, #48]	@ (8006194 <__NVIC_SetPriority+0x4c>)
 8006162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006166:	0112      	lsls	r2, r2, #4
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	440b      	add	r3, r1
 800616c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006170:	e00a      	b.n	8006188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	4908      	ldr	r1, [pc, #32]	@ (8006198 <__NVIC_SetPriority+0x50>)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	3b04      	subs	r3, #4
 8006180:	0112      	lsls	r2, r2, #4
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	440b      	add	r3, r1
 8006186:	761a      	strb	r2, [r3, #24]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	e000e100 	.word	0xe000e100
 8006198:	e000ed00 	.word	0xe000ed00

0800619c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800619c:	b480      	push	{r7}
 800619e:	b089      	sub	sp, #36	@ 0x24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f1c3 0307 	rsb	r3, r3, #7
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	bf28      	it	cs
 80061ba:	2304      	movcs	r3, #4
 80061bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2b06      	cmp	r3, #6
 80061c4:	d902      	bls.n	80061cc <NVIC_EncodePriority+0x30>
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3b03      	subs	r3, #3
 80061ca:	e000      	b.n	80061ce <NVIC_EncodePriority+0x32>
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d0:	f04f 32ff 	mov.w	r2, #4294967295
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43da      	mvns	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	401a      	ands	r2, r3
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061e4:	f04f 31ff 	mov.w	r1, #4294967295
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	fa01 f303 	lsl.w	r3, r1, r3
 80061ee:	43d9      	mvns	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f4:	4313      	orrs	r3, r2
         );
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3724      	adds	r7, #36	@ 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006214:	d301      	bcc.n	800621a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006216:	2301      	movs	r3, #1
 8006218:	e00f      	b.n	800623a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800621a:	4a0a      	ldr	r2, [pc, #40]	@ (8006244 <SysTick_Config+0x40>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3b01      	subs	r3, #1
 8006220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006222:	210f      	movs	r1, #15
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	f7ff ff8e 	bl	8006148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <SysTick_Config+0x40>)
 800622e:	2200      	movs	r2, #0
 8006230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006232:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <SysTick_Config+0x40>)
 8006234:	2207      	movs	r2, #7
 8006236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	e000e010 	.word	0xe000e010

08006248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff29 	bl	80060a8 <__NVIC_SetPriorityGrouping>
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800625e:	b580      	push	{r7, lr}
 8006260:	b086      	sub	sp, #24
 8006262:	af00      	add	r7, sp, #0
 8006264:	4603      	mov	r3, r0
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006270:	f7ff ff3e 	bl	80060f0 <__NVIC_GetPriorityGrouping>
 8006274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	6978      	ldr	r0, [r7, #20]
 800627c:	f7ff ff8e 	bl	800619c <NVIC_EncodePriority>
 8006280:	4602      	mov	r2, r0
 8006282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff ff5d 	bl	8006148 <__NVIC_SetPriority>
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	4603      	mov	r3, r0
 800629e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ff31 	bl	800610c <__NVIC_EnableIRQ>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ffa2 	bl	8006204 <SysTick_Config>
 80062c0:	4603      	mov	r3, r0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062d8:	f7ff feb6 	bl	8006048 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e099      	b.n	800641c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006308:	e00f      	b.n	800632a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800630a:	f7ff fe9d 	bl	8006048 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b05      	cmp	r3, #5
 8006316:	d908      	bls.n	800632a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2203      	movs	r2, #3
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e078      	b.n	800641c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e8      	bne.n	800630a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4b38      	ldr	r3, [pc, #224]	@ (8006424 <HAL_DMA_Init+0x158>)
 8006344:	4013      	ands	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800636e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	2b04      	cmp	r3, #4
 8006382:	d107      	bne.n	8006394 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	4313      	orrs	r3, r2
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d117      	bne.n	80063ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fb01 	bl	80069d8 <DMA_CheckFifoParam>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2240      	movs	r2, #64	@ 0x40
 80063e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80063ea:	2301      	movs	r3, #1
 80063ec:	e016      	b.n	800641c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fab8 	bl	800696c <DMA_CalcBaseAndBitshift>
 80063fc:	4603      	mov	r3, r0
 80063fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006404:	223f      	movs	r2, #63	@ 0x3f
 8006406:	409a      	lsls	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	f010803f 	.word	0xf010803f

08006428 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_DMA_Start_IT+0x26>
 800644a:	2302      	movs	r3, #2
 800644c:	e040      	b.n	80064d0 <HAL_DMA_Start_IT+0xa8>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d12f      	bne.n	80064c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa4a 	bl	8006910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006480:	223f      	movs	r2, #63	@ 0x3f
 8006482:	409a      	lsls	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0216 	orr.w	r2, r2, #22
 8006496:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0208 	orr.w	r2, r2, #8
 80064ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e005      	b.n	80064ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
 80064cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064e6:	f7ff fdaf 	bl	8006048 <HAL_GetTick>
 80064ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d008      	beq.n	800650a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2280      	movs	r2, #128	@ 0x80
 80064fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e052      	b.n	80065b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0216 	bic.w	r2, r2, #22
 8006518:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006528:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <HAL_DMA_Abort+0x62>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0208 	bic.w	r2, r2, #8
 8006548:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0201 	bic.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800655a:	e013      	b.n	8006584 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800655c:	f7ff fd74 	bl	8006048 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b05      	cmp	r3, #5
 8006568:	d90c      	bls.n	8006584 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2203      	movs	r2, #3
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e015      	b.n	80065b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e4      	bne.n	800655c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006596:	223f      	movs	r2, #63	@ 0x3f
 8006598:	409a      	lsls	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d004      	beq.n	80065d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2280      	movs	r2, #128	@ 0x80
 80065d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e00c      	b.n	80065f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2205      	movs	r2, #5
 80065da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006608:	4b8e      	ldr	r3, [pc, #568]	@ (8006844 <HAL_DMA_IRQHandler+0x248>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a8e      	ldr	r2, [pc, #568]	@ (8006848 <HAL_DMA_IRQHandler+0x24c>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0a9b      	lsrs	r3, r3, #10
 8006614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006626:	2208      	movs	r2, #8
 8006628:	409a      	lsls	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01a      	beq.n	8006668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d013      	beq.n	8006668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006654:	2208      	movs	r2, #8
 8006656:	409a      	lsls	r2, r3
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	f043 0201 	orr.w	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00b      	beq.n	800669e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668a:	2201      	movs	r2, #1
 800668c:	409a      	lsls	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006696:	f043 0202 	orr.w	r2, r3, #2
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a2:	2204      	movs	r2, #4
 80066a4:	409a      	lsls	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d012      	beq.n	80066d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c0:	2204      	movs	r2, #4
 80066c2:	409a      	lsls	r2, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	f043 0204 	orr.w	r2, r3, #4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d8:	2210      	movs	r2, #16
 80066da:	409a      	lsls	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d043      	beq.n	800676c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d03c      	beq.n	800676c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f6:	2210      	movs	r2, #16
 80066f8:	409a      	lsls	r2, r3
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d018      	beq.n	800673e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d108      	bne.n	800672c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d024      	beq.n	800676c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	e01f      	b.n	800676c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
 800673c:	e016      	b.n	800676c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d107      	bne.n	800675c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0208 	bic.w	r2, r2, #8
 800675a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006770:	2220      	movs	r2, #32
 8006772:	409a      	lsls	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 808f 	beq.w	800689c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8087 	beq.w	800689c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006792:	2220      	movs	r2, #32
 8006794:	409a      	lsls	r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d136      	bne.n	8006814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0216 	bic.w	r2, r2, #22
 80067b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695a      	ldr	r2, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <HAL_DMA_IRQHandler+0x1da>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0208 	bic.w	r2, r2, #8
 80067e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ea:	223f      	movs	r2, #63	@ 0x3f
 80067ec:	409a      	lsls	r2, r3
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006806:	2b00      	cmp	r3, #0
 8006808:	d07e      	beq.n	8006908 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
        }
        return;
 8006812:	e079      	b.n	8006908 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01d      	beq.n	800685e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006834:	2b00      	cmp	r3, #0
 8006836:	d031      	beq.n	800689c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
 8006840:	e02c      	b.n	800689c <HAL_DMA_IRQHandler+0x2a0>
 8006842:	bf00      	nop
 8006844:	2000001c 	.word	0x2000001c
 8006848:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d023      	beq.n	800689c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
 800685c:	e01e      	b.n	800689c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10f      	bne.n	800688c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0210 	bic.w	r2, r2, #16
 800687a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d032      	beq.n	800690a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d022      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2205      	movs	r2, #5
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0201 	bic.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d307      	bcc.n	80068e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f2      	bne.n	80068c8 <HAL_DMA_IRQHandler+0x2cc>
 80068e2:	e000      	b.n	80068e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
 8006906:	e000      	b.n	800690a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006908:	bf00      	nop
    }
  }
}
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800692c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d108      	bne.n	8006950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800694e:	e007      	b.n	8006960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	60da      	str	r2, [r3, #12]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	3b10      	subs	r3, #16
 800697c:	4a14      	ldr	r2, [pc, #80]	@ (80069d0 <DMA_CalcBaseAndBitshift+0x64>)
 800697e:	fba2 2303 	umull	r2, r3, r2, r3
 8006982:	091b      	lsrs	r3, r3, #4
 8006984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006986:	4a13      	ldr	r2, [pc, #76]	@ (80069d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b03      	cmp	r3, #3
 8006998:	d909      	bls.n	80069ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80069ac:	e007      	b.n	80069be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	aaaaaaab 	.word	0xaaaaaaab
 80069d4:	0800f368 	.word	0x0800f368

080069d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d11f      	bne.n	8006a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d856      	bhi.n	8006aa6 <DMA_CheckFifoParam+0xce>
 80069f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006a00 <DMA_CheckFifoParam+0x28>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a23 	.word	0x08006a23
 8006a08:	08006a11 	.word	0x08006a11
 8006a0c:	08006aa7 	.word	0x08006aa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d046      	beq.n	8006aaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a20:	e043      	b.n	8006aaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a2a:	d140      	bne.n	8006aae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a30:	e03d      	b.n	8006aae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3a:	d121      	bne.n	8006a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d837      	bhi.n	8006ab2 <DMA_CheckFifoParam+0xda>
 8006a42:	a201      	add	r2, pc, #4	@ (adr r2, 8006a48 <DMA_CheckFifoParam+0x70>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a5f 	.word	0x08006a5f
 8006a50:	08006a59 	.word	0x08006a59
 8006a54:	08006a71 	.word	0x08006a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5c:	e030      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d025      	beq.n	8006ab6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a6e:	e022      	b.n	8006ab6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a78:	d11f      	bne.n	8006aba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a7e:	e01c      	b.n	8006aba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d903      	bls.n	8006a8e <DMA_CheckFifoParam+0xb6>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d003      	beq.n	8006a94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a8c:	e018      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
      break;
 8006a92:	e015      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa4:	e00b      	b.n	8006abe <DMA_CheckFifoParam+0xe6>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e00a      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e008      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8006aae:	bf00      	nop
 8006ab0:	e006      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ab2:	bf00      	nop
 8006ab4:	e004      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ab6:	bf00      	nop
 8006ab8:	e002      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8006abe:	bf00      	nop
    }
  } 
  
  return status; 
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e159      	b.n	8006da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006aec:	2201      	movs	r2, #1
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4013      	ands	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	f040 8148 	bne.w	8006d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d005      	beq.n	8006b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d130      	bne.n	8006b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b58:	2201      	movs	r2, #1
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	43db      	mvns	r3, r3
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4013      	ands	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 0201 	and.w	r2, r3, #1
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d017      	beq.n	8006bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d123      	bne.n	8006c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	08da      	lsrs	r2, r3, #3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3208      	adds	r2, #8
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	220f      	movs	r2, #15
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4013      	ands	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	08da      	lsrs	r2, r3, #3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3208      	adds	r2, #8
 8006c0e:	69b9      	ldr	r1, [r7, #24]
 8006c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	2203      	movs	r2, #3
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0203 	and.w	r2, r3, #3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80a2 	beq.w	8006d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	4b57      	ldr	r3, [pc, #348]	@ (8006db8 <HAL_GPIO_Init+0x2e8>)
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5e:	4a56      	ldr	r2, [pc, #344]	@ (8006db8 <HAL_GPIO_Init+0x2e8>)
 8006c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c66:	4b54      	ldr	r3, [pc, #336]	@ (8006db8 <HAL_GPIO_Init+0x2e8>)
 8006c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c72:	4a52      	ldr	r2, [pc, #328]	@ (8006dbc <HAL_GPIO_Init+0x2ec>)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	089b      	lsrs	r3, r3, #2
 8006c78:	3302      	adds	r3, #2
 8006c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	220f      	movs	r2, #15
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4013      	ands	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a49      	ldr	r2, [pc, #292]	@ (8006dc0 <HAL_GPIO_Init+0x2f0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d019      	beq.n	8006cd2 <HAL_GPIO_Init+0x202>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a48      	ldr	r2, [pc, #288]	@ (8006dc4 <HAL_GPIO_Init+0x2f4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_GPIO_Init+0x1fe>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a47      	ldr	r2, [pc, #284]	@ (8006dc8 <HAL_GPIO_Init+0x2f8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00d      	beq.n	8006cca <HAL_GPIO_Init+0x1fa>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a46      	ldr	r2, [pc, #280]	@ (8006dcc <HAL_GPIO_Init+0x2fc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <HAL_GPIO_Init+0x1f6>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a45      	ldr	r2, [pc, #276]	@ (8006dd0 <HAL_GPIO_Init+0x300>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d101      	bne.n	8006cc2 <HAL_GPIO_Init+0x1f2>
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	e008      	b.n	8006cd4 <HAL_GPIO_Init+0x204>
 8006cc2:	2307      	movs	r3, #7
 8006cc4:	e006      	b.n	8006cd4 <HAL_GPIO_Init+0x204>
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e004      	b.n	8006cd4 <HAL_GPIO_Init+0x204>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e002      	b.n	8006cd4 <HAL_GPIO_Init+0x204>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <HAL_GPIO_Init+0x204>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	f002 0203 	and.w	r2, r2, #3
 8006cda:	0092      	lsls	r2, r2, #2
 8006cdc:	4093      	lsls	r3, r2
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ce4:	4935      	ldr	r1, [pc, #212]	@ (8006dbc <HAL_GPIO_Init+0x2ec>)
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	3302      	adds	r3, #2
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cf2:	4b38      	ldr	r3, [pc, #224]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d16:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d40:	4a24      	ldr	r2, [pc, #144]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d46:	4b23      	ldr	r3, [pc, #140]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	43db      	mvns	r3, r3
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	4013      	ands	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d70:	4b18      	ldr	r3, [pc, #96]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d94:	4a0f      	ldr	r2, [pc, #60]	@ (8006dd4 <HAL_GPIO_Init+0x304>)
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b0f      	cmp	r3, #15
 8006da4:	f67f aea2 	bls.w	8006aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	3724      	adds	r7, #36	@ 0x24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	40013800 	.word	0x40013800
 8006dc0:	40020000 	.word	0x40020000
 8006dc4:	40020400 	.word	0x40020400
 8006dc8:	40020800 	.word	0x40020800
 8006dcc:	40020c00 	.word	0x40020c00
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	40013c00 	.word	0x40013c00

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006df4:	e003      	b.n	8006dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e16:	4b08      	ldr	r3, [pc, #32]	@ (8006e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d006      	beq.n	8006e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e22:	4a05      	ldr	r2, [pc, #20]	@ (8006e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fd fb6c 	bl	8004508 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40013c00 	.word	0x40013c00

08006e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e267      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d075      	beq.n	8006f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e5a:	4b88      	ldr	r3, [pc, #544]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00c      	beq.n	8006e80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e66:	4b85      	ldr	r3, [pc, #532]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d112      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e72:	4b82      	ldr	r3, [pc, #520]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e7e:	d10b      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e80:	4b7e      	ldr	r3, [pc, #504]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d05b      	beq.n	8006f44 <HAL_RCC_OscConfig+0x108>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d157      	bne.n	8006f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e242      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea0:	d106      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x74>
 8006ea2:	4b76      	ldr	r3, [pc, #472]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a75      	ldr	r2, [pc, #468]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e01d      	b.n	8006eec <HAL_RCC_OscConfig+0xb0>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x98>
 8006eba:	4b70      	ldr	r3, [pc, #448]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6c      	ldr	r2, [pc, #432]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e00b      	b.n	8006eec <HAL_RCC_OscConfig+0xb0>
 8006ed4:	4b69      	ldr	r3, [pc, #420]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a68      	ldr	r2, [pc, #416]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	4b66      	ldr	r3, [pc, #408]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a65      	ldr	r2, [pc, #404]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d013      	beq.n	8006f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef4:	f7ff f8a8 	bl	8006048 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006efc:	f7ff f8a4 	bl	8006048 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b64      	cmp	r3, #100	@ 0x64
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e207      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0xc0>
 8006f1a:	e014      	b.n	8006f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1c:	f7ff f894 	bl	8006048 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f24:	f7ff f890 	bl	8006048 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	@ 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e1f3      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f36:	4b51      	ldr	r3, [pc, #324]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f0      	bne.n	8006f24 <HAL_RCC_OscConfig+0xe8>
 8006f42:	e000      	b.n	8006f46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d063      	beq.n	800701a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f52:	4b4a      	ldr	r3, [pc, #296]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 030c 	and.w	r3, r3, #12
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f5e:	4b47      	ldr	r3, [pc, #284]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d11c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f6a:	4b44      	ldr	r3, [pc, #272]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d116      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f76:	4b41      	ldr	r3, [pc, #260]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_RCC_OscConfig+0x152>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e1c7      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4937      	ldr	r1, [pc, #220]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fa2:	e03a      	b.n	800701a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d020      	beq.n	8006fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fac:	4b34      	ldr	r3, [pc, #208]	@ (8007080 <HAL_RCC_OscConfig+0x244>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb2:	f7ff f849 	bl	8006048 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fba:	f7ff f845 	bl	8006048 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e1a8      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd8:	4b28      	ldr	r3, [pc, #160]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4925      	ldr	r1, [pc, #148]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	600b      	str	r3, [r1, #0]
 8006fec:	e015      	b.n	800701a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fee:	4b24      	ldr	r3, [pc, #144]	@ (8007080 <HAL_RCC_OscConfig+0x244>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7ff f828 	bl	8006048 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ffc:	f7ff f824 	bl	8006048 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e187      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800700e:	4b1b      	ldr	r3, [pc, #108]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f0      	bne.n	8006ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d036      	beq.n	8007094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d016      	beq.n	800705c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800702e:	4b15      	ldr	r3, [pc, #84]	@ (8007084 <HAL_RCC_OscConfig+0x248>)
 8007030:	2201      	movs	r2, #1
 8007032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007034:	f7ff f808 	bl	8006048 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800703c:	f7ff f804 	bl	8006048 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e167      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <HAL_RCC_OscConfig+0x240>)
 8007050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0x200>
 800705a:	e01b      	b.n	8007094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800705c:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <HAL_RCC_OscConfig+0x248>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007062:	f7fe fff1 	bl	8006048 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007068:	e00e      	b.n	8007088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800706a:	f7fe ffed 	bl	8006048 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d907      	bls.n	8007088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e150      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
 800707c:	40023800 	.word	0x40023800
 8007080:	42470000 	.word	0x42470000
 8007084:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007088:	4b88      	ldr	r3, [pc, #544]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800708a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1ea      	bne.n	800706a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8097 	beq.w	80071d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070a6:	4b81      	ldr	r3, [pc, #516]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10f      	bne.n	80070d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	4b7d      	ldr	r3, [pc, #500]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80070b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ba:	4a7c      	ldr	r2, [pc, #496]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80070bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80070c2:	4b7a      	ldr	r3, [pc, #488]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d2:	4b77      	ldr	r3, [pc, #476]	@ (80072b0 <HAL_RCC_OscConfig+0x474>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d118      	bne.n	8007110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070de:	4b74      	ldr	r3, [pc, #464]	@ (80072b0 <HAL_RCC_OscConfig+0x474>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a73      	ldr	r2, [pc, #460]	@ (80072b0 <HAL_RCC_OscConfig+0x474>)
 80070e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ea:	f7fe ffad 	bl	8006048 <HAL_GetTick>
 80070ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f2:	f7fe ffa9 	bl	8006048 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e10c      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007104:	4b6a      	ldr	r3, [pc, #424]	@ (80072b0 <HAL_RCC_OscConfig+0x474>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0f0      	beq.n	80070f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d106      	bne.n	8007126 <HAL_RCC_OscConfig+0x2ea>
 8007118:	4b64      	ldr	r3, [pc, #400]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800711a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711c:	4a63      	ldr	r2, [pc, #396]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	6713      	str	r3, [r2, #112]	@ 0x70
 8007124:	e01c      	b.n	8007160 <HAL_RCC_OscConfig+0x324>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b05      	cmp	r3, #5
 800712c:	d10c      	bne.n	8007148 <HAL_RCC_OscConfig+0x30c>
 800712e:	4b5f      	ldr	r3, [pc, #380]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007132:	4a5e      	ldr	r2, [pc, #376]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007134:	f043 0304 	orr.w	r3, r3, #4
 8007138:	6713      	str	r3, [r2, #112]	@ 0x70
 800713a:	4b5c      	ldr	r3, [pc, #368]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800713c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713e:	4a5b      	ldr	r2, [pc, #364]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007140:	f043 0301 	orr.w	r3, r3, #1
 8007144:	6713      	str	r3, [r2, #112]	@ 0x70
 8007146:	e00b      	b.n	8007160 <HAL_RCC_OscConfig+0x324>
 8007148:	4b58      	ldr	r3, [pc, #352]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714c:	4a57      	ldr	r2, [pc, #348]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	6713      	str	r3, [r2, #112]	@ 0x70
 8007154:	4b55      	ldr	r3, [pc, #340]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007158:	4a54      	ldr	r2, [pc, #336]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 800715a:	f023 0304 	bic.w	r3, r3, #4
 800715e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d015      	beq.n	8007194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007168:	f7fe ff6e 	bl	8006048 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800716e:	e00a      	b.n	8007186 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007170:	f7fe ff6a 	bl	8006048 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e0cb      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007186:	4b49      	ldr	r3, [pc, #292]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0ee      	beq.n	8007170 <HAL_RCC_OscConfig+0x334>
 8007192:	e014      	b.n	80071be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007194:	f7fe ff58 	bl	8006048 <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800719a:	e00a      	b.n	80071b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800719c:	f7fe ff54 	bl	8006048 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e0b5      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b2:	4b3e      	ldr	r3, [pc, #248]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1ee      	bne.n	800719c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c4:	4b39      	ldr	r3, [pc, #228]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	4a38      	ldr	r2, [pc, #224]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a1 	beq.w	800731c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071da:	4b34      	ldr	r3, [pc, #208]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d05c      	beq.n	80072a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d141      	bne.n	8007272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_RCC_OscConfig+0x478>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f4:	f7fe ff28 	bl	8006048 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fc:	f7fe ff24 	bl	8006048 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e087      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800720e:	4b27      	ldr	r3, [pc, #156]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	019b      	lsls	r3, r3, #6
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	3b01      	subs	r3, #1
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723c:	061b      	lsls	r3, r3, #24
 800723e:	491b      	ldr	r1, [pc, #108]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007240:	4313      	orrs	r3, r2
 8007242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007244:	4b1b      	ldr	r3, [pc, #108]	@ (80072b4 <HAL_RCC_OscConfig+0x478>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724a:	f7fe fefd 	bl	8006048 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007252:	f7fe fef9 	bl	8006048 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e05c      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007264:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x416>
 8007270:	e054      	b.n	800731c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007272:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <HAL_RCC_OscConfig+0x478>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007278:	f7fe fee6 	bl	8006048 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007280:	f7fe fee2 	bl	8006048 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e045      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <HAL_RCC_OscConfig+0x470>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x444>
 800729e:	e03d      	b.n	800731c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d107      	bne.n	80072b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e038      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40007000 	.word	0x40007000
 80072b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <HAL_RCC_OscConfig+0x4ec>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d028      	beq.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d121      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d11a      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072e8:	4013      	ands	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d111      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	3b01      	subs	r3, #1
 8007302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007304:	429a      	cmp	r2, r3
 8007306:	d107      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800

0800732c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0cc      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007340:	4b68      	ldr	r3, [pc, #416]	@ (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d90c      	bls.n	8007368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b65      	ldr	r3, [pc, #404]	@ (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b63      	ldr	r3, [pc, #396]	@ (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d001      	beq.n	8007368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0b8      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d020      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007380:	4b59      	ldr	r3, [pc, #356]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a58      	ldr	r2, [pc, #352]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800738a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007398:	4b53      	ldr	r3, [pc, #332]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4a52      	ldr	r2, [pc, #328]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80073a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a4:	4b50      	ldr	r3, [pc, #320]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	494d      	ldr	r1, [pc, #308]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d044      	beq.n	800744c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d107      	bne.n	80073da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ca:	4b47      	ldr	r3, [pc, #284]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d119      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e07f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d003      	beq.n	80073ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ea:	4b3f      	ldr	r3, [pc, #252]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e06f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fa:	4b3b      	ldr	r3, [pc, #236]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e067      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800740a:	4b37      	ldr	r3, [pc, #220]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f023 0203 	bic.w	r2, r3, #3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	4934      	ldr	r1, [pc, #208]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	4313      	orrs	r3, r2
 800741a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800741c:	f7fe fe14 	bl	8006048 <HAL_GetTick>
 8007420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007422:	e00a      	b.n	800743a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007424:	f7fe fe10 	bl	8006048 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e04f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	4b2b      	ldr	r3, [pc, #172]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 020c 	and.w	r2, r3, #12
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	429a      	cmp	r2, r3
 800744a:	d1eb      	bne.n	8007424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800744c:	4b25      	ldr	r3, [pc, #148]	@ (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d20c      	bcs.n	8007474 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745a:	4b22      	ldr	r3, [pc, #136]	@ (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007462:	4b20      	ldr	r3, [pc, #128]	@ (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d001      	beq.n	8007474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e032      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007480:	4b19      	ldr	r3, [pc, #100]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	4916      	ldr	r1, [pc, #88]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800749e:	4b12      	ldr	r3, [pc, #72]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	490e      	ldr	r1, [pc, #56]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074b2:	f000 f821 	bl	80074f8 <HAL_RCC_GetSysClockFreq>
 80074b6:	4602      	mov	r2, r0
 80074b8:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	490a      	ldr	r1, [pc, #40]	@ (80074ec <HAL_RCC_ClockConfig+0x1c0>)
 80074c4:	5ccb      	ldrb	r3, [r1, r3]
 80074c6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ca:	4a09      	ldr	r2, [pc, #36]	@ (80074f0 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80074ce:	4b09      	ldr	r3, [pc, #36]	@ (80074f4 <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fd74 	bl	8005fc0 <HAL_InitTick>

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40023c00 	.word	0x40023c00
 80074e8:	40023800 	.word	0x40023800
 80074ec:	0800f350 	.word	0x0800f350
 80074f0:	2000001c 	.word	0x2000001c
 80074f4:	20000020 	.word	0x20000020

080074f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074fc:	b094      	sub	sp, #80	@ 0x50
 80074fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007510:	4b79      	ldr	r3, [pc, #484]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 030c 	and.w	r3, r3, #12
 8007518:	2b08      	cmp	r3, #8
 800751a:	d00d      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x40>
 800751c:	2b08      	cmp	r3, #8
 800751e:	f200 80e1 	bhi.w	80076e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_RCC_GetSysClockFreq+0x34>
 8007526:	2b04      	cmp	r3, #4
 8007528:	d003      	beq.n	8007532 <HAL_RCC_GetSysClockFreq+0x3a>
 800752a:	e0db      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800752c:	4b73      	ldr	r3, [pc, #460]	@ (80076fc <HAL_RCC_GetSysClockFreq+0x204>)
 800752e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007530:	e0db      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007532:	4b73      	ldr	r3, [pc, #460]	@ (8007700 <HAL_RCC_GetSysClockFreq+0x208>)
 8007534:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007536:	e0d8      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007538:	4b6f      	ldr	r3, [pc, #444]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007540:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007542:	4b6d      	ldr	r3, [pc, #436]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d063      	beq.n	8007616 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800754e:	4b6a      	ldr	r3, [pc, #424]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	099b      	lsrs	r3, r3, #6
 8007554:	2200      	movs	r2, #0
 8007556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007558:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007560:	633b      	str	r3, [r7, #48]	@ 0x30
 8007562:	2300      	movs	r3, #0
 8007564:	637b      	str	r3, [r7, #52]	@ 0x34
 8007566:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800756a:	4622      	mov	r2, r4
 800756c:	462b      	mov	r3, r5
 800756e:	f04f 0000 	mov.w	r0, #0
 8007572:	f04f 0100 	mov.w	r1, #0
 8007576:	0159      	lsls	r1, r3, #5
 8007578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800757c:	0150      	lsls	r0, r2, #5
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4621      	mov	r1, r4
 8007584:	1a51      	subs	r1, r2, r1
 8007586:	6139      	str	r1, [r7, #16]
 8007588:	4629      	mov	r1, r5
 800758a:	eb63 0301 	sbc.w	r3, r3, r1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800759c:	4659      	mov	r1, fp
 800759e:	018b      	lsls	r3, r1, #6
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075a6:	4651      	mov	r1, sl
 80075a8:	018a      	lsls	r2, r1, #6
 80075aa:	4651      	mov	r1, sl
 80075ac:	ebb2 0801 	subs.w	r8, r2, r1
 80075b0:	4659      	mov	r1, fp
 80075b2:	eb63 0901 	sbc.w	r9, r3, r1
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075ca:	4690      	mov	r8, r2
 80075cc:	4699      	mov	r9, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	eb18 0303 	adds.w	r3, r8, r3
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	462b      	mov	r3, r5
 80075d8:	eb49 0303 	adc.w	r3, r9, r3
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075ea:	4629      	mov	r1, r5
 80075ec:	024b      	lsls	r3, r1, #9
 80075ee:	4621      	mov	r1, r4
 80075f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80075f4:	4621      	mov	r1, r4
 80075f6:	024a      	lsls	r2, r1, #9
 80075f8:	4610      	mov	r0, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fe:	2200      	movs	r2, #0
 8007600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007604:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007608:	f7f9 faf6 	bl	8000bf8 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4613      	mov	r3, r2
 8007612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007614:	e058      	b.n	80076c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007616:	4b38      	ldr	r3, [pc, #224]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	099b      	lsrs	r3, r3, #6
 800761c:	2200      	movs	r2, #0
 800761e:	4618      	mov	r0, r3
 8007620:	4611      	mov	r1, r2
 8007622:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007626:	623b      	str	r3, [r7, #32]
 8007628:	2300      	movs	r3, #0
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
 800762c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	0159      	lsls	r1, r3, #5
 800763e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007642:	0150      	lsls	r0, r2, #5
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4641      	mov	r1, r8
 800764a:	ebb2 0a01 	subs.w	sl, r2, r1
 800764e:	4649      	mov	r1, r9
 8007650:	eb63 0b01 	sbc.w	fp, r3, r1
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007660:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007664:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007668:	ebb2 040a 	subs.w	r4, r2, sl
 800766c:	eb63 050b 	sbc.w	r5, r3, fp
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	00eb      	lsls	r3, r5, #3
 800767a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800767e:	00e2      	lsls	r2, r4, #3
 8007680:	4614      	mov	r4, r2
 8007682:	461d      	mov	r5, r3
 8007684:	4643      	mov	r3, r8
 8007686:	18e3      	adds	r3, r4, r3
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	464b      	mov	r3, r9
 800768c:	eb45 0303 	adc.w	r3, r5, r3
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800769e:	4629      	mov	r1, r5
 80076a0:	028b      	lsls	r3, r1, #10
 80076a2:	4621      	mov	r1, r4
 80076a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076a8:	4621      	mov	r1, r4
 80076aa:	028a      	lsls	r2, r1, #10
 80076ac:	4610      	mov	r0, r2
 80076ae:	4619      	mov	r1, r3
 80076b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b2:	2200      	movs	r2, #0
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	61fa      	str	r2, [r7, #28]
 80076b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076bc:	f7f9 fa9c 	bl	8000bf8 <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4613      	mov	r3, r2
 80076c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80076c8:	4b0b      	ldr	r3, [pc, #44]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	3301      	adds	r3, #1
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80076d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076e2:	e002      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <HAL_RCC_GetSysClockFreq+0x204>)
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3750      	adds	r7, #80	@ 0x50
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800
 80076fc:	00f42400 	.word	0x00f42400
 8007700:	007a1200 	.word	0x007a1200

08007704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007708:	4b03      	ldr	r3, [pc, #12]	@ (8007718 <HAL_RCC_GetHCLKFreq+0x14>)
 800770a:	681b      	ldr	r3, [r3, #0]
}
 800770c:	4618      	mov	r0, r3
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	2000001c 	.word	0x2000001c

0800771c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007720:	f7ff fff0 	bl	8007704 <HAL_RCC_GetHCLKFreq>
 8007724:	4602      	mov	r2, r0
 8007726:	4b05      	ldr	r3, [pc, #20]	@ (800773c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	0a9b      	lsrs	r3, r3, #10
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	4903      	ldr	r1, [pc, #12]	@ (8007740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007732:	5ccb      	ldrb	r3, [r1, r3]
 8007734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007738:	4618      	mov	r0, r3
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40023800 	.word	0x40023800
 8007740:	0800f360 	.word	0x0800f360

08007744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007748:	f7ff ffdc 	bl	8007704 <HAL_RCC_GetHCLKFreq>
 800774c:	4602      	mov	r2, r0
 800774e:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	0b5b      	lsrs	r3, r3, #13
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	4903      	ldr	r1, [pc, #12]	@ (8007768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800775a:	5ccb      	ldrb	r3, [r1, r3]
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40023800 	.word	0x40023800
 8007768:	0800f360 	.word	0x0800f360

0800776c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e07b      	b.n	8007876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d108      	bne.n	8007798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800778e:	d009      	beq.n	80077a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	61da      	str	r2, [r3, #28]
 8007796:	e005      	b.n	80077a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fd fef6 	bl	80055b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007828:	ea42 0103 	orr.w	r1, r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	f003 0104 	and.w	r1, r3, #4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784a:	f003 0210 	and.w	r2, r3, #16
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b088      	sub	sp, #32
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788e:	f7fe fbdb 	bl	8006048 <HAL_GetTick>
 8007892:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d001      	beq.n	80078a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80078a4:	2302      	movs	r3, #2
 80078a6:	e12a      	b.n	8007afe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Transmit+0x36>
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e122      	b.n	8007afe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_SPI_Transmit+0x48>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e11b      	b.n	8007afe <HAL_SPI_Transmit+0x280>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	88fa      	ldrh	r2, [r7, #6]
 80078e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007914:	d10f      	bne.n	8007936 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b40      	cmp	r3, #64	@ 0x40
 8007942:	d007      	beq.n	8007954 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800795c:	d152      	bne.n	8007a04 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_SPI_Transmit+0xee>
 8007966:	8b7b      	ldrh	r3, [r7, #26]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d145      	bne.n	80079f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007970:	881a      	ldrh	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797c:	1c9a      	adds	r2, r3, #2
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007990:	e032      	b.n	80079f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d112      	bne.n	80079c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a4:	881a      	ldrh	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b0:	1c9a      	adds	r2, r3, #2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079c4:	e018      	b.n	80079f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c6:	f7fe fb3f 	bl	8006048 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d803      	bhi.n	80079de <HAL_SPI_Transmit+0x160>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079dc:	d102      	bne.n	80079e4 <HAL_SPI_Transmit+0x166>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d109      	bne.n	80079f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e082      	b.n	8007afe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1c7      	bne.n	8007992 <HAL_SPI_Transmit+0x114>
 8007a02:	e053      	b.n	8007aac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_SPI_Transmit+0x194>
 8007a0c:	8b7b      	ldrh	r3, [r7, #26]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d147      	bne.n	8007aa2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330c      	adds	r3, #12
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a38:	e033      	b.n	8007aa2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d113      	bne.n	8007a70 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a6e:	e018      	b.n	8007aa2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a70:	f7fe faea 	bl	8006048 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d803      	bhi.n	8007a88 <HAL_SPI_Transmit+0x20a>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a86:	d102      	bne.n	8007a8e <HAL_SPI_Transmit+0x210>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e02d      	b.n	8007afe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1c6      	bne.n	8007a3a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fe29 	bl	8008708 <SPI_EndRxTxTransaction>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aca:	2300      	movs	r3, #0
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	617b      	str	r3, [r7, #20]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b088      	sub	sp, #32
 8007b0a:	af02      	add	r7, sp, #8
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d001      	beq.n	8007b26 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	e104      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b2e:	d112      	bne.n	8007b56 <HAL_SPI_Receive+0x50>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10e      	bne.n	8007b56 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b40:	88fa      	ldrh	r2, [r7, #6]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4613      	mov	r3, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f8f3 	bl	8007d38 <HAL_SPI_TransmitReceive>
 8007b52:	4603      	mov	r3, r0
 8007b54:	e0ec      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b56:	f7fe fa77 	bl	8006048 <HAL_GetTick>
 8007b5a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_SPI_Receive+0x62>
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0e1      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_SPI_Receive+0x74>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e0da      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2204      	movs	r2, #4
 8007b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	88fa      	ldrh	r2, [r7, #6]
 8007b9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc8:	d10f      	bne.n	8007bea <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007be8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b40      	cmp	r3, #64	@ 0x40
 8007bf6:	d007      	beq.n	8007c08 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d170      	bne.n	8007cf2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c10:	e035      	b.n	8007c7e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d115      	bne.n	8007c4c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f103 020c 	add.w	r2, r3, #12
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c4a:	e018      	b.n	8007c7e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c4c:	f7fe f9fc 	bl	8006048 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d803      	bhi.n	8007c64 <HAL_SPI_Receive+0x15e>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d102      	bne.n	8007c6a <HAL_SPI_Receive+0x164>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e058      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1c4      	bne.n	8007c12 <HAL_SPI_Receive+0x10c>
 8007c88:	e038      	b.n	8007cfc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d113      	bne.n	8007cc0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	b292      	uxth	r2, r2
 8007ca4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007caa:	1c9a      	adds	r2, r3, #2
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007cbe:	e018      	b.n	8007cf2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc0:	f7fe f9c2 	bl	8006048 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d803      	bhi.n	8007cd8 <HAL_SPI_Receive+0x1d2>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd6:	d102      	bne.n	8007cde <HAL_SPI_Receive+0x1d8>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e01e      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1c6      	bne.n	8007c8a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fc9b 	bl	800863c <SPI_EndRxTransaction>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
  }
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	@ 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d46:	2301      	movs	r3, #1
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d4a:	f7fe f97d 	bl	8006048 <HAL_GetTick>
 8007d4e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d56:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007d5e:	887b      	ldrh	r3, [r7, #2]
 8007d60:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d00c      	beq.n	8007d82 <HAL_SPI_TransmitReceive+0x4a>
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d6e:	d106      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x46>
 8007d78:	7ffb      	ldrb	r3, [r7, #31]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d001      	beq.n	8007d82 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e17f      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_SPI_TransmitReceive+0x5c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <HAL_SPI_TransmitReceive+0x5c>
 8007d8e:	887b      	ldrh	r3, [r7, #2]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e174      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x6e>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e16d      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d003      	beq.n	8007dc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	887a      	ldrh	r2, [r7, #2]
 8007dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	887a      	ldrh	r2, [r7, #2]
 8007dd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	887a      	ldrh	r2, [r7, #2]
 8007de4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	887a      	ldrh	r2, [r7, #2]
 8007dea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e02:	2b40      	cmp	r3, #64	@ 0x40
 8007e04:	d007      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e1e:	d17e      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_SPI_TransmitReceive+0xf6>
 8007e28:	8afb      	ldrh	r3, [r7, #22]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d16c      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e32:	881a      	ldrh	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3e:	1c9a      	adds	r2, r3, #2
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e52:	e059      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d11b      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x162>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d016      	beq.n	8007e9a <HAL_SPI_TransmitReceive+0x162>
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d113      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	881a      	ldrh	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e82:	1c9a      	adds	r2, r3, #2
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d119      	bne.n	8007edc <HAL_SPI_TransmitReceive+0x1a4>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d014      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebc:	b292      	uxth	r2, r2
 8007ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec4:	1c9a      	adds	r2, r3, #2
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007edc:	f7fe f8b4 	bl	8006048 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d80d      	bhi.n	8007f08 <HAL_SPI_TransmitReceive+0x1d0>
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d009      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e0bc      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1a0      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x11c>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d19b      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x11c>
 8007f1c:	e082      	b.n	8008024 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <HAL_SPI_TransmitReceive+0x1f4>
 8007f26:	8afb      	ldrh	r3, [r7, #22]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d171      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	7812      	ldrb	r2, [r2, #0]
 8007f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f52:	e05d      	b.n	8008010 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d11c      	bne.n	8007f9c <HAL_SPI_TransmitReceive+0x264>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d017      	beq.n	8007f9c <HAL_SPI_TransmitReceive+0x264>
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d114      	bne.n	8007f9c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	7812      	ldrb	r2, [r2, #0]
 8007f7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d119      	bne.n	8007fde <HAL_SPI_TransmitReceive+0x2a6>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d014      	beq.n	8007fde <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fde:	f7fe f833 	bl	8006048 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d803      	bhi.n	8007ff6 <HAL_SPI_TransmitReceive+0x2be>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff4:	d102      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x2c4>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d109      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e038      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d19c      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x21c>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800801e:	b29b      	uxth	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d197      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008024:	6a3a      	ldr	r2, [r7, #32]
 8008026:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fb6d 	bl	8008708 <SPI_EndRxTxTransaction>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2220      	movs	r2, #32
 8008038:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e01d      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008080:	2300      	movs	r3, #0
  }
}
 8008082:	4618      	mov	r0, r3
 8008084:	3728      	adds	r7, #40	@ 0x28
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d001      	beq.n	80080aa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80080a6:	2302      	movs	r3, #2
 80080a8:	e097      	b.n	80081da <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <HAL_SPI_Transmit_DMA+0x2a>
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e08f      	b.n	80081da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_SPI_Transmit_DMA+0x3c>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e088      	b.n	80081da <HAL_SPI_Transmit_DMA+0x14e>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2203      	movs	r2, #3
 80080d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	88fa      	ldrh	r2, [r7, #6]
 80080e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	88fa      	ldrh	r2, [r7, #6]
 80080ee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008116:	d10f      	bne.n	8008138 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008136:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813c:	4a29      	ldr	r2, [pc, #164]	@ (80081e4 <HAL_SPI_Transmit_DMA+0x158>)
 800813e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008144:	4a28      	ldr	r2, [pc, #160]	@ (80081e8 <HAL_SPI_Transmit_DMA+0x15c>)
 8008146:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814c:	4a27      	ldr	r2, [pc, #156]	@ (80081ec <HAL_SPI_Transmit_DMA+0x160>)
 800814e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008154:	2200      	movs	r2, #0
 8008156:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008160:	4619      	mov	r1, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800816e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008170:	f7fe f95a 	bl	8006428 <HAL_DMA_Start_IT>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817e:	f043 0210 	orr.w	r2, r3, #16
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e023      	b.n	80081da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	d007      	beq.n	80081b0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081ae:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0220 	orr.w	r2, r2, #32
 80081c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0202 	orr.w	r2, r2, #2
 80081d6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	080084a9 	.word	0x080084a9
 80081e8:	08008401 	.word	0x08008401
 80081ec:	080084c5 	.word	0x080084c5

080081f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10e      	bne.n	8008230 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008218:	2b00      	cmp	r3, #0
 800821a:	d009      	beq.n	8008230 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
    return;
 800822e:	e0ce      	b.n	80083ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <HAL_SPI_IRQHandler+0x5e>
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	4798      	blx	r3
    return;
 800824c:	e0bf      	b.n	80083ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <HAL_SPI_IRQHandler+0x7e>
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80b0 	beq.w	80083ce <HAL_SPI_IRQHandler+0x1de>
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 80aa 	beq.w	80083ce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d023      	beq.n	80082cc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b03      	cmp	r3, #3
 800828e:	d011      	beq.n	80082b4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008294:	f043 0204 	orr.w	r2, r3, #4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	e00b      	b.n	80082cc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082b4:	2300      	movs	r3, #0
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	693b      	ldr	r3, [r7, #16]
        return;
 80082ca:	e080      	b.n	80083ce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d014      	beq.n	8008300 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	f043 0201 	orr.w	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830e:	f043 0208 	orr.w	r2, r3, #8
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008328:	2b00      	cmp	r3, #0
 800832a:	d04f      	beq.n	80083cc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800833a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <HAL_SPI_IRQHandler+0x168>
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d034      	beq.n	80083c2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0203 	bic.w	r2, r2, #3
 8008366:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d011      	beq.n	8008394 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008374:	4a17      	ldr	r2, [pc, #92]	@ (80083d4 <HAL_SPI_IRQHandler+0x1e4>)
 8008376:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe f91b 	bl	80065b8 <HAL_DMA_Abort_IT>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008398:	2b00      	cmp	r3, #0
 800839a:	d016      	beq.n	80083ca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083a0:	4a0c      	ldr	r2, [pc, #48]	@ (80083d4 <HAL_SPI_IRQHandler+0x1e4>)
 80083a2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fe f905 	bl	80065b8 <HAL_DMA_Abort_IT>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80083c0:	e003      	b.n	80083ca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f812 	bl	80083ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083c8:	e000      	b.n	80083cc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80083ca:	bf00      	nop
    return;
 80083cc:	bf00      	nop
  }
}
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	08008505 	.word	0x08008505

080083d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800840e:	f7fd fe1b 	bl	8006048 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008422:	d03b      	beq.n	800849c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0220 	bic.w	r2, r2, #32
 8008432:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0202 	bic.w	r2, r2, #2
 8008442:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	2164      	movs	r1, #100	@ 0x64
 8008448:	6978      	ldr	r0, [r7, #20]
 800844a:	f000 f95d 	bl	8008708 <SPI_EndRxTxTransaction>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008458:	f043 0220 	orr.w	r2, r3, #32
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2200      	movs	r2, #0
 8008482:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008494:	6978      	ldr	r0, [r7, #20]
 8008496:	f7ff ffa9 	bl	80083ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800849a:	e002      	b.n	80084a2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800849c:	6978      	ldr	r0, [r7, #20]
 800849e:	f7f9 fcad 	bl	8001dfc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff ff8e 	bl	80083d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0203 	bic.w	r2, r2, #3
 80084e0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e6:	f043 0210 	orr.w	r2, r3, #16
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff ff78 	bl	80083ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff ff64 	bl	80083ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	4613      	mov	r3, r2
 800853a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800853c:	f7fd fd84 	bl	8006048 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4413      	add	r3, r2
 800854a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800854c:	f7fd fd7c 	bl	8006048 <HAL_GetTick>
 8008550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008552:	4b39      	ldr	r3, [pc, #228]	@ (8008638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	015b      	lsls	r3, r3, #5
 8008558:	0d1b      	lsrs	r3, r3, #20
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	fb02 f303 	mul.w	r3, r2, r3
 8008560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008562:	e054      	b.n	800860e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d050      	beq.n	800860e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800856c:	f7fd fd6c 	bl	8006048 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	429a      	cmp	r2, r3
 800857a:	d902      	bls.n	8008582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d13d      	bne.n	80085fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800859a:	d111      	bne.n	80085c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085a4:	d004      	beq.n	80085b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ae:	d107      	bne.n	80085c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c8:	d10f      	bne.n	80085ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e017      	b.n	800862e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	3b01      	subs	r3, #1
 800860c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4013      	ands	r3, r2
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	bf0c      	ite	eq
 800861e:	2301      	moveq	r3, #1
 8008620:	2300      	movne	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	461a      	mov	r2, r3
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	429a      	cmp	r2, r3
 800862a:	d19b      	bne.n	8008564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	2000001c 	.word	0x2000001c

0800863c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af02      	add	r7, sp, #8
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008650:	d111      	bne.n	8008676 <SPI_EndRxTransaction+0x3a>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800865a:	d004      	beq.n	8008666 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008664:	d107      	bne.n	8008676 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008674:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800867e:	d12a      	bne.n	80086d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008688:	d012      	beq.n	80086b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2200      	movs	r2, #0
 8008692:	2180      	movs	r1, #128	@ 0x80
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff ff49 	bl	800852c <SPI_WaitFlagStateUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d02d      	beq.n	80086fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a4:	f043 0220 	orr.w	r2, r3, #32
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e026      	b.n	80086fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	2101      	movs	r1, #1
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff ff36 	bl	800852c <SPI_WaitFlagStateUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01a      	beq.n	80086fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ca:	f043 0220 	orr.w	r2, r3, #32
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e013      	b.n	80086fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2200      	movs	r2, #0
 80086de:	2101      	movs	r1, #1
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff ff23 	bl	800852c <SPI_WaitFlagStateUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f0:	f043 0220 	orr.w	r2, r3, #32
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e000      	b.n	80086fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af02      	add	r7, sp, #8
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2201      	movs	r2, #1
 800871c:	2102      	movs	r1, #2
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff ff04 	bl	800852c <SPI_WaitFlagStateUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872e:	f043 0220 	orr.w	r2, r3, #32
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e032      	b.n	80087a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800873a:	4b1b      	ldr	r3, [pc, #108]	@ (80087a8 <SPI_EndRxTxTransaction+0xa0>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a1b      	ldr	r2, [pc, #108]	@ (80087ac <SPI_EndRxTxTransaction+0xa4>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	0d5b      	lsrs	r3, r3, #21
 8008746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008758:	d112      	bne.n	8008780 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2200      	movs	r2, #0
 8008762:	2180      	movs	r1, #128	@ 0x80
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fee1 	bl	800852c <SPI_WaitFlagStateUntilTimeout>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d016      	beq.n	800879e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008774:	f043 0220 	orr.w	r2, r3, #32
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e00f      	b.n	80087a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	3b01      	subs	r3, #1
 800878a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008796:	2b80      	cmp	r3, #128	@ 0x80
 8008798:	d0f2      	beq.n	8008780 <SPI_EndRxTxTransaction+0x78>
 800879a:	e000      	b.n	800879e <SPI_EndRxTxTransaction+0x96>
        break;
 800879c:	bf00      	nop
  }

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	2000001c 	.word	0x2000001c
 80087ac:	165e9f81 	.word	0x165e9f81

080087b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e041      	b.n	8008846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7fc ffee 	bl	80057b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f000 fa70 	bl	8008cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b01      	cmp	r3, #1
 8008862:	d001      	beq.n	8008868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e044      	b.n	80088f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1e      	ldr	r2, [pc, #120]	@ (8008900 <HAL_TIM_Base_Start_IT+0xb0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0x6c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008892:	d013      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0x6c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1a      	ldr	r2, [pc, #104]	@ (8008904 <HAL_TIM_Base_Start_IT+0xb4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0x6c>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a19      	ldr	r2, [pc, #100]	@ (8008908 <HAL_TIM_Base_Start_IT+0xb8>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0x6c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a17      	ldr	r2, [pc, #92]	@ (800890c <HAL_TIM_Base_Start_IT+0xbc>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0x6c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a16      	ldr	r2, [pc, #88]	@ (8008910 <HAL_TIM_Base_Start_IT+0xc0>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d111      	bne.n	80088e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b06      	cmp	r3, #6
 80088cc:	d010      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 0201 	orr.w	r2, r2, #1
 80088dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088de:	e007      	b.n	80088f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0201 	orr.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40010000 	.word	0x40010000
 8008904:	40000400 	.word	0x40000400
 8008908:	40000800 	.word	0x40000800
 800890c:	40000c00 	.word	0x40000c00
 8008910:	40014000 	.word	0x40014000

08008914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d020      	beq.n	8008978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01b      	beq.n	8008978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f06f 0202 	mvn.w	r2, #2
 8008948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f999 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
 8008964:	e005      	b.n	8008972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f98b 	bl	8008c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f99c 	bl	8008caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	2b00      	cmp	r3, #0
 8008980:	d020      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01b      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f06f 0204 	mvn.w	r2, #4
 8008994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f973 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
 80089b0:	e005      	b.n	80089be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f965 	bl	8008c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f976 	bl	8008caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d020      	beq.n	8008a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f06f 0208 	mvn.w	r2, #8
 80089e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f94d 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
 80089fc:	e005      	b.n	8008a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f93f 	bl	8008c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f950 	bl	8008caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d020      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0310 	and.w	r3, r3, #16
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01b      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0210 	mvn.w	r2, #16
 8008a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2208      	movs	r2, #8
 8008a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f927 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
 8008a48:	e005      	b.n	8008a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f919 	bl	8008c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f92a 	bl	8008caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00c      	beq.n	8008a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f06f 0201 	mvn.w	r2, #1
 8008a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fb fd10 	bl	80044a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00c      	beq.n	8008aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fab6 	bl	8009010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00c      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f8fb 	bl	8008cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f06f 0220 	mvn.w	r2, #32
 8008ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa88 	bl	8008ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aec:	bf00      	nop
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_TIM_ConfigClockSource+0x1c>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e0b4      	b.n	8008c7a <HAL_TIM_ConfigClockSource+0x186>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b48:	d03e      	beq.n	8008bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8008b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b4e:	f200 8087 	bhi.w	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b56:	f000 8086 	beq.w	8008c66 <HAL_TIM_ConfigClockSource+0x172>
 8008b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b5e:	d87f      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b70      	cmp	r3, #112	@ 0x70
 8008b62:	d01a      	beq.n	8008b9a <HAL_TIM_ConfigClockSource+0xa6>
 8008b64:	2b70      	cmp	r3, #112	@ 0x70
 8008b66:	d87b      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b68:	2b60      	cmp	r3, #96	@ 0x60
 8008b6a:	d050      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0x11a>
 8008b6c:	2b60      	cmp	r3, #96	@ 0x60
 8008b6e:	d877      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b70:	2b50      	cmp	r3, #80	@ 0x50
 8008b72:	d03c      	beq.n	8008bee <HAL_TIM_ConfigClockSource+0xfa>
 8008b74:	2b50      	cmp	r3, #80	@ 0x50
 8008b76:	d873      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b78:	2b40      	cmp	r3, #64	@ 0x40
 8008b7a:	d058      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x13a>
 8008b7c:	2b40      	cmp	r3, #64	@ 0x40
 8008b7e:	d86f      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b80:	2b30      	cmp	r3, #48	@ 0x30
 8008b82:	d064      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x15a>
 8008b84:	2b30      	cmp	r3, #48	@ 0x30
 8008b86:	d86b      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d060      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x15a>
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d867      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d05c      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x15a>
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d05a      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x15a>
 8008b98:	e062      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008baa:	f000 f999 	bl	8008ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	609a      	str	r2, [r3, #8]
      break;
 8008bc6:	e04f      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bd8:	f000 f982 	bl	8008ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bea:	609a      	str	r2, [r3, #8]
      break;
 8008bec:	e03c      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f000 f8f6 	bl	8008dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2150      	movs	r1, #80	@ 0x50
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f94f 	bl	8008eaa <TIM_ITRx_SetConfig>
      break;
 8008c0c:	e02c      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f000 f915 	bl	8008e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2160      	movs	r1, #96	@ 0x60
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f93f 	bl	8008eaa <TIM_ITRx_SetConfig>
      break;
 8008c2c:	e01c      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f000 f8d6 	bl	8008dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2140      	movs	r1, #64	@ 0x40
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f92f 	bl	8008eaa <TIM_ITRx_SetConfig>
      break;
 8008c4c:	e00c      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f000 f926 	bl	8008eaa <TIM_ITRx_SetConfig>
      break;
 8008c5e:	e003      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e000      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8008dd0 <TIM_Base_SetConfig+0xfc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00f      	beq.n	8008d0c <TIM_Base_SetConfig+0x38>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cf2:	d00b      	beq.n	8008d0c <TIM_Base_SetConfig+0x38>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a37      	ldr	r2, [pc, #220]	@ (8008dd4 <TIM_Base_SetConfig+0x100>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_Base_SetConfig+0x38>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a36      	ldr	r2, [pc, #216]	@ (8008dd8 <TIM_Base_SetConfig+0x104>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_Base_SetConfig+0x38>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a35      	ldr	r2, [pc, #212]	@ (8008ddc <TIM_Base_SetConfig+0x108>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d108      	bne.n	8008d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2b      	ldr	r2, [pc, #172]	@ (8008dd0 <TIM_Base_SetConfig+0xfc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d01b      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2c:	d017      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a28      	ldr	r2, [pc, #160]	@ (8008dd4 <TIM_Base_SetConfig+0x100>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a27      	ldr	r2, [pc, #156]	@ (8008dd8 <TIM_Base_SetConfig+0x104>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00f      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a26      	ldr	r2, [pc, #152]	@ (8008ddc <TIM_Base_SetConfig+0x108>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00b      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a25      	ldr	r2, [pc, #148]	@ (8008de0 <TIM_Base_SetConfig+0x10c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d007      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a24      	ldr	r2, [pc, #144]	@ (8008de4 <TIM_Base_SetConfig+0x110>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d003      	beq.n	8008d5e <TIM_Base_SetConfig+0x8a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a23      	ldr	r2, [pc, #140]	@ (8008de8 <TIM_Base_SetConfig+0x114>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d108      	bne.n	8008d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd0 <TIM_Base_SetConfig+0xfc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d103      	bne.n	8008da4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d105      	bne.n	8008dc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f023 0201 	bic.w	r2, r3, #1
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	611a      	str	r2, [r3, #16]
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800
 8008ddc:	40000c00 	.word	0x40000c00
 8008de0:	40014000 	.word	0x40014000
 8008de4:	40014400 	.word	0x40014400
 8008de8:	40014800 	.word	0x40014800

08008dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	f023 0201 	bic.w	r2, r3, #1
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f023 030a 	bic.w	r3, r3, #10
 8008e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	621a      	str	r2, [r3, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	f023 0210 	bic.w	r2, r3, #16
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	031b      	lsls	r3, r3, #12
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	621a      	str	r2, [r3, #32]
}
 8008e9e:	bf00      	nop
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f043 0307 	orr.w	r3, r3, #7
 8008ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	609a      	str	r2, [r3, #8]
}
 8008ed4:	bf00      	nop
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	021a      	lsls	r2, r3, #8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	609a      	str	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	371c      	adds	r7, #28
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e050      	b.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a1c      	ldr	r2, [pc, #112]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d018      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f84:	d013      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a16      	ldr	r2, [pc, #88]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a15      	ldr	r2, [pc, #84]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a13      	ldr	r2, [pc, #76]	@ (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d10c      	bne.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40010000 	.word	0x40010000
 8008fec:	40000400 	.word	0x40000400
 8008ff0:	40000800 	.word	0x40000800
 8008ff4:	40000c00 	.word	0x40000c00
 8008ff8:	40014000 	.word	0x40014000

08008ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e042      	b.n	80090bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7fc fbf8 	bl	8005840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2224      	movs	r2, #36	@ 0x24
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fdbd 	bl	8009be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	691a      	ldr	r2, [r3, #16]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800907c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695a      	ldr	r2, [r3, #20]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800908c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800909c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	@ 0x28
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	4613      	mov	r3, r2
 80090d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d175      	bne.n	80091d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <HAL_UART_Transmit+0x2c>
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e06e      	b.n	80091d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2221      	movs	r2, #33	@ 0x21
 80090fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009102:	f7fc ffa1 	bl	8006048 <HAL_GetTick>
 8009106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	88fa      	ldrh	r2, [r7, #6]
 8009112:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800911c:	d108      	bne.n	8009130 <HAL_UART_Transmit+0x6c>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	61bb      	str	r3, [r7, #24]
 800912e:	e003      	b.n	8009138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009134:	2300      	movs	r3, #0
 8009136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009138:	e02e      	b.n	8009198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2200      	movs	r2, #0
 8009142:	2180      	movs	r1, #128	@ 0x80
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fb1f 	bl	8009788 <UART_WaitOnFlagUntilTimeout>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e03a      	b.n	80091d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	3302      	adds	r3, #2
 8009176:	61bb      	str	r3, [r7, #24]
 8009178:	e007      	b.n	800918a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	3301      	adds	r3, #1
 8009188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800918e:	b29b      	uxth	r3, r3
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1cb      	bne.n	800913a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2200      	movs	r2, #0
 80091aa:	2140      	movs	r1, #64	@ 0x40
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 faeb 	bl	8009788 <UART_WaitOnFlagUntilTimeout>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e006      	b.n	80091d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	e000      	b.n	80091d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80091d0:	2302      	movs	r3, #2
  }
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	4613      	mov	r3, r2
 80091e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d112      	bne.n	800921a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <HAL_UART_Receive_IT+0x26>
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e00b      	b.n	800921c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	461a      	mov	r2, r3
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fb12 	bl	800983a <UART_Start_Receive_IT>
 8009216:	4603      	mov	r3, r0
 8009218:	e000      	b.n	800921c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800921a:	2302      	movs	r3, #2
  }
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b0ba      	sub	sp, #232	@ 0xe8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800924a:	2300      	movs	r3, #0
 800924c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009250:	2300      	movs	r3, #0
 8009252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10f      	bne.n	800928a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <HAL_UART_IRQHandler+0x66>
 8009276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fbf2 	bl	8009a6c <UART_Receive_IT>
      return;
 8009288:	e25b      	b.n	8009742 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800928a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80de 	beq.w	8009450 <HAL_UART_IRQHandler+0x22c>
 8009294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80092a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80d1 	beq.w	8009450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00b      	beq.n	80092d2 <HAL_UART_IRQHandler+0xae>
 80092ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ca:	f043 0201 	orr.w	r2, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d6:	f003 0304 	and.w	r3, r3, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <HAL_UART_IRQHandler+0xd2>
 80092de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ee:	f043 0202 	orr.w	r2, r3, #2
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00b      	beq.n	800931a <HAL_UART_IRQHandler+0xf6>
 8009302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009312:	f043 0204 	orr.w	r2, r3, #4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800931a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800931e:	f003 0308 	and.w	r3, r3, #8
 8009322:	2b00      	cmp	r3, #0
 8009324:	d011      	beq.n	800934a <HAL_UART_IRQHandler+0x126>
 8009326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d105      	bne.n	800933e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009342:	f043 0208 	orr.w	r2, r3, #8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 81f2 	beq.w	8009738 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <HAL_UART_IRQHandler+0x14e>
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb7d 	bl	8009a6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937c:	2b40      	cmp	r3, #64	@ 0x40
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d103      	bne.n	800939e <HAL_UART_IRQHandler+0x17a>
 8009396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800939a:	2b00      	cmp	r3, #0
 800939c:	d04f      	beq.n	800943e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fa85 	bl	80098ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ae:	2b40      	cmp	r3, #64	@ 0x40
 80093b0:	d141      	bne.n	8009436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3314      	adds	r3, #20
 80093da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1d9      	bne.n	80093b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d013      	beq.n	800942e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940a:	4a7e      	ldr	r2, [pc, #504]	@ (8009604 <HAL_UART_IRQHandler+0x3e0>)
 800940c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009412:	4618      	mov	r0, r3
 8009414:	f7fd f8d0 	bl	80065b8 <HAL_DMA_Abort_IT>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d016      	beq.n	800944c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942c:	e00e      	b.n	800944c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f994 	bl	800975c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009434:	e00a      	b.n	800944c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f990 	bl	800975c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943c:	e006      	b.n	800944c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f98c 	bl	800975c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800944a:	e175      	b.n	8009738 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944c:	bf00      	nop
    return;
 800944e:	e173      	b.n	8009738 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009454:	2b01      	cmp	r3, #1
 8009456:	f040 814f 	bne.w	80096f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800945a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8148 	beq.w	80096f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 8141 	beq.w	80096f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009476:	2300      	movs	r3, #0
 8009478:	60bb      	str	r3, [r7, #8]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60bb      	str	r3, [r7, #8]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	60bb      	str	r3, [r7, #8]
 800948a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009496:	2b40      	cmp	r3, #64	@ 0x40
 8009498:	f040 80b6 	bne.w	8009608 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8145 	beq.w	800973c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094ba:	429a      	cmp	r2, r3
 80094bc:	f080 813e 	bcs.w	800973c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094d2:	f000 8088 	beq.w	80095e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	330c      	adds	r3, #12
 80094dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80094ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	330c      	adds	r3, #12
 80094fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009502:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800950e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800951a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1d9      	bne.n	80094d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3314      	adds	r3, #20
 8009528:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3314      	adds	r3, #20
 8009542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009546:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800954a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800954e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e1      	bne.n	8009522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3314      	adds	r3, #20
 8009564:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800956e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3314      	adds	r3, #20
 800957e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009582:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009584:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009588:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e3      	bne.n	800955e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b6:	f023 0310 	bic.w	r3, r3, #16
 80095ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	330c      	adds	r3, #12
 80095c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80095c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80095ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e3      	bne.n	80095a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fc ff79 	bl	80064d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2202      	movs	r2, #2
 80095ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f8b7 	bl	8009770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009602:	e09b      	b.n	800973c <HAL_UART_IRQHandler+0x518>
 8009604:	08009975 	.word	0x08009975
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009610:	b29b      	uxth	r3, r3
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 808e 	beq.w	8009740 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8089 	beq.w	8009740 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	330c      	adds	r3, #12
 8009634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800963e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	330c      	adds	r3, #12
 800964e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009652:	647a      	str	r2, [r7, #68]	@ 0x44
 8009654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e3      	bne.n	800962e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3314      	adds	r3, #20
 800966c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	623b      	str	r3, [r7, #32]
   return(result);
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3314      	adds	r3, #20
 8009686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800968a:	633a      	str	r2, [r7, #48]	@ 0x30
 800968c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e3      	bne.n	8009666 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	330c      	adds	r3, #12
 80096b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0310 	bic.w	r3, r3, #16
 80096c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	330c      	adds	r3, #12
 80096cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80096d0:	61fa      	str	r2, [r7, #28]
 80096d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d4:	69b9      	ldr	r1, [r7, #24]
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	e841 2300 	strex	r3, r2, [r1]
 80096dc:	617b      	str	r3, [r7, #20]
   return(result);
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e3      	bne.n	80096ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f83d 	bl	8009770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096f6:	e023      	b.n	8009740 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <HAL_UART_IRQHandler+0x4f4>
 8009704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f943 	bl	800999c <UART_Transmit_IT>
    return;
 8009716:	e014      	b.n	8009742 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800971c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00e      	beq.n	8009742 <HAL_UART_IRQHandler+0x51e>
 8009724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f983 	bl	8009a3c <UART_EndTransmit_IT>
    return;
 8009736:	e004      	b.n	8009742 <HAL_UART_IRQHandler+0x51e>
    return;
 8009738:	bf00      	nop
 800973a:	e002      	b.n	8009742 <HAL_UART_IRQHandler+0x51e>
      return;
 800973c:	bf00      	nop
 800973e:	e000      	b.n	8009742 <HAL_UART_IRQHandler+0x51e>
      return;
 8009740:	bf00      	nop
  }
}
 8009742:	37e8      	adds	r7, #232	@ 0xe8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	4613      	mov	r3, r2
 8009796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009798:	e03b      	b.n	8009812 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a0:	d037      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097a2:	f7fc fc51 	bl	8006048 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	6a3a      	ldr	r2, [r7, #32]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d302      	bcc.n	80097b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e03a      	b.n	8009832 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f003 0304 	and.w	r3, r3, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d023      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x8a>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b80      	cmp	r3, #128	@ 0x80
 80097ce:	d020      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x8a>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b40      	cmp	r3, #64	@ 0x40
 80097d4:	d01d      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0308 	and.w	r3, r3, #8
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d116      	bne.n	8009812 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 f857 	bl	80098ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2208      	movs	r2, #8
 8009804:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e00f      	b.n	8009832 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4013      	ands	r3, r2
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	429a      	cmp	r2, r3
 8009820:	bf0c      	ite	eq
 8009822:	2301      	moveq	r3, #1
 8009824:	2300      	movne	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	461a      	mov	r2, r3
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	429a      	cmp	r2, r3
 800982e:	d0b4      	beq.n	800979a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	4613      	mov	r3, r2
 8009846:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	88fa      	ldrh	r2, [r7, #6]
 8009852:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	88fa      	ldrh	r2, [r7, #6]
 8009858:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2222      	movs	r2, #34	@ 0x22
 8009864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d007      	beq.n	8009880 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800987e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695a      	ldr	r2, [r3, #20]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
 800988e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0220 	orr.w	r2, r2, #32
 800989e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b095      	sub	sp, #84	@ 0x54
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	330c      	adds	r3, #12
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80098d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e5      	bne.n	80098b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3314      	adds	r3, #20
 80098f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f023 0301 	bic.w	r3, r3, #1
 8009900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800990a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800990c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009922:	2b01      	cmp	r3, #1
 8009924:	d119      	bne.n	800995a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	60bb      	str	r3, [r7, #8]
   return(result);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f023 0310 	bic.w	r3, r3, #16
 800993c:	647b      	str	r3, [r7, #68]	@ 0x44
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	330c      	adds	r3, #12
 8009944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009946:	61ba      	str	r2, [r7, #24]
 8009948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	6979      	ldr	r1, [r7, #20]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	613b      	str	r3, [r7, #16]
   return(result);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e5      	bne.n	8009926 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009968:	bf00      	nop
 800996a:	3754      	adds	r7, #84	@ 0x54
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f7ff fee4 	bl	800975c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b21      	cmp	r3, #33	@ 0x21
 80099ae:	d13e      	bne.n	8009a2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099b8:	d114      	bne.n	80099e4 <UART_Transmit_IT+0x48>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d110      	bne.n	80099e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	1c9a      	adds	r2, r3, #2
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	621a      	str	r2, [r3, #32]
 80099e2:	e008      	b.n	80099f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	1c59      	adds	r1, r3, #1
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6211      	str	r1, [r2, #32]
 80099ee:	781a      	ldrb	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4619      	mov	r1, r3
 8009a04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10f      	bne.n	8009a2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e000      	b.n	8009a30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a2e:	2302      	movs	r3, #2
  }
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff fe73 	bl	8009748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08c      	sub	sp, #48	@ 0x30
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b22      	cmp	r3, #34	@ 0x22
 8009a7e:	f040 80ae 	bne.w	8009bde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a8a:	d117      	bne.n	8009abc <UART_Receive_IT+0x50>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d113      	bne.n	8009abc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009aba:	e026      	b.n	8009b0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ace:	d007      	beq.n	8009ae0 <UART_Receive_IT+0x74>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <UART_Receive_IT+0x82>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d106      	bne.n	8009aee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	e008      	b.n	8009b00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3b01      	subs	r3, #1
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	4619      	mov	r1, r3
 8009b18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d15d      	bne.n	8009bda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0220 	bic.w	r2, r2, #32
 8009b2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695a      	ldr	r2, [r3, #20]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0201 	bic.w	r2, r2, #1
 8009b4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d135      	bne.n	8009bd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	330c      	adds	r3, #12
 8009b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	613b      	str	r3, [r7, #16]
   return(result);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f023 0310 	bic.w	r3, r3, #16
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	330c      	adds	r3, #12
 8009b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b8a:	623a      	str	r2, [r7, #32]
 8009b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	69f9      	ldr	r1, [r7, #28]
 8009b90:	6a3a      	ldr	r2, [r7, #32]
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e5      	bne.n	8009b6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d10a      	bne.n	8009bc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fdd1 	bl	8009770 <HAL_UARTEx_RxEventCallback>
 8009bce:	e002      	b.n	8009bd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fa fcdf 	bl	8004594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e002      	b.n	8009be0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e000      	b.n	8009be0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009bde:	2302      	movs	r3, #2
  }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3730      	adds	r7, #48	@ 0x30
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bec:	b0c0      	sub	sp, #256	@ 0x100
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c04:	68d9      	ldr	r1, [r3, #12]
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	ea40 0301 	orr.w	r3, r0, r1
 8009c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c40:	f021 010c 	bic.w	r1, r1, #12
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c62:	6999      	ldr	r1, [r3, #24]
 8009c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	ea40 0301 	orr.w	r3, r0, r1
 8009c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4b8f      	ldr	r3, [pc, #572]	@ (8009eb4 <UART_SetConfig+0x2cc>)
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d005      	beq.n	8009c88 <UART_SetConfig+0xa0>
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b8d      	ldr	r3, [pc, #564]	@ (8009eb8 <UART_SetConfig+0x2d0>)
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d104      	bne.n	8009c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c88:	f7fd fd5c 	bl	8007744 <HAL_RCC_GetPCLK2Freq>
 8009c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c90:	e003      	b.n	8009c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c92:	f7fd fd43 	bl	800771c <HAL_RCC_GetPCLK1Freq>
 8009c96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ca4:	f040 810c 	bne.w	8009ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009cba:	4622      	mov	r2, r4
 8009cbc:	462b      	mov	r3, r5
 8009cbe:	1891      	adds	r1, r2, r2
 8009cc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009cc2:	415b      	adcs	r3, r3
 8009cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009cca:	4621      	mov	r1, r4
 8009ccc:	eb12 0801 	adds.w	r8, r2, r1
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	eb43 0901 	adc.w	r9, r3, r1
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	f04f 0300 	mov.w	r3, #0
 8009cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cea:	4690      	mov	r8, r2
 8009cec:	4699      	mov	r9, r3
 8009cee:	4623      	mov	r3, r4
 8009cf0:	eb18 0303 	adds.w	r3, r8, r3
 8009cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	eb49 0303 	adc.w	r3, r9, r3
 8009cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d16:	460b      	mov	r3, r1
 8009d18:	18db      	adds	r3, r3, r3
 8009d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	eb42 0303 	adc.w	r3, r2, r3
 8009d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d2c:	f7f6 ff64 	bl	8000bf8 <__aeabi_uldivmod>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4b61      	ldr	r3, [pc, #388]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009d36:	fba3 2302 	umull	r2, r3, r3, r2
 8009d3a:	095b      	lsrs	r3, r3, #5
 8009d3c:	011c      	lsls	r4, r3, #4
 8009d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	1891      	adds	r1, r2, r2
 8009d56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d58:	415b      	adcs	r3, r3
 8009d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d60:	4641      	mov	r1, r8
 8009d62:	eb12 0a01 	adds.w	sl, r2, r1
 8009d66:	4649      	mov	r1, r9
 8009d68:	eb43 0b01 	adc.w	fp, r3, r1
 8009d6c:	f04f 0200 	mov.w	r2, #0
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d80:	4692      	mov	sl, r2
 8009d82:	469b      	mov	fp, r3
 8009d84:	4643      	mov	r3, r8
 8009d86:	eb1a 0303 	adds.w	r3, sl, r3
 8009d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d8e:	464b      	mov	r3, r9
 8009d90:	eb4b 0303 	adc.w	r3, fp, r3
 8009d94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009da4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009dac:	460b      	mov	r3, r1
 8009dae:	18db      	adds	r3, r3, r3
 8009db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009db2:	4613      	mov	r3, r2
 8009db4:	eb42 0303 	adc.w	r3, r2, r3
 8009db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009dc2:	f7f6 ff19 	bl	8000bf8 <__aeabi_uldivmod>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009dce:	fba3 2301 	umull	r2, r3, r3, r1
 8009dd2:	095b      	lsrs	r3, r3, #5
 8009dd4:	2264      	movs	r2, #100	@ 0x64
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
 8009dda:	1acb      	subs	r3, r1, r3
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009de2:	4b36      	ldr	r3, [pc, #216]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009de4:	fba3 2302 	umull	r2, r3, r3, r2
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009df0:	441c      	add	r4, r3
 8009df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e04:	4642      	mov	r2, r8
 8009e06:	464b      	mov	r3, r9
 8009e08:	1891      	adds	r1, r2, r2
 8009e0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e0c:	415b      	adcs	r3, r3
 8009e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e14:	4641      	mov	r1, r8
 8009e16:	1851      	adds	r1, r2, r1
 8009e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	414b      	adcs	r3, r1
 8009e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e2c:	4659      	mov	r1, fp
 8009e2e:	00cb      	lsls	r3, r1, #3
 8009e30:	4651      	mov	r1, sl
 8009e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e36:	4651      	mov	r1, sl
 8009e38:	00ca      	lsls	r2, r1, #3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4642      	mov	r2, r8
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e48:	464b      	mov	r3, r9
 8009e4a:	460a      	mov	r2, r1
 8009e4c:	eb42 0303 	adc.w	r3, r2, r3
 8009e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e68:	460b      	mov	r3, r1
 8009e6a:	18db      	adds	r3, r3, r3
 8009e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e6e:	4613      	mov	r3, r2
 8009e70:	eb42 0303 	adc.w	r3, r2, r3
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e7e:	f7f6 febb 	bl	8000bf8 <__aeabi_uldivmod>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009e88:	fba3 1302 	umull	r1, r3, r3, r2
 8009e8c:	095b      	lsrs	r3, r3, #5
 8009e8e:	2164      	movs	r1, #100	@ 0x64
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	3332      	adds	r3, #50	@ 0x32
 8009e9a:	4a08      	ldr	r2, [pc, #32]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	f003 0207 	and.w	r2, r3, #7
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4422      	add	r2, r4
 8009eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009eb0:	e106      	b.n	800a0c0 <UART_SetConfig+0x4d8>
 8009eb2:	bf00      	nop
 8009eb4:	40011000 	.word	0x40011000
 8009eb8:	40011400 	.word	0x40011400
 8009ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009eca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	1891      	adds	r1, r2, r2
 8009ed8:	6239      	str	r1, [r7, #32]
 8009eda:	415b      	adcs	r3, r3
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	1854      	adds	r4, r2, r1
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	eb43 0501 	adc.w	r5, r3, r1
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	00eb      	lsls	r3, r5, #3
 8009ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009efa:	00e2      	lsls	r2, r4, #3
 8009efc:	4614      	mov	r4, r2
 8009efe:	461d      	mov	r5, r3
 8009f00:	4643      	mov	r3, r8
 8009f02:	18e3      	adds	r3, r4, r3
 8009f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f08:	464b      	mov	r3, r9
 8009f0a:	eb45 0303 	adc.w	r3, r5, r3
 8009f0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f2e:	4629      	mov	r1, r5
 8009f30:	008b      	lsls	r3, r1, #2
 8009f32:	4621      	mov	r1, r4
 8009f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f38:	4621      	mov	r1, r4
 8009f3a:	008a      	lsls	r2, r1, #2
 8009f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f40:	f7f6 fe5a 	bl	8000bf8 <__aeabi_uldivmod>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4b60      	ldr	r3, [pc, #384]	@ (800a0cc <UART_SetConfig+0x4e4>)
 8009f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f4e:	095b      	lsrs	r3, r3, #5
 8009f50:	011c      	lsls	r4, r3, #4
 8009f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	1891      	adds	r1, r2, r2
 8009f6a:	61b9      	str	r1, [r7, #24]
 8009f6c:	415b      	adcs	r3, r3
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f74:	4641      	mov	r1, r8
 8009f76:	1851      	adds	r1, r2, r1
 8009f78:	6139      	str	r1, [r7, #16]
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	414b      	adcs	r3, r1
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	00cb      	lsls	r3, r1, #3
 8009f90:	4651      	mov	r1, sl
 8009f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f96:	4651      	mov	r1, sl
 8009f98:	00ca      	lsls	r2, r1, #3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fa8:	464b      	mov	r3, r9
 8009faa:	460a      	mov	r2, r1
 8009fac:	eb42 0303 	adc.w	r3, r2, r3
 8009fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009fcc:	4649      	mov	r1, r9
 8009fce:	008b      	lsls	r3, r1, #2
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	008a      	lsls	r2, r1, #2
 8009fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009fde:	f7f6 fe0b 	bl	8000bf8 <__aeabi_uldivmod>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4b38      	ldr	r3, [pc, #224]	@ (800a0cc <UART_SetConfig+0x4e4>)
 8009fea:	fba3 2301 	umull	r2, r3, r3, r1
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2264      	movs	r2, #100	@ 0x64
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	1acb      	subs	r3, r1, r3
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	3332      	adds	r3, #50	@ 0x32
 8009ffc:	4a33      	ldr	r2, [pc, #204]	@ (800a0cc <UART_SetConfig+0x4e4>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a008:	441c      	add	r4, r3
 800a00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a00e:	2200      	movs	r2, #0
 800a010:	673b      	str	r3, [r7, #112]	@ 0x70
 800a012:	677a      	str	r2, [r7, #116]	@ 0x74
 800a014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a018:	4642      	mov	r2, r8
 800a01a:	464b      	mov	r3, r9
 800a01c:	1891      	adds	r1, r2, r2
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	415b      	adcs	r3, r3
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a028:	4641      	mov	r1, r8
 800a02a:	1851      	adds	r1, r2, r1
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	4649      	mov	r1, r9
 800a030:	414b      	adcs	r3, r1
 800a032:	607b      	str	r3, [r7, #4]
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a040:	4659      	mov	r1, fp
 800a042:	00cb      	lsls	r3, r1, #3
 800a044:	4651      	mov	r1, sl
 800a046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a04a:	4651      	mov	r1, sl
 800a04c:	00ca      	lsls	r2, r1, #3
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	4603      	mov	r3, r0
 800a054:	4642      	mov	r2, r8
 800a056:	189b      	adds	r3, r3, r2
 800a058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a05a:	464b      	mov	r3, r9
 800a05c:	460a      	mov	r2, r1
 800a05e:	eb42 0303 	adc.w	r3, r2, r3
 800a062:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a06e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a07c:	4649      	mov	r1, r9
 800a07e:	008b      	lsls	r3, r1, #2
 800a080:	4641      	mov	r1, r8
 800a082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a086:	4641      	mov	r1, r8
 800a088:	008a      	lsls	r2, r1, #2
 800a08a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a08e:	f7f6 fdb3 	bl	8000bf8 <__aeabi_uldivmod>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <UART_SetConfig+0x4e4>)
 800a098:	fba3 1302 	umull	r1, r3, r3, r2
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	2164      	movs	r1, #100	@ 0x64
 800a0a0:	fb01 f303 	mul.w	r3, r1, r3
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	3332      	adds	r3, #50	@ 0x32
 800a0aa:	4a08      	ldr	r2, [pc, #32]	@ (800a0cc <UART_SetConfig+0x4e4>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4422      	add	r2, r4
 800a0be:	609a      	str	r2, [r3, #8]
}
 800a0c0:	bf00      	nop
 800a0c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0cc:	51eb851f 	.word	0x51eb851f

0800a0d0 <__cvt>:
 800a0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	ec57 6b10 	vmov	r6, r7, d0
 800a0d8:	2f00      	cmp	r7, #0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	4619      	mov	r1, r3
 800a0de:	463b      	mov	r3, r7
 800a0e0:	bfbb      	ittet	lt
 800a0e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a0e6:	461f      	movlt	r7, r3
 800a0e8:	2300      	movge	r3, #0
 800a0ea:	232d      	movlt	r3, #45	@ 0x2d
 800a0ec:	700b      	strb	r3, [r1, #0]
 800a0ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a0f4:	4691      	mov	r9, r2
 800a0f6:	f023 0820 	bic.w	r8, r3, #32
 800a0fa:	bfbc      	itt	lt
 800a0fc:	4632      	movlt	r2, r6
 800a0fe:	4616      	movlt	r6, r2
 800a100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a104:	d005      	beq.n	800a112 <__cvt+0x42>
 800a106:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a10a:	d100      	bne.n	800a10e <__cvt+0x3e>
 800a10c:	3401      	adds	r4, #1
 800a10e:	2102      	movs	r1, #2
 800a110:	e000      	b.n	800a114 <__cvt+0x44>
 800a112:	2103      	movs	r1, #3
 800a114:	ab03      	add	r3, sp, #12
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	ab02      	add	r3, sp, #8
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	ec47 6b10 	vmov	d0, r6, r7
 800a120:	4653      	mov	r3, sl
 800a122:	4622      	mov	r2, r4
 800a124:	f000 fe68 	bl	800adf8 <_dtoa_r>
 800a128:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a12c:	4605      	mov	r5, r0
 800a12e:	d119      	bne.n	800a164 <__cvt+0x94>
 800a130:	f019 0f01 	tst.w	r9, #1
 800a134:	d00e      	beq.n	800a154 <__cvt+0x84>
 800a136:	eb00 0904 	add.w	r9, r0, r4
 800a13a:	2200      	movs	r2, #0
 800a13c:	2300      	movs	r3, #0
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	f7f6 fcc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a146:	b108      	cbz	r0, 800a14c <__cvt+0x7c>
 800a148:	f8cd 900c 	str.w	r9, [sp, #12]
 800a14c:	2230      	movs	r2, #48	@ 0x30
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	454b      	cmp	r3, r9
 800a152:	d31e      	bcc.n	800a192 <__cvt+0xc2>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a158:	1b5b      	subs	r3, r3, r5
 800a15a:	4628      	mov	r0, r5
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	b004      	add	sp, #16
 800a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a168:	eb00 0904 	add.w	r9, r0, r4
 800a16c:	d1e5      	bne.n	800a13a <__cvt+0x6a>
 800a16e:	7803      	ldrb	r3, [r0, #0]
 800a170:	2b30      	cmp	r3, #48	@ 0x30
 800a172:	d10a      	bne.n	800a18a <__cvt+0xba>
 800a174:	2200      	movs	r2, #0
 800a176:	2300      	movs	r3, #0
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 fcac 	bl	8000ad8 <__aeabi_dcmpeq>
 800a180:	b918      	cbnz	r0, 800a18a <__cvt+0xba>
 800a182:	f1c4 0401 	rsb	r4, r4, #1
 800a186:	f8ca 4000 	str.w	r4, [sl]
 800a18a:	f8da 3000 	ldr.w	r3, [sl]
 800a18e:	4499      	add	r9, r3
 800a190:	e7d3      	b.n	800a13a <__cvt+0x6a>
 800a192:	1c59      	adds	r1, r3, #1
 800a194:	9103      	str	r1, [sp, #12]
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	e7d9      	b.n	800a14e <__cvt+0x7e>

0800a19a <__exponent>:
 800a19a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a19c:	2900      	cmp	r1, #0
 800a19e:	bfba      	itte	lt
 800a1a0:	4249      	neglt	r1, r1
 800a1a2:	232d      	movlt	r3, #45	@ 0x2d
 800a1a4:	232b      	movge	r3, #43	@ 0x2b
 800a1a6:	2909      	cmp	r1, #9
 800a1a8:	7002      	strb	r2, [r0, #0]
 800a1aa:	7043      	strb	r3, [r0, #1]
 800a1ac:	dd29      	ble.n	800a202 <__exponent+0x68>
 800a1ae:	f10d 0307 	add.w	r3, sp, #7
 800a1b2:	461d      	mov	r5, r3
 800a1b4:	270a      	movs	r7, #10
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a1bc:	fb07 1416 	mls	r4, r7, r6, r1
 800a1c0:	3430      	adds	r4, #48	@ 0x30
 800a1c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2c63      	cmp	r4, #99	@ 0x63
 800a1ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	dcf1      	bgt.n	800a1b6 <__exponent+0x1c>
 800a1d2:	3130      	adds	r1, #48	@ 0x30
 800a1d4:	1e94      	subs	r4, r2, #2
 800a1d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a1da:	1c41      	adds	r1, r0, #1
 800a1dc:	4623      	mov	r3, r4
 800a1de:	42ab      	cmp	r3, r5
 800a1e0:	d30a      	bcc.n	800a1f8 <__exponent+0x5e>
 800a1e2:	f10d 0309 	add.w	r3, sp, #9
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	42ac      	cmp	r4, r5
 800a1ea:	bf88      	it	hi
 800a1ec:	2300      	movhi	r3, #0
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	4403      	add	r3, r0
 800a1f2:	1a18      	subs	r0, r3, r0
 800a1f4:	b003      	add	sp, #12
 800a1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a1fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a200:	e7ed      	b.n	800a1de <__exponent+0x44>
 800a202:	2330      	movs	r3, #48	@ 0x30
 800a204:	3130      	adds	r1, #48	@ 0x30
 800a206:	7083      	strb	r3, [r0, #2]
 800a208:	70c1      	strb	r1, [r0, #3]
 800a20a:	1d03      	adds	r3, r0, #4
 800a20c:	e7f1      	b.n	800a1f2 <__exponent+0x58>
	...

0800a210 <_printf_float>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	b08d      	sub	sp, #52	@ 0x34
 800a216:	460c      	mov	r4, r1
 800a218:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a21c:	4616      	mov	r6, r2
 800a21e:	461f      	mov	r7, r3
 800a220:	4605      	mov	r5, r0
 800a222:	f000 fcdb 	bl	800abdc <_localeconv_r>
 800a226:	6803      	ldr	r3, [r0, #0]
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f6 f828 	bl	8000280 <strlen>
 800a230:	2300      	movs	r3, #0
 800a232:	930a      	str	r3, [sp, #40]	@ 0x28
 800a234:	f8d8 3000 	ldr.w	r3, [r8]
 800a238:	9005      	str	r0, [sp, #20]
 800a23a:	3307      	adds	r3, #7
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	f103 0208 	add.w	r2, r3, #8
 800a244:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a248:	f8d4 b000 	ldr.w	fp, [r4]
 800a24c:	f8c8 2000 	str.w	r2, [r8]
 800a250:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a25e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a266:	4b9c      	ldr	r3, [pc, #624]	@ (800a4d8 <_printf_float+0x2c8>)
 800a268:	f04f 32ff 	mov.w	r2, #4294967295
 800a26c:	f7f6 fc66 	bl	8000b3c <__aeabi_dcmpun>
 800a270:	bb70      	cbnz	r0, 800a2d0 <_printf_float+0xc0>
 800a272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a276:	4b98      	ldr	r3, [pc, #608]	@ (800a4d8 <_printf_float+0x2c8>)
 800a278:	f04f 32ff 	mov.w	r2, #4294967295
 800a27c:	f7f6 fc40 	bl	8000b00 <__aeabi_dcmple>
 800a280:	bb30      	cbnz	r0, 800a2d0 <_printf_float+0xc0>
 800a282:	2200      	movs	r2, #0
 800a284:	2300      	movs	r3, #0
 800a286:	4640      	mov	r0, r8
 800a288:	4649      	mov	r1, r9
 800a28a:	f7f6 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800a28e:	b110      	cbz	r0, 800a296 <_printf_float+0x86>
 800a290:	232d      	movs	r3, #45	@ 0x2d
 800a292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a296:	4a91      	ldr	r2, [pc, #580]	@ (800a4dc <_printf_float+0x2cc>)
 800a298:	4b91      	ldr	r3, [pc, #580]	@ (800a4e0 <_printf_float+0x2d0>)
 800a29a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a29e:	bf94      	ite	ls
 800a2a0:	4690      	movls	r8, r2
 800a2a2:	4698      	movhi	r8, r3
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	6123      	str	r3, [r4, #16]
 800a2a8:	f02b 0304 	bic.w	r3, fp, #4
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	f04f 0900 	mov.w	r9, #0
 800a2b2:	9700      	str	r7, [sp, #0]
 800a2b4:	4633      	mov	r3, r6
 800a2b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f9d2 	bl	800a664 <_printf_common>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f040 808d 	bne.w	800a3e0 <_printf_float+0x1d0>
 800a2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ca:	b00d      	add	sp, #52	@ 0x34
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f6 fc30 	bl	8000b3c <__aeabi_dcmpun>
 800a2dc:	b140      	cbz	r0, 800a2f0 <_printf_float+0xe0>
 800a2de:	464b      	mov	r3, r9
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bfbc      	itt	lt
 800a2e4:	232d      	movlt	r3, #45	@ 0x2d
 800a2e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a2ea:	4a7e      	ldr	r2, [pc, #504]	@ (800a4e4 <_printf_float+0x2d4>)
 800a2ec:	4b7e      	ldr	r3, [pc, #504]	@ (800a4e8 <_printf_float+0x2d8>)
 800a2ee:	e7d4      	b.n	800a29a <_printf_float+0x8a>
 800a2f0:	6863      	ldr	r3, [r4, #4]
 800a2f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a2f6:	9206      	str	r2, [sp, #24]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	d13b      	bne.n	800a374 <_printf_float+0x164>
 800a2fc:	2306      	movs	r3, #6
 800a2fe:	6063      	str	r3, [r4, #4]
 800a300:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a304:	2300      	movs	r3, #0
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	9303      	str	r3, [sp, #12]
 800a30a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a30c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a310:	ab09      	add	r3, sp, #36	@ 0x24
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	ec49 8b10 	vmov	d0, r8, r9
 800a31a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a31e:	4628      	mov	r0, r5
 800a320:	f7ff fed6 	bl	800a0d0 <__cvt>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a328:	2b47      	cmp	r3, #71	@ 0x47
 800a32a:	4680      	mov	r8, r0
 800a32c:	d129      	bne.n	800a382 <_printf_float+0x172>
 800a32e:	1cc8      	adds	r0, r1, #3
 800a330:	db02      	blt.n	800a338 <_printf_float+0x128>
 800a332:	6863      	ldr	r3, [r4, #4]
 800a334:	4299      	cmp	r1, r3
 800a336:	dd41      	ble.n	800a3bc <_printf_float+0x1ac>
 800a338:	f1aa 0a02 	sub.w	sl, sl, #2
 800a33c:	fa5f fa8a 	uxtb.w	sl, sl
 800a340:	3901      	subs	r1, #1
 800a342:	4652      	mov	r2, sl
 800a344:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a348:	9109      	str	r1, [sp, #36]	@ 0x24
 800a34a:	f7ff ff26 	bl	800a19a <__exponent>
 800a34e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a350:	1813      	adds	r3, r2, r0
 800a352:	2a01      	cmp	r2, #1
 800a354:	4681      	mov	r9, r0
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	dc02      	bgt.n	800a360 <_printf_float+0x150>
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	07d2      	lsls	r2, r2, #31
 800a35e:	d501      	bpl.n	800a364 <_printf_float+0x154>
 800a360:	3301      	adds	r3, #1
 800a362:	6123      	str	r3, [r4, #16]
 800a364:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0a2      	beq.n	800a2b2 <_printf_float+0xa2>
 800a36c:	232d      	movs	r3, #45	@ 0x2d
 800a36e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a372:	e79e      	b.n	800a2b2 <_printf_float+0xa2>
 800a374:	9a06      	ldr	r2, [sp, #24]
 800a376:	2a47      	cmp	r2, #71	@ 0x47
 800a378:	d1c2      	bne.n	800a300 <_printf_float+0xf0>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1c0      	bne.n	800a300 <_printf_float+0xf0>
 800a37e:	2301      	movs	r3, #1
 800a380:	e7bd      	b.n	800a2fe <_printf_float+0xee>
 800a382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a386:	d9db      	bls.n	800a340 <_printf_float+0x130>
 800a388:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a38c:	d118      	bne.n	800a3c0 <_printf_float+0x1b0>
 800a38e:	2900      	cmp	r1, #0
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	dd0b      	ble.n	800a3ac <_printf_float+0x19c>
 800a394:	6121      	str	r1, [r4, #16]
 800a396:	b913      	cbnz	r3, 800a39e <_printf_float+0x18e>
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	07d0      	lsls	r0, r2, #31
 800a39c:	d502      	bpl.n	800a3a4 <_printf_float+0x194>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	440b      	add	r3, r1
 800a3a2:	6123      	str	r3, [r4, #16]
 800a3a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3a6:	f04f 0900 	mov.w	r9, #0
 800a3aa:	e7db      	b.n	800a364 <_printf_float+0x154>
 800a3ac:	b913      	cbnz	r3, 800a3b4 <_printf_float+0x1a4>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_float+0x1a8>
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	e7f4      	b.n	800a3a2 <_printf_float+0x192>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e7f2      	b.n	800a3a2 <_printf_float+0x192>
 800a3bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c2:	4299      	cmp	r1, r3
 800a3c4:	db05      	blt.n	800a3d2 <_printf_float+0x1c2>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	6121      	str	r1, [r4, #16]
 800a3ca:	07d8      	lsls	r0, r3, #31
 800a3cc:	d5ea      	bpl.n	800a3a4 <_printf_float+0x194>
 800a3ce:	1c4b      	adds	r3, r1, #1
 800a3d0:	e7e7      	b.n	800a3a2 <_printf_float+0x192>
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	bfd4      	ite	le
 800a3d6:	f1c1 0202 	rsble	r2, r1, #2
 800a3da:	2201      	movgt	r2, #1
 800a3dc:	4413      	add	r3, r2
 800a3de:	e7e0      	b.n	800a3a2 <_printf_float+0x192>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	055a      	lsls	r2, r3, #21
 800a3e4:	d407      	bmi.n	800a3f6 <_printf_float+0x1e6>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d12b      	bne.n	800a44c <_printf_float+0x23c>
 800a3f4:	e767      	b.n	800a2c6 <_printf_float+0xb6>
 800a3f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3fa:	f240 80dd 	bls.w	800a5b8 <_printf_float+0x3a8>
 800a3fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	f7f6 fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d033      	beq.n	800a476 <_printf_float+0x266>
 800a40e:	4a37      	ldr	r2, [pc, #220]	@ (800a4ec <_printf_float+0x2dc>)
 800a410:	2301      	movs	r3, #1
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f af54 	beq.w	800a2c6 <_printf_float+0xb6>
 800a41e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a422:	4543      	cmp	r3, r8
 800a424:	db02      	blt.n	800a42c <_printf_float+0x21c>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	07d8      	lsls	r0, r3, #31
 800a42a:	d50f      	bpl.n	800a44c <_printf_float+0x23c>
 800a42c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a430:	4631      	mov	r1, r6
 800a432:	4628      	mov	r0, r5
 800a434:	47b8      	blx	r7
 800a436:	3001      	adds	r0, #1
 800a438:	f43f af45 	beq.w	800a2c6 <_printf_float+0xb6>
 800a43c:	f04f 0900 	mov.w	r9, #0
 800a440:	f108 38ff 	add.w	r8, r8, #4294967295
 800a444:	f104 0a1a 	add.w	sl, r4, #26
 800a448:	45c8      	cmp	r8, r9
 800a44a:	dc09      	bgt.n	800a460 <_printf_float+0x250>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	079b      	lsls	r3, r3, #30
 800a450:	f100 8103 	bmi.w	800a65a <_printf_float+0x44a>
 800a454:	68e0      	ldr	r0, [r4, #12]
 800a456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a458:	4298      	cmp	r0, r3
 800a45a:	bfb8      	it	lt
 800a45c:	4618      	movlt	r0, r3
 800a45e:	e734      	b.n	800a2ca <_printf_float+0xba>
 800a460:	2301      	movs	r3, #1
 800a462:	4652      	mov	r2, sl
 800a464:	4631      	mov	r1, r6
 800a466:	4628      	mov	r0, r5
 800a468:	47b8      	blx	r7
 800a46a:	3001      	adds	r0, #1
 800a46c:	f43f af2b 	beq.w	800a2c6 <_printf_float+0xb6>
 800a470:	f109 0901 	add.w	r9, r9, #1
 800a474:	e7e8      	b.n	800a448 <_printf_float+0x238>
 800a476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dc39      	bgt.n	800a4f0 <_printf_float+0x2e0>
 800a47c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4ec <_printf_float+0x2dc>)
 800a47e:	2301      	movs	r3, #1
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af1d 	beq.w	800a2c6 <_printf_float+0xb6>
 800a48c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a490:	ea59 0303 	orrs.w	r3, r9, r3
 800a494:	d102      	bne.n	800a49c <_printf_float+0x28c>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	07d9      	lsls	r1, r3, #31
 800a49a:	d5d7      	bpl.n	800a44c <_printf_float+0x23c>
 800a49c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f43f af0d 	beq.w	800a2c6 <_printf_float+0xb6>
 800a4ac:	f04f 0a00 	mov.w	sl, #0
 800a4b0:	f104 0b1a 	add.w	fp, r4, #26
 800a4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b6:	425b      	negs	r3, r3
 800a4b8:	4553      	cmp	r3, sl
 800a4ba:	dc01      	bgt.n	800a4c0 <_printf_float+0x2b0>
 800a4bc:	464b      	mov	r3, r9
 800a4be:	e793      	b.n	800a3e8 <_printf_float+0x1d8>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	465a      	mov	r2, fp
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f43f aefb 	beq.w	800a2c6 <_printf_float+0xb6>
 800a4d0:	f10a 0a01 	add.w	sl, sl, #1
 800a4d4:	e7ee      	b.n	800a4b4 <_printf_float+0x2a4>
 800a4d6:	bf00      	nop
 800a4d8:	7fefffff 	.word	0x7fefffff
 800a4dc:	0800f370 	.word	0x0800f370
 800a4e0:	0800f374 	.word	0x0800f374
 800a4e4:	0800f378 	.word	0x0800f378
 800a4e8:	0800f37c 	.word	0x0800f37c
 800a4ec:	0800f380 	.word	0x0800f380
 800a4f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a4f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a4f6:	4553      	cmp	r3, sl
 800a4f8:	bfa8      	it	ge
 800a4fa:	4653      	movge	r3, sl
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	4699      	mov	r9, r3
 800a500:	dc36      	bgt.n	800a570 <_printf_float+0x360>
 800a502:	f04f 0b00 	mov.w	fp, #0
 800a506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a50a:	f104 021a 	add.w	r2, r4, #26
 800a50e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a510:	9306      	str	r3, [sp, #24]
 800a512:	eba3 0309 	sub.w	r3, r3, r9
 800a516:	455b      	cmp	r3, fp
 800a518:	dc31      	bgt.n	800a57e <_printf_float+0x36e>
 800a51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51c:	459a      	cmp	sl, r3
 800a51e:	dc3a      	bgt.n	800a596 <_printf_float+0x386>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	07da      	lsls	r2, r3, #31
 800a524:	d437      	bmi.n	800a596 <_printf_float+0x386>
 800a526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a528:	ebaa 0903 	sub.w	r9, sl, r3
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	ebaa 0303 	sub.w	r3, sl, r3
 800a532:	4599      	cmp	r9, r3
 800a534:	bfa8      	it	ge
 800a536:	4699      	movge	r9, r3
 800a538:	f1b9 0f00 	cmp.w	r9, #0
 800a53c:	dc33      	bgt.n	800a5a6 <_printf_float+0x396>
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a546:	f104 0b1a 	add.w	fp, r4, #26
 800a54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54c:	ebaa 0303 	sub.w	r3, sl, r3
 800a550:	eba3 0309 	sub.w	r3, r3, r9
 800a554:	4543      	cmp	r3, r8
 800a556:	f77f af79 	ble.w	800a44c <_printf_float+0x23c>
 800a55a:	2301      	movs	r3, #1
 800a55c:	465a      	mov	r2, fp
 800a55e:	4631      	mov	r1, r6
 800a560:	4628      	mov	r0, r5
 800a562:	47b8      	blx	r7
 800a564:	3001      	adds	r0, #1
 800a566:	f43f aeae 	beq.w	800a2c6 <_printf_float+0xb6>
 800a56a:	f108 0801 	add.w	r8, r8, #1
 800a56e:	e7ec      	b.n	800a54a <_printf_float+0x33a>
 800a570:	4642      	mov	r2, r8
 800a572:	4631      	mov	r1, r6
 800a574:	4628      	mov	r0, r5
 800a576:	47b8      	blx	r7
 800a578:	3001      	adds	r0, #1
 800a57a:	d1c2      	bne.n	800a502 <_printf_float+0x2f2>
 800a57c:	e6a3      	b.n	800a2c6 <_printf_float+0xb6>
 800a57e:	2301      	movs	r3, #1
 800a580:	4631      	mov	r1, r6
 800a582:	4628      	mov	r0, r5
 800a584:	9206      	str	r2, [sp, #24]
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f ae9c 	beq.w	800a2c6 <_printf_float+0xb6>
 800a58e:	9a06      	ldr	r2, [sp, #24]
 800a590:	f10b 0b01 	add.w	fp, fp, #1
 800a594:	e7bb      	b.n	800a50e <_printf_float+0x2fe>
 800a596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d1c0      	bne.n	800a526 <_printf_float+0x316>
 800a5a4:	e68f      	b.n	800a2c6 <_printf_float+0xb6>
 800a5a6:	9a06      	ldr	r2, [sp, #24]
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4442      	add	r2, r8
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	47b8      	blx	r7
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d1c3      	bne.n	800a53e <_printf_float+0x32e>
 800a5b6:	e686      	b.n	800a2c6 <_printf_float+0xb6>
 800a5b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5bc:	f1ba 0f01 	cmp.w	sl, #1
 800a5c0:	dc01      	bgt.n	800a5c6 <_printf_float+0x3b6>
 800a5c2:	07db      	lsls	r3, r3, #31
 800a5c4:	d536      	bpl.n	800a634 <_printf_float+0x424>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f43f ae78 	beq.w	800a2c6 <_printf_float+0xb6>
 800a5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4628      	mov	r0, r5
 800a5de:	47b8      	blx	r7
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	f43f ae70 	beq.w	800a2c6 <_printf_float+0xb6>
 800a5e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5f2:	f7f6 fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5f6:	b9c0      	cbnz	r0, 800a62a <_printf_float+0x41a>
 800a5f8:	4653      	mov	r3, sl
 800a5fa:	f108 0201 	add.w	r2, r8, #1
 800a5fe:	4631      	mov	r1, r6
 800a600:	4628      	mov	r0, r5
 800a602:	47b8      	blx	r7
 800a604:	3001      	adds	r0, #1
 800a606:	d10c      	bne.n	800a622 <_printf_float+0x412>
 800a608:	e65d      	b.n	800a2c6 <_printf_float+0xb6>
 800a60a:	2301      	movs	r3, #1
 800a60c:	465a      	mov	r2, fp
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	f43f ae56 	beq.w	800a2c6 <_printf_float+0xb6>
 800a61a:	f108 0801 	add.w	r8, r8, #1
 800a61e:	45d0      	cmp	r8, sl
 800a620:	dbf3      	blt.n	800a60a <_printf_float+0x3fa>
 800a622:	464b      	mov	r3, r9
 800a624:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a628:	e6df      	b.n	800a3ea <_printf_float+0x1da>
 800a62a:	f04f 0800 	mov.w	r8, #0
 800a62e:	f104 0b1a 	add.w	fp, r4, #26
 800a632:	e7f4      	b.n	800a61e <_printf_float+0x40e>
 800a634:	2301      	movs	r3, #1
 800a636:	4642      	mov	r2, r8
 800a638:	e7e1      	b.n	800a5fe <_printf_float+0x3ee>
 800a63a:	2301      	movs	r3, #1
 800a63c:	464a      	mov	r2, r9
 800a63e:	4631      	mov	r1, r6
 800a640:	4628      	mov	r0, r5
 800a642:	47b8      	blx	r7
 800a644:	3001      	adds	r0, #1
 800a646:	f43f ae3e 	beq.w	800a2c6 <_printf_float+0xb6>
 800a64a:	f108 0801 	add.w	r8, r8, #1
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a652:	1a5b      	subs	r3, r3, r1
 800a654:	4543      	cmp	r3, r8
 800a656:	dcf0      	bgt.n	800a63a <_printf_float+0x42a>
 800a658:	e6fc      	b.n	800a454 <_printf_float+0x244>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	f104 0919 	add.w	r9, r4, #25
 800a662:	e7f4      	b.n	800a64e <_printf_float+0x43e>

0800a664 <_printf_common>:
 800a664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a668:	4616      	mov	r6, r2
 800a66a:	4698      	mov	r8, r3
 800a66c:	688a      	ldr	r2, [r1, #8]
 800a66e:	690b      	ldr	r3, [r1, #16]
 800a670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a674:	4293      	cmp	r3, r2
 800a676:	bfb8      	it	lt
 800a678:	4613      	movlt	r3, r2
 800a67a:	6033      	str	r3, [r6, #0]
 800a67c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a680:	4607      	mov	r7, r0
 800a682:	460c      	mov	r4, r1
 800a684:	b10a      	cbz	r2, 800a68a <_printf_common+0x26>
 800a686:	3301      	adds	r3, #1
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	0699      	lsls	r1, r3, #26
 800a68e:	bf42      	ittt	mi
 800a690:	6833      	ldrmi	r3, [r6, #0]
 800a692:	3302      	addmi	r3, #2
 800a694:	6033      	strmi	r3, [r6, #0]
 800a696:	6825      	ldr	r5, [r4, #0]
 800a698:	f015 0506 	ands.w	r5, r5, #6
 800a69c:	d106      	bne.n	800a6ac <_printf_common+0x48>
 800a69e:	f104 0a19 	add.w	sl, r4, #25
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	6832      	ldr	r2, [r6, #0]
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dc26      	bgt.n	800a6fa <_printf_common+0x96>
 800a6ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	3b00      	subs	r3, #0
 800a6b4:	bf18      	it	ne
 800a6b6:	2301      	movne	r3, #1
 800a6b8:	0692      	lsls	r2, r2, #26
 800a6ba:	d42b      	bmi.n	800a714 <_printf_common+0xb0>
 800a6bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c8      	blx	r9
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d01e      	beq.n	800a708 <_printf_common+0xa4>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	f003 0306 	and.w	r3, r3, #6
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	bf02      	ittt	eq
 800a6d6:	68e5      	ldreq	r5, [r4, #12]
 800a6d8:	6833      	ldreq	r3, [r6, #0]
 800a6da:	1aed      	subeq	r5, r5, r3
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	bf0c      	ite	eq
 800a6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6e4:	2500      	movne	r5, #0
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	bfc4      	itt	gt
 800a6ea:	1a9b      	subgt	r3, r3, r2
 800a6ec:	18ed      	addgt	r5, r5, r3
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	341a      	adds	r4, #26
 800a6f2:	42b5      	cmp	r5, r6
 800a6f4:	d11a      	bne.n	800a72c <_printf_common+0xc8>
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	e008      	b.n	800a70c <_printf_common+0xa8>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	4641      	mov	r1, r8
 800a700:	4638      	mov	r0, r7
 800a702:	47c8      	blx	r9
 800a704:	3001      	adds	r0, #1
 800a706:	d103      	bne.n	800a710 <_printf_common+0xac>
 800a708:	f04f 30ff 	mov.w	r0, #4294967295
 800a70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a710:	3501      	adds	r5, #1
 800a712:	e7c6      	b.n	800a6a2 <_printf_common+0x3e>
 800a714:	18e1      	adds	r1, r4, r3
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	2030      	movs	r0, #48	@ 0x30
 800a71a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a71e:	4422      	add	r2, r4
 800a720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a728:	3302      	adds	r3, #2
 800a72a:	e7c7      	b.n	800a6bc <_printf_common+0x58>
 800a72c:	2301      	movs	r3, #1
 800a72e:	4622      	mov	r2, r4
 800a730:	4641      	mov	r1, r8
 800a732:	4638      	mov	r0, r7
 800a734:	47c8      	blx	r9
 800a736:	3001      	adds	r0, #1
 800a738:	d0e6      	beq.n	800a708 <_printf_common+0xa4>
 800a73a:	3601      	adds	r6, #1
 800a73c:	e7d9      	b.n	800a6f2 <_printf_common+0x8e>
	...

0800a740 <_printf_i>:
 800a740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a744:	7e0f      	ldrb	r7, [r1, #24]
 800a746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a748:	2f78      	cmp	r7, #120	@ 0x78
 800a74a:	4691      	mov	r9, r2
 800a74c:	4680      	mov	r8, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	469a      	mov	sl, r3
 800a752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a756:	d807      	bhi.n	800a768 <_printf_i+0x28>
 800a758:	2f62      	cmp	r7, #98	@ 0x62
 800a75a:	d80a      	bhi.n	800a772 <_printf_i+0x32>
 800a75c:	2f00      	cmp	r7, #0
 800a75e:	f000 80d2 	beq.w	800a906 <_printf_i+0x1c6>
 800a762:	2f58      	cmp	r7, #88	@ 0x58
 800a764:	f000 80b9 	beq.w	800a8da <_printf_i+0x19a>
 800a768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a76c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a770:	e03a      	b.n	800a7e8 <_printf_i+0xa8>
 800a772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a776:	2b15      	cmp	r3, #21
 800a778:	d8f6      	bhi.n	800a768 <_printf_i+0x28>
 800a77a:	a101      	add	r1, pc, #4	@ (adr r1, 800a780 <_printf_i+0x40>)
 800a77c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a780:	0800a7d9 	.word	0x0800a7d9
 800a784:	0800a7ed 	.word	0x0800a7ed
 800a788:	0800a769 	.word	0x0800a769
 800a78c:	0800a769 	.word	0x0800a769
 800a790:	0800a769 	.word	0x0800a769
 800a794:	0800a769 	.word	0x0800a769
 800a798:	0800a7ed 	.word	0x0800a7ed
 800a79c:	0800a769 	.word	0x0800a769
 800a7a0:	0800a769 	.word	0x0800a769
 800a7a4:	0800a769 	.word	0x0800a769
 800a7a8:	0800a769 	.word	0x0800a769
 800a7ac:	0800a8ed 	.word	0x0800a8ed
 800a7b0:	0800a817 	.word	0x0800a817
 800a7b4:	0800a8a7 	.word	0x0800a8a7
 800a7b8:	0800a769 	.word	0x0800a769
 800a7bc:	0800a769 	.word	0x0800a769
 800a7c0:	0800a90f 	.word	0x0800a90f
 800a7c4:	0800a769 	.word	0x0800a769
 800a7c8:	0800a817 	.word	0x0800a817
 800a7cc:	0800a769 	.word	0x0800a769
 800a7d0:	0800a769 	.word	0x0800a769
 800a7d4:	0800a8af 	.word	0x0800a8af
 800a7d8:	6833      	ldr	r3, [r6, #0]
 800a7da:	1d1a      	adds	r2, r3, #4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6032      	str	r2, [r6, #0]
 800a7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e09d      	b.n	800a928 <_printf_i+0x1e8>
 800a7ec:	6833      	ldr	r3, [r6, #0]
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	1d19      	adds	r1, r3, #4
 800a7f2:	6031      	str	r1, [r6, #0]
 800a7f4:	0606      	lsls	r6, r0, #24
 800a7f6:	d501      	bpl.n	800a7fc <_printf_i+0xbc>
 800a7f8:	681d      	ldr	r5, [r3, #0]
 800a7fa:	e003      	b.n	800a804 <_printf_i+0xc4>
 800a7fc:	0645      	lsls	r5, r0, #25
 800a7fe:	d5fb      	bpl.n	800a7f8 <_printf_i+0xb8>
 800a800:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a804:	2d00      	cmp	r5, #0
 800a806:	da03      	bge.n	800a810 <_printf_i+0xd0>
 800a808:	232d      	movs	r3, #45	@ 0x2d
 800a80a:	426d      	negs	r5, r5
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a810:	4859      	ldr	r0, [pc, #356]	@ (800a978 <_printf_i+0x238>)
 800a812:	230a      	movs	r3, #10
 800a814:	e011      	b.n	800a83a <_printf_i+0xfa>
 800a816:	6821      	ldr	r1, [r4, #0]
 800a818:	6833      	ldr	r3, [r6, #0]
 800a81a:	0608      	lsls	r0, r1, #24
 800a81c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a820:	d402      	bmi.n	800a828 <_printf_i+0xe8>
 800a822:	0649      	lsls	r1, r1, #25
 800a824:	bf48      	it	mi
 800a826:	b2ad      	uxthmi	r5, r5
 800a828:	2f6f      	cmp	r7, #111	@ 0x6f
 800a82a:	4853      	ldr	r0, [pc, #332]	@ (800a978 <_printf_i+0x238>)
 800a82c:	6033      	str	r3, [r6, #0]
 800a82e:	bf14      	ite	ne
 800a830:	230a      	movne	r3, #10
 800a832:	2308      	moveq	r3, #8
 800a834:	2100      	movs	r1, #0
 800a836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a83a:	6866      	ldr	r6, [r4, #4]
 800a83c:	60a6      	str	r6, [r4, #8]
 800a83e:	2e00      	cmp	r6, #0
 800a840:	bfa2      	ittt	ge
 800a842:	6821      	ldrge	r1, [r4, #0]
 800a844:	f021 0104 	bicge.w	r1, r1, #4
 800a848:	6021      	strge	r1, [r4, #0]
 800a84a:	b90d      	cbnz	r5, 800a850 <_printf_i+0x110>
 800a84c:	2e00      	cmp	r6, #0
 800a84e:	d04b      	beq.n	800a8e8 <_printf_i+0x1a8>
 800a850:	4616      	mov	r6, r2
 800a852:	fbb5 f1f3 	udiv	r1, r5, r3
 800a856:	fb03 5711 	mls	r7, r3, r1, r5
 800a85a:	5dc7      	ldrb	r7, [r0, r7]
 800a85c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a860:	462f      	mov	r7, r5
 800a862:	42bb      	cmp	r3, r7
 800a864:	460d      	mov	r5, r1
 800a866:	d9f4      	bls.n	800a852 <_printf_i+0x112>
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d10b      	bne.n	800a884 <_printf_i+0x144>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	07df      	lsls	r7, r3, #31
 800a870:	d508      	bpl.n	800a884 <_printf_i+0x144>
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	6861      	ldr	r1, [r4, #4]
 800a876:	4299      	cmp	r1, r3
 800a878:	bfde      	ittt	le
 800a87a:	2330      	movle	r3, #48	@ 0x30
 800a87c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a880:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a884:	1b92      	subs	r2, r2, r6
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	f8cd a000 	str.w	sl, [sp]
 800a88c:	464b      	mov	r3, r9
 800a88e:	aa03      	add	r2, sp, #12
 800a890:	4621      	mov	r1, r4
 800a892:	4640      	mov	r0, r8
 800a894:	f7ff fee6 	bl	800a664 <_printf_common>
 800a898:	3001      	adds	r0, #1
 800a89a:	d14a      	bne.n	800a932 <_printf_i+0x1f2>
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	b004      	add	sp, #16
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	f043 0320 	orr.w	r3, r3, #32
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	4833      	ldr	r0, [pc, #204]	@ (800a97c <_printf_i+0x23c>)
 800a8b0:	2778      	movs	r7, #120	@ 0x78
 800a8b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	6831      	ldr	r1, [r6, #0]
 800a8ba:	061f      	lsls	r7, r3, #24
 800a8bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8c0:	d402      	bmi.n	800a8c8 <_printf_i+0x188>
 800a8c2:	065f      	lsls	r7, r3, #25
 800a8c4:	bf48      	it	mi
 800a8c6:	b2ad      	uxthmi	r5, r5
 800a8c8:	6031      	str	r1, [r6, #0]
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	bf44      	itt	mi
 800a8ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a8d2:	6023      	strmi	r3, [r4, #0]
 800a8d4:	b11d      	cbz	r5, 800a8de <_printf_i+0x19e>
 800a8d6:	2310      	movs	r3, #16
 800a8d8:	e7ac      	b.n	800a834 <_printf_i+0xf4>
 800a8da:	4827      	ldr	r0, [pc, #156]	@ (800a978 <_printf_i+0x238>)
 800a8dc:	e7e9      	b.n	800a8b2 <_printf_i+0x172>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	f023 0320 	bic.w	r3, r3, #32
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	e7f6      	b.n	800a8d6 <_printf_i+0x196>
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	e7bd      	b.n	800a868 <_printf_i+0x128>
 800a8ec:	6833      	ldr	r3, [r6, #0]
 800a8ee:	6825      	ldr	r5, [r4, #0]
 800a8f0:	6961      	ldr	r1, [r4, #20]
 800a8f2:	1d18      	adds	r0, r3, #4
 800a8f4:	6030      	str	r0, [r6, #0]
 800a8f6:	062e      	lsls	r6, r5, #24
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	d501      	bpl.n	800a900 <_printf_i+0x1c0>
 800a8fc:	6019      	str	r1, [r3, #0]
 800a8fe:	e002      	b.n	800a906 <_printf_i+0x1c6>
 800a900:	0668      	lsls	r0, r5, #25
 800a902:	d5fb      	bpl.n	800a8fc <_printf_i+0x1bc>
 800a904:	8019      	strh	r1, [r3, #0]
 800a906:	2300      	movs	r3, #0
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	4616      	mov	r6, r2
 800a90c:	e7bc      	b.n	800a888 <_printf_i+0x148>
 800a90e:	6833      	ldr	r3, [r6, #0]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	6032      	str	r2, [r6, #0]
 800a914:	681e      	ldr	r6, [r3, #0]
 800a916:	6862      	ldr	r2, [r4, #4]
 800a918:	2100      	movs	r1, #0
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7f5 fc60 	bl	80001e0 <memchr>
 800a920:	b108      	cbz	r0, 800a926 <_printf_i+0x1e6>
 800a922:	1b80      	subs	r0, r0, r6
 800a924:	6060      	str	r0, [r4, #4]
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	6123      	str	r3, [r4, #16]
 800a92a:	2300      	movs	r3, #0
 800a92c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a930:	e7aa      	b.n	800a888 <_printf_i+0x148>
 800a932:	6923      	ldr	r3, [r4, #16]
 800a934:	4632      	mov	r2, r6
 800a936:	4649      	mov	r1, r9
 800a938:	4640      	mov	r0, r8
 800a93a:	47d0      	blx	sl
 800a93c:	3001      	adds	r0, #1
 800a93e:	d0ad      	beq.n	800a89c <_printf_i+0x15c>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	079b      	lsls	r3, r3, #30
 800a944:	d413      	bmi.n	800a96e <_printf_i+0x22e>
 800a946:	68e0      	ldr	r0, [r4, #12]
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	4298      	cmp	r0, r3
 800a94c:	bfb8      	it	lt
 800a94e:	4618      	movlt	r0, r3
 800a950:	e7a6      	b.n	800a8a0 <_printf_i+0x160>
 800a952:	2301      	movs	r3, #1
 800a954:	4632      	mov	r2, r6
 800a956:	4649      	mov	r1, r9
 800a958:	4640      	mov	r0, r8
 800a95a:	47d0      	blx	sl
 800a95c:	3001      	adds	r0, #1
 800a95e:	d09d      	beq.n	800a89c <_printf_i+0x15c>
 800a960:	3501      	adds	r5, #1
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	9903      	ldr	r1, [sp, #12]
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dcf2      	bgt.n	800a952 <_printf_i+0x212>
 800a96c:	e7eb      	b.n	800a946 <_printf_i+0x206>
 800a96e:	2500      	movs	r5, #0
 800a970:	f104 0619 	add.w	r6, r4, #25
 800a974:	e7f5      	b.n	800a962 <_printf_i+0x222>
 800a976:	bf00      	nop
 800a978:	0800f382 	.word	0x0800f382
 800a97c:	0800f393 	.word	0x0800f393

0800a980 <std>:
 800a980:	2300      	movs	r3, #0
 800a982:	b510      	push	{r4, lr}
 800a984:	4604      	mov	r4, r0
 800a986:	e9c0 3300 	strd	r3, r3, [r0]
 800a98a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a98e:	6083      	str	r3, [r0, #8]
 800a990:	8181      	strh	r1, [r0, #12]
 800a992:	6643      	str	r3, [r0, #100]	@ 0x64
 800a994:	81c2      	strh	r2, [r0, #14]
 800a996:	6183      	str	r3, [r0, #24]
 800a998:	4619      	mov	r1, r3
 800a99a:	2208      	movs	r2, #8
 800a99c:	305c      	adds	r0, #92	@ 0x5c
 800a99e:	f000 f914 	bl	800abca <memset>
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d8 <std+0x58>)
 800a9a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9dc <std+0x5c>)
 800a9a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e0 <std+0x60>)
 800a9ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <std+0x64>)
 800a9b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e8 <std+0x68>)
 800a9b4:	6224      	str	r4, [r4, #32]
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d006      	beq.n	800a9c8 <std+0x48>
 800a9ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9be:	4294      	cmp	r4, r2
 800a9c0:	d002      	beq.n	800a9c8 <std+0x48>
 800a9c2:	33d0      	adds	r3, #208	@ 0xd0
 800a9c4:	429c      	cmp	r4, r3
 800a9c6:	d105      	bne.n	800a9d4 <std+0x54>
 800a9c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d0:	f000 b978 	b.w	800acc4 <__retarget_lock_init_recursive>
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800ab45 	.word	0x0800ab45
 800a9dc:	0800ab67 	.word	0x0800ab67
 800a9e0:	0800ab9f 	.word	0x0800ab9f
 800a9e4:	0800abc3 	.word	0x0800abc3
 800a9e8:	20000640 	.word	0x20000640

0800a9ec <stdio_exit_handler>:
 800a9ec:	4a02      	ldr	r2, [pc, #8]	@ (800a9f8 <stdio_exit_handler+0xc>)
 800a9ee:	4903      	ldr	r1, [pc, #12]	@ (800a9fc <stdio_exit_handler+0x10>)
 800a9f0:	4803      	ldr	r0, [pc, #12]	@ (800aa00 <stdio_exit_handler+0x14>)
 800a9f2:	f000 b869 	b.w	800aac8 <_fwalk_sglue>
 800a9f6:	bf00      	nop
 800a9f8:	20000028 	.word	0x20000028
 800a9fc:	0800c63d 	.word	0x0800c63d
 800aa00:	20000038 	.word	0x20000038

0800aa04 <cleanup_stdio>:
 800aa04:	6841      	ldr	r1, [r0, #4]
 800aa06:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <cleanup_stdio+0x34>)
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	b510      	push	{r4, lr}
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	d001      	beq.n	800aa14 <cleanup_stdio+0x10>
 800aa10:	f001 fe14 	bl	800c63c <_fflush_r>
 800aa14:	68a1      	ldr	r1, [r4, #8]
 800aa16:	4b09      	ldr	r3, [pc, #36]	@ (800aa3c <cleanup_stdio+0x38>)
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	d002      	beq.n	800aa22 <cleanup_stdio+0x1e>
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f001 fe0d 	bl	800c63c <_fflush_r>
 800aa22:	68e1      	ldr	r1, [r4, #12]
 800aa24:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <cleanup_stdio+0x3c>)
 800aa26:	4299      	cmp	r1, r3
 800aa28:	d004      	beq.n	800aa34 <cleanup_stdio+0x30>
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa30:	f001 be04 	b.w	800c63c <_fflush_r>
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	20000640 	.word	0x20000640
 800aa3c:	200006a8 	.word	0x200006a8
 800aa40:	20000710 	.word	0x20000710

0800aa44 <global_stdio_init.part.0>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <global_stdio_init.part.0+0x30>)
 800aa48:	4c0b      	ldr	r4, [pc, #44]	@ (800aa78 <global_stdio_init.part.0+0x34>)
 800aa4a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa7c <global_stdio_init.part.0+0x38>)
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	2200      	movs	r2, #0
 800aa52:	2104      	movs	r1, #4
 800aa54:	f7ff ff94 	bl	800a980 <std>
 800aa58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	2109      	movs	r1, #9
 800aa60:	f7ff ff8e 	bl	800a980 <std>
 800aa64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa68:	2202      	movs	r2, #2
 800aa6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa6e:	2112      	movs	r1, #18
 800aa70:	f7ff bf86 	b.w	800a980 <std>
 800aa74:	20000778 	.word	0x20000778
 800aa78:	20000640 	.word	0x20000640
 800aa7c:	0800a9ed 	.word	0x0800a9ed

0800aa80 <__sfp_lock_acquire>:
 800aa80:	4801      	ldr	r0, [pc, #4]	@ (800aa88 <__sfp_lock_acquire+0x8>)
 800aa82:	f000 b920 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	20000781 	.word	0x20000781

0800aa8c <__sfp_lock_release>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	@ (800aa94 <__sfp_lock_release+0x8>)
 800aa8e:	f000 b91b 	b.w	800acc8 <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	20000781 	.word	0x20000781

0800aa98 <__sinit>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	f7ff fff0 	bl	800aa80 <__sfp_lock_acquire>
 800aaa0:	6a23      	ldr	r3, [r4, #32]
 800aaa2:	b11b      	cbz	r3, 800aaac <__sinit+0x14>
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa8:	f7ff bff0 	b.w	800aa8c <__sfp_lock_release>
 800aaac:	4b04      	ldr	r3, [pc, #16]	@ (800aac0 <__sinit+0x28>)
 800aaae:	6223      	str	r3, [r4, #32]
 800aab0:	4b04      	ldr	r3, [pc, #16]	@ (800aac4 <__sinit+0x2c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1f5      	bne.n	800aaa4 <__sinit+0xc>
 800aab8:	f7ff ffc4 	bl	800aa44 <global_stdio_init.part.0>
 800aabc:	e7f2      	b.n	800aaa4 <__sinit+0xc>
 800aabe:	bf00      	nop
 800aac0:	0800aa05 	.word	0x0800aa05
 800aac4:	20000778 	.word	0x20000778

0800aac8 <_fwalk_sglue>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	4607      	mov	r7, r0
 800aace:	4688      	mov	r8, r1
 800aad0:	4614      	mov	r4, r2
 800aad2:	2600      	movs	r6, #0
 800aad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aad8:	f1b9 0901 	subs.w	r9, r9, #1
 800aadc:	d505      	bpl.n	800aaea <_fwalk_sglue+0x22>
 800aade:	6824      	ldr	r4, [r4, #0]
 800aae0:	2c00      	cmp	r4, #0
 800aae2:	d1f7      	bne.n	800aad4 <_fwalk_sglue+0xc>
 800aae4:	4630      	mov	r0, r6
 800aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d907      	bls.n	800ab00 <_fwalk_sglue+0x38>
 800aaf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	d003      	beq.n	800ab00 <_fwalk_sglue+0x38>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	4306      	orrs	r6, r0
 800ab00:	3568      	adds	r5, #104	@ 0x68
 800ab02:	e7e9      	b.n	800aad8 <_fwalk_sglue+0x10>

0800ab04 <siprintf>:
 800ab04:	b40e      	push	{r1, r2, r3}
 800ab06:	b500      	push	{lr}
 800ab08:	b09c      	sub	sp, #112	@ 0x70
 800ab0a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab0c:	9002      	str	r0, [sp, #8]
 800ab0e:	9006      	str	r0, [sp, #24]
 800ab10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab14:	4809      	ldr	r0, [pc, #36]	@ (800ab3c <siprintf+0x38>)
 800ab16:	9107      	str	r1, [sp, #28]
 800ab18:	9104      	str	r1, [sp, #16]
 800ab1a:	4909      	ldr	r1, [pc, #36]	@ (800ab40 <siprintf+0x3c>)
 800ab1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab20:	9105      	str	r1, [sp, #20]
 800ab22:	6800      	ldr	r0, [r0, #0]
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	a902      	add	r1, sp, #8
 800ab28:	f001 fc08 	bl	800c33c <_svfiprintf_r>
 800ab2c:	9b02      	ldr	r3, [sp, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
 800ab32:	b01c      	add	sp, #112	@ 0x70
 800ab34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab38:	b003      	add	sp, #12
 800ab3a:	4770      	bx	lr
 800ab3c:	20000034 	.word	0x20000034
 800ab40:	ffff0208 	.word	0xffff0208

0800ab44 <__sread>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	460c      	mov	r4, r1
 800ab48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4c:	f000 f86c 	bl	800ac28 <_read_r>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	bfab      	itete	ge
 800ab54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab56:	89a3      	ldrhlt	r3, [r4, #12]
 800ab58:	181b      	addge	r3, r3, r0
 800ab5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab5e:	bfac      	ite	ge
 800ab60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab62:	81a3      	strhlt	r3, [r4, #12]
 800ab64:	bd10      	pop	{r4, pc}

0800ab66 <__swrite>:
 800ab66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6a:	461f      	mov	r7, r3
 800ab6c:	898b      	ldrh	r3, [r1, #12]
 800ab6e:	05db      	lsls	r3, r3, #23
 800ab70:	4605      	mov	r5, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	4616      	mov	r6, r2
 800ab76:	d505      	bpl.n	800ab84 <__swrite+0x1e>
 800ab78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f000 f840 	bl	800ac04 <_lseek_r>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab8e:	81a3      	strh	r3, [r4, #12]
 800ab90:	4632      	mov	r2, r6
 800ab92:	463b      	mov	r3, r7
 800ab94:	4628      	mov	r0, r5
 800ab96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9a:	f000 b857 	b.w	800ac4c <_write_r>

0800ab9e <__sseek>:
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	460c      	mov	r4, r1
 800aba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba6:	f000 f82d 	bl	800ac04 <_lseek_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	bf15      	itete	ne
 800abb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abba:	81a3      	strheq	r3, [r4, #12]
 800abbc:	bf18      	it	ne
 800abbe:	81a3      	strhne	r3, [r4, #12]
 800abc0:	bd10      	pop	{r4, pc}

0800abc2 <__sclose>:
 800abc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc6:	f000 b80d 	b.w	800abe4 <_close_r>

0800abca <memset>:
 800abca:	4402      	add	r2, r0
 800abcc:	4603      	mov	r3, r0
 800abce:	4293      	cmp	r3, r2
 800abd0:	d100      	bne.n	800abd4 <memset+0xa>
 800abd2:	4770      	bx	lr
 800abd4:	f803 1b01 	strb.w	r1, [r3], #1
 800abd8:	e7f9      	b.n	800abce <memset+0x4>
	...

0800abdc <_localeconv_r>:
 800abdc:	4800      	ldr	r0, [pc, #0]	@ (800abe0 <_localeconv_r+0x4>)
 800abde:	4770      	bx	lr
 800abe0:	20000174 	.word	0x20000174

0800abe4 <_close_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d06      	ldr	r5, [pc, #24]	@ (800ac00 <_close_r+0x1c>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7fb f828 	bl	8005c44 <_close>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_close_r+0x1a>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_close_r+0x1a>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	2000077c 	.word	0x2000077c

0800ac04 <_lseek_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d07      	ldr	r5, [pc, #28]	@ (800ac24 <_lseek_r+0x20>)
 800ac08:	4604      	mov	r4, r0
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	602a      	str	r2, [r5, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f7fb f83d 	bl	8005c92 <_lseek>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_lseek_r+0x1e>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_lseek_r+0x1e>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	2000077c 	.word	0x2000077c

0800ac28 <_read_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	@ (800ac48 <_read_r+0x20>)
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	4608      	mov	r0, r1
 800ac30:	4611      	mov	r1, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	602a      	str	r2, [r5, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7fa ffcb 	bl	8005bd2 <_read>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_read_r+0x1e>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_read_r+0x1e>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	2000077c 	.word	0x2000077c

0800ac4c <_write_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d07      	ldr	r5, [pc, #28]	@ (800ac6c <_write_r+0x20>)
 800ac50:	4604      	mov	r4, r0
 800ac52:	4608      	mov	r0, r1
 800ac54:	4611      	mov	r1, r2
 800ac56:	2200      	movs	r2, #0
 800ac58:	602a      	str	r2, [r5, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f7fa ffd6 	bl	8005c0c <_write>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_write_r+0x1e>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_write_r+0x1e>
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	2000077c 	.word	0x2000077c

0800ac70 <__errno>:
 800ac70:	4b01      	ldr	r3, [pc, #4]	@ (800ac78 <__errno+0x8>)
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20000034 	.word	0x20000034

0800ac7c <__libc_init_array>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4d0d      	ldr	r5, [pc, #52]	@ (800acb4 <__libc_init_array+0x38>)
 800ac80:	4c0d      	ldr	r4, [pc, #52]	@ (800acb8 <__libc_init_array+0x3c>)
 800ac82:	1b64      	subs	r4, r4, r5
 800ac84:	10a4      	asrs	r4, r4, #2
 800ac86:	2600      	movs	r6, #0
 800ac88:	42a6      	cmp	r6, r4
 800ac8a:	d109      	bne.n	800aca0 <__libc_init_array+0x24>
 800ac8c:	4d0b      	ldr	r5, [pc, #44]	@ (800acbc <__libc_init_array+0x40>)
 800ac8e:	4c0c      	ldr	r4, [pc, #48]	@ (800acc0 <__libc_init_array+0x44>)
 800ac90:	f002 f864 	bl	800cd5c <_init>
 800ac94:	1b64      	subs	r4, r4, r5
 800ac96:	10a4      	asrs	r4, r4, #2
 800ac98:	2600      	movs	r6, #0
 800ac9a:	42a6      	cmp	r6, r4
 800ac9c:	d105      	bne.n	800acaa <__libc_init_array+0x2e>
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca4:	4798      	blx	r3
 800aca6:	3601      	adds	r6, #1
 800aca8:	e7ee      	b.n	800ac88 <__libc_init_array+0xc>
 800acaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800acae:	4798      	blx	r3
 800acb0:	3601      	adds	r6, #1
 800acb2:	e7f2      	b.n	800ac9a <__libc_init_array+0x1e>
 800acb4:	0800f6e8 	.word	0x0800f6e8
 800acb8:	0800f6e8 	.word	0x0800f6e8
 800acbc:	0800f6e8 	.word	0x0800f6e8
 800acc0:	0800f6ec 	.word	0x0800f6ec

0800acc4 <__retarget_lock_init_recursive>:
 800acc4:	4770      	bx	lr

0800acc6 <__retarget_lock_acquire_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <__retarget_lock_release_recursive>:
 800acc8:	4770      	bx	lr

0800acca <memcpy>:
 800acca:	440a      	add	r2, r1
 800accc:	4291      	cmp	r1, r2
 800acce:	f100 33ff 	add.w	r3, r0, #4294967295
 800acd2:	d100      	bne.n	800acd6 <memcpy+0xc>
 800acd4:	4770      	bx	lr
 800acd6:	b510      	push	{r4, lr}
 800acd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ace0:	4291      	cmp	r1, r2
 800ace2:	d1f9      	bne.n	800acd8 <memcpy+0xe>
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <quorem>:
 800ace6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acea:	6903      	ldr	r3, [r0, #16]
 800acec:	690c      	ldr	r4, [r1, #16]
 800acee:	42a3      	cmp	r3, r4
 800acf0:	4607      	mov	r7, r0
 800acf2:	db7e      	blt.n	800adf2 <quorem+0x10c>
 800acf4:	3c01      	subs	r4, #1
 800acf6:	f101 0814 	add.w	r8, r1, #20
 800acfa:	00a3      	lsls	r3, r4, #2
 800acfc:	f100 0514 	add.w	r5, r0, #20
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad10:	3301      	adds	r3, #1
 800ad12:	429a      	cmp	r2, r3
 800ad14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad18:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad1c:	d32e      	bcc.n	800ad7c <quorem+0x96>
 800ad1e:	f04f 0a00 	mov.w	sl, #0
 800ad22:	46c4      	mov	ip, r8
 800ad24:	46ae      	mov	lr, r5
 800ad26:	46d3      	mov	fp, sl
 800ad28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad2c:	b298      	uxth	r0, r3
 800ad2e:	fb06 a000 	mla	r0, r6, r0, sl
 800ad32:	0c02      	lsrs	r2, r0, #16
 800ad34:	0c1b      	lsrs	r3, r3, #16
 800ad36:	fb06 2303 	mla	r3, r6, r3, r2
 800ad3a:	f8de 2000 	ldr.w	r2, [lr]
 800ad3e:	b280      	uxth	r0, r0
 800ad40:	b292      	uxth	r2, r2
 800ad42:	1a12      	subs	r2, r2, r0
 800ad44:	445a      	add	r2, fp
 800ad46:	f8de 0000 	ldr.w	r0, [lr]
 800ad4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad58:	b292      	uxth	r2, r2
 800ad5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad5e:	45e1      	cmp	r9, ip
 800ad60:	f84e 2b04 	str.w	r2, [lr], #4
 800ad64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad68:	d2de      	bcs.n	800ad28 <quorem+0x42>
 800ad6a:	9b00      	ldr	r3, [sp, #0]
 800ad6c:	58eb      	ldr	r3, [r5, r3]
 800ad6e:	b92b      	cbnz	r3, 800ad7c <quorem+0x96>
 800ad70:	9b01      	ldr	r3, [sp, #4]
 800ad72:	3b04      	subs	r3, #4
 800ad74:	429d      	cmp	r5, r3
 800ad76:	461a      	mov	r2, r3
 800ad78:	d32f      	bcc.n	800adda <quorem+0xf4>
 800ad7a:	613c      	str	r4, [r7, #16]
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f001 f979 	bl	800c074 <__mcmp>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	db25      	blt.n	800add2 <quorem+0xec>
 800ad86:	4629      	mov	r1, r5
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad8e:	f8d1 c000 	ldr.w	ip, [r1]
 800ad92:	fa1f fe82 	uxth.w	lr, r2
 800ad96:	fa1f f38c 	uxth.w	r3, ip
 800ad9a:	eba3 030e 	sub.w	r3, r3, lr
 800ad9e:	4403      	add	r3, r0
 800ada0:	0c12      	lsrs	r2, r2, #16
 800ada2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ada6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800adaa:	b29b      	uxth	r3, r3
 800adac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adb0:	45c1      	cmp	r9, r8
 800adb2:	f841 3b04 	str.w	r3, [r1], #4
 800adb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800adba:	d2e6      	bcs.n	800ad8a <quorem+0xa4>
 800adbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adc4:	b922      	cbnz	r2, 800add0 <quorem+0xea>
 800adc6:	3b04      	subs	r3, #4
 800adc8:	429d      	cmp	r5, r3
 800adca:	461a      	mov	r2, r3
 800adcc:	d30b      	bcc.n	800ade6 <quorem+0x100>
 800adce:	613c      	str	r4, [r7, #16]
 800add0:	3601      	adds	r6, #1
 800add2:	4630      	mov	r0, r6
 800add4:	b003      	add	sp, #12
 800add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	3b04      	subs	r3, #4
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d1cb      	bne.n	800ad7a <quorem+0x94>
 800ade2:	3c01      	subs	r4, #1
 800ade4:	e7c6      	b.n	800ad74 <quorem+0x8e>
 800ade6:	6812      	ldr	r2, [r2, #0]
 800ade8:	3b04      	subs	r3, #4
 800adea:	2a00      	cmp	r2, #0
 800adec:	d1ef      	bne.n	800adce <quorem+0xe8>
 800adee:	3c01      	subs	r4, #1
 800adf0:	e7ea      	b.n	800adc8 <quorem+0xe2>
 800adf2:	2000      	movs	r0, #0
 800adf4:	e7ee      	b.n	800add4 <quorem+0xee>
	...

0800adf8 <_dtoa_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	69c7      	ldr	r7, [r0, #28]
 800adfe:	b099      	sub	sp, #100	@ 0x64
 800ae00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae04:	ec55 4b10 	vmov	r4, r5, d0
 800ae08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae0c:	4683      	mov	fp, r0
 800ae0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae12:	b97f      	cbnz	r7, 800ae34 <_dtoa_r+0x3c>
 800ae14:	2010      	movs	r0, #16
 800ae16:	f000 fdfd 	bl	800ba14 <malloc>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae20:	b920      	cbnz	r0, 800ae2c <_dtoa_r+0x34>
 800ae22:	4ba7      	ldr	r3, [pc, #668]	@ (800b0c0 <_dtoa_r+0x2c8>)
 800ae24:	21ef      	movs	r1, #239	@ 0xef
 800ae26:	48a7      	ldr	r0, [pc, #668]	@ (800b0c4 <_dtoa_r+0x2cc>)
 800ae28:	f001 fc5a 	bl	800c6e0 <__assert_func>
 800ae2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae30:	6007      	str	r7, [r0, #0]
 800ae32:	60c7      	str	r7, [r0, #12]
 800ae34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae38:	6819      	ldr	r1, [r3, #0]
 800ae3a:	b159      	cbz	r1, 800ae54 <_dtoa_r+0x5c>
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	604a      	str	r2, [r1, #4]
 800ae40:	2301      	movs	r3, #1
 800ae42:	4093      	lsls	r3, r2
 800ae44:	608b      	str	r3, [r1, #8]
 800ae46:	4658      	mov	r0, fp
 800ae48:	f000 feda 	bl	800bc00 <_Bfree>
 800ae4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	1e2b      	subs	r3, r5, #0
 800ae56:	bfb9      	ittee	lt
 800ae58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae5c:	9303      	strlt	r3, [sp, #12]
 800ae5e:	2300      	movge	r3, #0
 800ae60:	6033      	strge	r3, [r6, #0]
 800ae62:	9f03      	ldr	r7, [sp, #12]
 800ae64:	4b98      	ldr	r3, [pc, #608]	@ (800b0c8 <_dtoa_r+0x2d0>)
 800ae66:	bfbc      	itt	lt
 800ae68:	2201      	movlt	r2, #1
 800ae6a:	6032      	strlt	r2, [r6, #0]
 800ae6c:	43bb      	bics	r3, r7
 800ae6e:	d112      	bne.n	800ae96 <_dtoa_r+0x9e>
 800ae70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae7c:	4323      	orrs	r3, r4
 800ae7e:	f000 854d 	beq.w	800b91c <_dtoa_r+0xb24>
 800ae82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b0dc <_dtoa_r+0x2e4>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 854f 	beq.w	800b92c <_dtoa_r+0xb34>
 800ae8e:	f10a 0303 	add.w	r3, sl, #3
 800ae92:	f000 bd49 	b.w	800b928 <_dtoa_r+0xb30>
 800ae96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	ec51 0b17 	vmov	r0, r1, d7
 800aea0:	2300      	movs	r3, #0
 800aea2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aea6:	f7f5 fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeaa:	4680      	mov	r8, r0
 800aeac:	b158      	cbz	r0, 800aec6 <_dtoa_r+0xce>
 800aeae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aeb6:	b113      	cbz	r3, 800aebe <_dtoa_r+0xc6>
 800aeb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aeba:	4b84      	ldr	r3, [pc, #528]	@ (800b0cc <_dtoa_r+0x2d4>)
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b0e0 <_dtoa_r+0x2e8>
 800aec2:	f000 bd33 	b.w	800b92c <_dtoa_r+0xb34>
 800aec6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aeca:	aa16      	add	r2, sp, #88	@ 0x58
 800aecc:	a917      	add	r1, sp, #92	@ 0x5c
 800aece:	4658      	mov	r0, fp
 800aed0:	f001 f980 	bl	800c1d4 <__d2b>
 800aed4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aed8:	4681      	mov	r9, r0
 800aeda:	2e00      	cmp	r6, #0
 800aedc:	d077      	beq.n	800afce <_dtoa_r+0x1d6>
 800aede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aee0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aef0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aef4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aef8:	4619      	mov	r1, r3
 800aefa:	2200      	movs	r2, #0
 800aefc:	4b74      	ldr	r3, [pc, #464]	@ (800b0d0 <_dtoa_r+0x2d8>)
 800aefe:	f7f5 f9cb 	bl	8000298 <__aeabi_dsub>
 800af02:	a369      	add	r3, pc, #420	@ (adr r3, 800b0a8 <_dtoa_r+0x2b0>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7f5 fb7e 	bl	8000608 <__aeabi_dmul>
 800af0c:	a368      	add	r3, pc, #416	@ (adr r3, 800b0b0 <_dtoa_r+0x2b8>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 f9c3 	bl	800029c <__adddf3>
 800af16:	4604      	mov	r4, r0
 800af18:	4630      	mov	r0, r6
 800af1a:	460d      	mov	r5, r1
 800af1c:	f7f5 fb0a 	bl	8000534 <__aeabi_i2d>
 800af20:	a365      	add	r3, pc, #404	@ (adr r3, 800b0b8 <_dtoa_r+0x2c0>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 fb6f 	bl	8000608 <__aeabi_dmul>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4620      	mov	r0, r4
 800af30:	4629      	mov	r1, r5
 800af32:	f7f5 f9b3 	bl	800029c <__adddf3>
 800af36:	4604      	mov	r4, r0
 800af38:	460d      	mov	r5, r1
 800af3a:	f7f5 fe15 	bl	8000b68 <__aeabi_d2iz>
 800af3e:	2200      	movs	r2, #0
 800af40:	4607      	mov	r7, r0
 800af42:	2300      	movs	r3, #0
 800af44:	4620      	mov	r0, r4
 800af46:	4629      	mov	r1, r5
 800af48:	f7f5 fdd0 	bl	8000aec <__aeabi_dcmplt>
 800af4c:	b140      	cbz	r0, 800af60 <_dtoa_r+0x168>
 800af4e:	4638      	mov	r0, r7
 800af50:	f7f5 faf0 	bl	8000534 <__aeabi_i2d>
 800af54:	4622      	mov	r2, r4
 800af56:	462b      	mov	r3, r5
 800af58:	f7f5 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800af5c:	b900      	cbnz	r0, 800af60 <_dtoa_r+0x168>
 800af5e:	3f01      	subs	r7, #1
 800af60:	2f16      	cmp	r7, #22
 800af62:	d851      	bhi.n	800b008 <_dtoa_r+0x210>
 800af64:	4b5b      	ldr	r3, [pc, #364]	@ (800b0d4 <_dtoa_r+0x2dc>)
 800af66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af72:	f7f5 fdbb 	bl	8000aec <__aeabi_dcmplt>
 800af76:	2800      	cmp	r0, #0
 800af78:	d048      	beq.n	800b00c <_dtoa_r+0x214>
 800af7a:	3f01      	subs	r7, #1
 800af7c:	2300      	movs	r3, #0
 800af7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800af80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af82:	1b9b      	subs	r3, r3, r6
 800af84:	1e5a      	subs	r2, r3, #1
 800af86:	bf44      	itt	mi
 800af88:	f1c3 0801 	rsbmi	r8, r3, #1
 800af8c:	2300      	movmi	r3, #0
 800af8e:	9208      	str	r2, [sp, #32]
 800af90:	bf54      	ite	pl
 800af92:	f04f 0800 	movpl.w	r8, #0
 800af96:	9308      	strmi	r3, [sp, #32]
 800af98:	2f00      	cmp	r7, #0
 800af9a:	db39      	blt.n	800b010 <_dtoa_r+0x218>
 800af9c:	9b08      	ldr	r3, [sp, #32]
 800af9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800afa0:	443b      	add	r3, r7
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	2300      	movs	r3, #0
 800afa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d864      	bhi.n	800b078 <_dtoa_r+0x280>
 800afae:	2b05      	cmp	r3, #5
 800afb0:	bfc4      	itt	gt
 800afb2:	3b04      	subgt	r3, #4
 800afb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800afb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb8:	f1a3 0302 	sub.w	r3, r3, #2
 800afbc:	bfcc      	ite	gt
 800afbe:	2400      	movgt	r4, #0
 800afc0:	2401      	movle	r4, #1
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d863      	bhi.n	800b08e <_dtoa_r+0x296>
 800afc6:	e8df f003 	tbb	[pc, r3]
 800afca:	372a      	.short	0x372a
 800afcc:	5535      	.short	0x5535
 800afce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800afd2:	441e      	add	r6, r3
 800afd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800afd8:	2b20      	cmp	r3, #32
 800afda:	bfc1      	itttt	gt
 800afdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800afe0:	409f      	lslgt	r7, r3
 800afe2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800afe6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800afea:	bfd6      	itet	le
 800afec:	f1c3 0320 	rsble	r3, r3, #32
 800aff0:	ea47 0003 	orrgt.w	r0, r7, r3
 800aff4:	fa04 f003 	lslle.w	r0, r4, r3
 800aff8:	f7f5 fa8c 	bl	8000514 <__aeabi_ui2d>
 800affc:	2201      	movs	r2, #1
 800affe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b002:	3e01      	subs	r6, #1
 800b004:	9214      	str	r2, [sp, #80]	@ 0x50
 800b006:	e777      	b.n	800aef8 <_dtoa_r+0x100>
 800b008:	2301      	movs	r3, #1
 800b00a:	e7b8      	b.n	800af7e <_dtoa_r+0x186>
 800b00c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b00e:	e7b7      	b.n	800af80 <_dtoa_r+0x188>
 800b010:	427b      	negs	r3, r7
 800b012:	930a      	str	r3, [sp, #40]	@ 0x28
 800b014:	2300      	movs	r3, #0
 800b016:	eba8 0807 	sub.w	r8, r8, r7
 800b01a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b01c:	e7c4      	b.n	800afa8 <_dtoa_r+0x1b0>
 800b01e:	2300      	movs	r3, #0
 800b020:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b024:	2b00      	cmp	r3, #0
 800b026:	dc35      	bgt.n	800b094 <_dtoa_r+0x29c>
 800b028:	2301      	movs	r3, #1
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	9307      	str	r3, [sp, #28]
 800b02e:	461a      	mov	r2, r3
 800b030:	920e      	str	r2, [sp, #56]	@ 0x38
 800b032:	e00b      	b.n	800b04c <_dtoa_r+0x254>
 800b034:	2301      	movs	r3, #1
 800b036:	e7f3      	b.n	800b020 <_dtoa_r+0x228>
 800b038:	2300      	movs	r3, #0
 800b03a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b03e:	18fb      	adds	r3, r7, r3
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	2b01      	cmp	r3, #1
 800b046:	9307      	str	r3, [sp, #28]
 800b048:	bfb8      	it	lt
 800b04a:	2301      	movlt	r3, #1
 800b04c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b050:	2100      	movs	r1, #0
 800b052:	2204      	movs	r2, #4
 800b054:	f102 0514 	add.w	r5, r2, #20
 800b058:	429d      	cmp	r5, r3
 800b05a:	d91f      	bls.n	800b09c <_dtoa_r+0x2a4>
 800b05c:	6041      	str	r1, [r0, #4]
 800b05e:	4658      	mov	r0, fp
 800b060:	f000 fd8e 	bl	800bb80 <_Balloc>
 800b064:	4682      	mov	sl, r0
 800b066:	2800      	cmp	r0, #0
 800b068:	d13c      	bne.n	800b0e4 <_dtoa_r+0x2ec>
 800b06a:	4b1b      	ldr	r3, [pc, #108]	@ (800b0d8 <_dtoa_r+0x2e0>)
 800b06c:	4602      	mov	r2, r0
 800b06e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b072:	e6d8      	b.n	800ae26 <_dtoa_r+0x2e>
 800b074:	2301      	movs	r3, #1
 800b076:	e7e0      	b.n	800b03a <_dtoa_r+0x242>
 800b078:	2401      	movs	r4, #1
 800b07a:	2300      	movs	r3, #0
 800b07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	9307      	str	r3, [sp, #28]
 800b088:	2200      	movs	r2, #0
 800b08a:	2312      	movs	r3, #18
 800b08c:	e7d0      	b.n	800b030 <_dtoa_r+0x238>
 800b08e:	2301      	movs	r3, #1
 800b090:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b092:	e7f5      	b.n	800b080 <_dtoa_r+0x288>
 800b094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	9307      	str	r3, [sp, #28]
 800b09a:	e7d7      	b.n	800b04c <_dtoa_r+0x254>
 800b09c:	3101      	adds	r1, #1
 800b09e:	0052      	lsls	r2, r2, #1
 800b0a0:	e7d8      	b.n	800b054 <_dtoa_r+0x25c>
 800b0a2:	bf00      	nop
 800b0a4:	f3af 8000 	nop.w
 800b0a8:	636f4361 	.word	0x636f4361
 800b0ac:	3fd287a7 	.word	0x3fd287a7
 800b0b0:	8b60c8b3 	.word	0x8b60c8b3
 800b0b4:	3fc68a28 	.word	0x3fc68a28
 800b0b8:	509f79fb 	.word	0x509f79fb
 800b0bc:	3fd34413 	.word	0x3fd34413
 800b0c0:	0800f3b1 	.word	0x0800f3b1
 800b0c4:	0800f3c8 	.word	0x0800f3c8
 800b0c8:	7ff00000 	.word	0x7ff00000
 800b0cc:	0800f381 	.word	0x0800f381
 800b0d0:	3ff80000 	.word	0x3ff80000
 800b0d4:	0800f4c0 	.word	0x0800f4c0
 800b0d8:	0800f420 	.word	0x0800f420
 800b0dc:	0800f3ad 	.word	0x0800f3ad
 800b0e0:	0800f380 	.word	0x0800f380
 800b0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0e8:	6018      	str	r0, [r3, #0]
 800b0ea:	9b07      	ldr	r3, [sp, #28]
 800b0ec:	2b0e      	cmp	r3, #14
 800b0ee:	f200 80a4 	bhi.w	800b23a <_dtoa_r+0x442>
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	f000 80a1 	beq.w	800b23a <_dtoa_r+0x442>
 800b0f8:	2f00      	cmp	r7, #0
 800b0fa:	dd33      	ble.n	800b164 <_dtoa_r+0x36c>
 800b0fc:	4bad      	ldr	r3, [pc, #692]	@ (800b3b4 <_dtoa_r+0x5bc>)
 800b0fe:	f007 020f 	and.w	r2, r7, #15
 800b102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b106:	ed93 7b00 	vldr	d7, [r3]
 800b10a:	05f8      	lsls	r0, r7, #23
 800b10c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b110:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b114:	d516      	bpl.n	800b144 <_dtoa_r+0x34c>
 800b116:	4ba8      	ldr	r3, [pc, #672]	@ (800b3b8 <_dtoa_r+0x5c0>)
 800b118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b11c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b120:	f7f5 fb9c 	bl	800085c <__aeabi_ddiv>
 800b124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b128:	f004 040f 	and.w	r4, r4, #15
 800b12c:	2603      	movs	r6, #3
 800b12e:	4da2      	ldr	r5, [pc, #648]	@ (800b3b8 <_dtoa_r+0x5c0>)
 800b130:	b954      	cbnz	r4, 800b148 <_dtoa_r+0x350>
 800b132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13a:	f7f5 fb8f 	bl	800085c <__aeabi_ddiv>
 800b13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b142:	e028      	b.n	800b196 <_dtoa_r+0x39e>
 800b144:	2602      	movs	r6, #2
 800b146:	e7f2      	b.n	800b12e <_dtoa_r+0x336>
 800b148:	07e1      	lsls	r1, r4, #31
 800b14a:	d508      	bpl.n	800b15e <_dtoa_r+0x366>
 800b14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b150:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b154:	f7f5 fa58 	bl	8000608 <__aeabi_dmul>
 800b158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b15c:	3601      	adds	r6, #1
 800b15e:	1064      	asrs	r4, r4, #1
 800b160:	3508      	adds	r5, #8
 800b162:	e7e5      	b.n	800b130 <_dtoa_r+0x338>
 800b164:	f000 80d2 	beq.w	800b30c <_dtoa_r+0x514>
 800b168:	427c      	negs	r4, r7
 800b16a:	4b92      	ldr	r3, [pc, #584]	@ (800b3b4 <_dtoa_r+0x5bc>)
 800b16c:	4d92      	ldr	r5, [pc, #584]	@ (800b3b8 <_dtoa_r+0x5c0>)
 800b16e:	f004 020f 	and.w	r2, r4, #15
 800b172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b17e:	f7f5 fa43 	bl	8000608 <__aeabi_dmul>
 800b182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b186:	1124      	asrs	r4, r4, #4
 800b188:	2300      	movs	r3, #0
 800b18a:	2602      	movs	r6, #2
 800b18c:	2c00      	cmp	r4, #0
 800b18e:	f040 80b2 	bne.w	800b2f6 <_dtoa_r+0x4fe>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1d3      	bne.n	800b13e <_dtoa_r+0x346>
 800b196:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b198:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 80b7 	beq.w	800b310 <_dtoa_r+0x518>
 800b1a2:	4b86      	ldr	r3, [pc, #536]	@ (800b3bc <_dtoa_r+0x5c4>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	f7f5 fc9f 	bl	8000aec <__aeabi_dcmplt>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f000 80ae 	beq.w	800b310 <_dtoa_r+0x518>
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 80aa 	beq.w	800b310 <_dtoa_r+0x518>
 800b1bc:	9b00      	ldr	r3, [sp, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dd37      	ble.n	800b232 <_dtoa_r+0x43a>
 800b1c2:	1e7b      	subs	r3, r7, #1
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4b7d      	ldr	r3, [pc, #500]	@ (800b3c0 <_dtoa_r+0x5c8>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	f7f5 fa1b 	bl	8000608 <__aeabi_dmul>
 800b1d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1d6:	9c00      	ldr	r4, [sp, #0]
 800b1d8:	3601      	adds	r6, #1
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7f5 f9aa 	bl	8000534 <__aeabi_i2d>
 800b1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1e4:	f7f5 fa10 	bl	8000608 <__aeabi_dmul>
 800b1e8:	4b76      	ldr	r3, [pc, #472]	@ (800b3c4 <_dtoa_r+0x5cc>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f7f5 f856 	bl	800029c <__adddf3>
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b1f6:	2c00      	cmp	r4, #0
 800b1f8:	f040 808d 	bne.w	800b316 <_dtoa_r+0x51e>
 800b1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b200:	4b71      	ldr	r3, [pc, #452]	@ (800b3c8 <_dtoa_r+0x5d0>)
 800b202:	2200      	movs	r2, #0
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b210:	462a      	mov	r2, r5
 800b212:	4633      	mov	r3, r6
 800b214:	f7f5 fc88 	bl	8000b28 <__aeabi_dcmpgt>
 800b218:	2800      	cmp	r0, #0
 800b21a:	f040 828b 	bne.w	800b734 <_dtoa_r+0x93c>
 800b21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b222:	462a      	mov	r2, r5
 800b224:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b228:	f7f5 fc60 	bl	8000aec <__aeabi_dcmplt>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f040 8128 	bne.w	800b482 <_dtoa_r+0x68a>
 800b232:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b236:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b23a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f2c0 815a 	blt.w	800b4f6 <_dtoa_r+0x6fe>
 800b242:	2f0e      	cmp	r7, #14
 800b244:	f300 8157 	bgt.w	800b4f6 <_dtoa_r+0x6fe>
 800b248:	4b5a      	ldr	r3, [pc, #360]	@ (800b3b4 <_dtoa_r+0x5bc>)
 800b24a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b24e:	ed93 7b00 	vldr	d7, [r3]
 800b252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	ed8d 7b00 	vstr	d7, [sp]
 800b25a:	da03      	bge.n	800b264 <_dtoa_r+0x46c>
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f340 8101 	ble.w	800b466 <_dtoa_r+0x66e>
 800b264:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b268:	4656      	mov	r6, sl
 800b26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b26e:	4620      	mov	r0, r4
 800b270:	4629      	mov	r1, r5
 800b272:	f7f5 faf3 	bl	800085c <__aeabi_ddiv>
 800b276:	f7f5 fc77 	bl	8000b68 <__aeabi_d2iz>
 800b27a:	4680      	mov	r8, r0
 800b27c:	f7f5 f95a 	bl	8000534 <__aeabi_i2d>
 800b280:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b284:	f7f5 f9c0 	bl	8000608 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b294:	f7f5 f800 	bl	8000298 <__aeabi_dsub>
 800b298:	f806 4b01 	strb.w	r4, [r6], #1
 800b29c:	9d07      	ldr	r5, [sp, #28]
 800b29e:	eba6 040a 	sub.w	r4, r6, sl
 800b2a2:	42a5      	cmp	r5, r4
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	f040 8117 	bne.w	800b4da <_dtoa_r+0x6e2>
 800b2ac:	f7f4 fff6 	bl	800029c <__adddf3>
 800b2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	460d      	mov	r5, r1
 800b2b8:	f7f5 fc36 	bl	8000b28 <__aeabi_dcmpgt>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f040 80f9 	bne.w	800b4b4 <_dtoa_r+0x6bc>
 800b2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f5 fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ce:	b118      	cbz	r0, 800b2d8 <_dtoa_r+0x4e0>
 800b2d0:	f018 0f01 	tst.w	r8, #1
 800b2d4:	f040 80ee 	bne.w	800b4b4 <_dtoa_r+0x6bc>
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f000 fc90 	bl	800bc00 <_Bfree>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	7033      	strb	r3, [r6, #0]
 800b2e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2e6:	3701      	adds	r7, #1
 800b2e8:	601f      	str	r7, [r3, #0]
 800b2ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 831d 	beq.w	800b92c <_dtoa_r+0xb34>
 800b2f2:	601e      	str	r6, [r3, #0]
 800b2f4:	e31a      	b.n	800b92c <_dtoa_r+0xb34>
 800b2f6:	07e2      	lsls	r2, r4, #31
 800b2f8:	d505      	bpl.n	800b306 <_dtoa_r+0x50e>
 800b2fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2fe:	f7f5 f983 	bl	8000608 <__aeabi_dmul>
 800b302:	3601      	adds	r6, #1
 800b304:	2301      	movs	r3, #1
 800b306:	1064      	asrs	r4, r4, #1
 800b308:	3508      	adds	r5, #8
 800b30a:	e73f      	b.n	800b18c <_dtoa_r+0x394>
 800b30c:	2602      	movs	r6, #2
 800b30e:	e742      	b.n	800b196 <_dtoa_r+0x39e>
 800b310:	9c07      	ldr	r4, [sp, #28]
 800b312:	9704      	str	r7, [sp, #16]
 800b314:	e761      	b.n	800b1da <_dtoa_r+0x3e2>
 800b316:	4b27      	ldr	r3, [pc, #156]	@ (800b3b4 <_dtoa_r+0x5bc>)
 800b318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b31e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b322:	4454      	add	r4, sl
 800b324:	2900      	cmp	r1, #0
 800b326:	d053      	beq.n	800b3d0 <_dtoa_r+0x5d8>
 800b328:	4928      	ldr	r1, [pc, #160]	@ (800b3cc <_dtoa_r+0x5d4>)
 800b32a:	2000      	movs	r0, #0
 800b32c:	f7f5 fa96 	bl	800085c <__aeabi_ddiv>
 800b330:	4633      	mov	r3, r6
 800b332:	462a      	mov	r2, r5
 800b334:	f7f4 ffb0 	bl	8000298 <__aeabi_dsub>
 800b338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b33c:	4656      	mov	r6, sl
 800b33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b342:	f7f5 fc11 	bl	8000b68 <__aeabi_d2iz>
 800b346:	4605      	mov	r5, r0
 800b348:	f7f5 f8f4 	bl	8000534 <__aeabi_i2d>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b354:	f7f4 ffa0 	bl	8000298 <__aeabi_dsub>
 800b358:	3530      	adds	r5, #48	@ 0x30
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b362:	f806 5b01 	strb.w	r5, [r6], #1
 800b366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b36a:	f7f5 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d171      	bne.n	800b456 <_dtoa_r+0x65e>
 800b372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b376:	4911      	ldr	r1, [pc, #68]	@ (800b3bc <_dtoa_r+0x5c4>)
 800b378:	2000      	movs	r0, #0
 800b37a:	f7f4 ff8d 	bl	8000298 <__aeabi_dsub>
 800b37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b382:	f7f5 fbb3 	bl	8000aec <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	f040 8095 	bne.w	800b4b6 <_dtoa_r+0x6be>
 800b38c:	42a6      	cmp	r6, r4
 800b38e:	f43f af50 	beq.w	800b232 <_dtoa_r+0x43a>
 800b392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b396:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c0 <_dtoa_r+0x5c8>)
 800b398:	2200      	movs	r2, #0
 800b39a:	f7f5 f935 	bl	8000608 <__aeabi_dmul>
 800b39e:	4b08      	ldr	r3, [pc, #32]	@ (800b3c0 <_dtoa_r+0x5c8>)
 800b3a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3aa:	f7f5 f92d 	bl	8000608 <__aeabi_dmul>
 800b3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3b2:	e7c4      	b.n	800b33e <_dtoa_r+0x546>
 800b3b4:	0800f4c0 	.word	0x0800f4c0
 800b3b8:	0800f498 	.word	0x0800f498
 800b3bc:	3ff00000 	.word	0x3ff00000
 800b3c0:	40240000 	.word	0x40240000
 800b3c4:	401c0000 	.word	0x401c0000
 800b3c8:	40140000 	.word	0x40140000
 800b3cc:	3fe00000 	.word	0x3fe00000
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f7f5 f918 	bl	8000608 <__aeabi_dmul>
 800b3d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b3de:	4656      	mov	r6, sl
 800b3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e4:	f7f5 fbc0 	bl	8000b68 <__aeabi_d2iz>
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	f7f5 f8a3 	bl	8000534 <__aeabi_i2d>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f6:	f7f4 ff4f 	bl	8000298 <__aeabi_dsub>
 800b3fa:	3530      	adds	r5, #48	@ 0x30
 800b3fc:	f806 5b01 	strb.w	r5, [r6], #1
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	42a6      	cmp	r6, r4
 800b406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b40a:	f04f 0200 	mov.w	r2, #0
 800b40e:	d124      	bne.n	800b45a <_dtoa_r+0x662>
 800b410:	4bac      	ldr	r3, [pc, #688]	@ (800b6c4 <_dtoa_r+0x8cc>)
 800b412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b416:	f7f4 ff41 	bl	800029c <__adddf3>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b422:	f7f5 fb81 	bl	8000b28 <__aeabi_dcmpgt>
 800b426:	2800      	cmp	r0, #0
 800b428:	d145      	bne.n	800b4b6 <_dtoa_r+0x6be>
 800b42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b42e:	49a5      	ldr	r1, [pc, #660]	@ (800b6c4 <_dtoa_r+0x8cc>)
 800b430:	2000      	movs	r0, #0
 800b432:	f7f4 ff31 	bl	8000298 <__aeabi_dsub>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43e:	f7f5 fb55 	bl	8000aec <__aeabi_dcmplt>
 800b442:	2800      	cmp	r0, #0
 800b444:	f43f aef5 	beq.w	800b232 <_dtoa_r+0x43a>
 800b448:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b44a:	1e73      	subs	r3, r6, #1
 800b44c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b44e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b452:	2b30      	cmp	r3, #48	@ 0x30
 800b454:	d0f8      	beq.n	800b448 <_dtoa_r+0x650>
 800b456:	9f04      	ldr	r7, [sp, #16]
 800b458:	e73e      	b.n	800b2d8 <_dtoa_r+0x4e0>
 800b45a:	4b9b      	ldr	r3, [pc, #620]	@ (800b6c8 <_dtoa_r+0x8d0>)
 800b45c:	f7f5 f8d4 	bl	8000608 <__aeabi_dmul>
 800b460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b464:	e7bc      	b.n	800b3e0 <_dtoa_r+0x5e8>
 800b466:	d10c      	bne.n	800b482 <_dtoa_r+0x68a>
 800b468:	4b98      	ldr	r3, [pc, #608]	@ (800b6cc <_dtoa_r+0x8d4>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b470:	f7f5 f8ca 	bl	8000608 <__aeabi_dmul>
 800b474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b478:	f7f5 fb4c 	bl	8000b14 <__aeabi_dcmpge>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	f000 8157 	beq.w	800b730 <_dtoa_r+0x938>
 800b482:	2400      	movs	r4, #0
 800b484:	4625      	mov	r5, r4
 800b486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b488:	43db      	mvns	r3, r3
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	4656      	mov	r6, sl
 800b48e:	2700      	movs	r7, #0
 800b490:	4621      	mov	r1, r4
 800b492:	4658      	mov	r0, fp
 800b494:	f000 fbb4 	bl	800bc00 <_Bfree>
 800b498:	2d00      	cmp	r5, #0
 800b49a:	d0dc      	beq.n	800b456 <_dtoa_r+0x65e>
 800b49c:	b12f      	cbz	r7, 800b4aa <_dtoa_r+0x6b2>
 800b49e:	42af      	cmp	r7, r5
 800b4a0:	d003      	beq.n	800b4aa <_dtoa_r+0x6b2>
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	4658      	mov	r0, fp
 800b4a6:	f000 fbab 	bl	800bc00 <_Bfree>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4658      	mov	r0, fp
 800b4ae:	f000 fba7 	bl	800bc00 <_Bfree>
 800b4b2:	e7d0      	b.n	800b456 <_dtoa_r+0x65e>
 800b4b4:	9704      	str	r7, [sp, #16]
 800b4b6:	4633      	mov	r3, r6
 800b4b8:	461e      	mov	r6, r3
 800b4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4be:	2a39      	cmp	r2, #57	@ 0x39
 800b4c0:	d107      	bne.n	800b4d2 <_dtoa_r+0x6da>
 800b4c2:	459a      	cmp	sl, r3
 800b4c4:	d1f8      	bne.n	800b4b8 <_dtoa_r+0x6c0>
 800b4c6:	9a04      	ldr	r2, [sp, #16]
 800b4c8:	3201      	adds	r2, #1
 800b4ca:	9204      	str	r2, [sp, #16]
 800b4cc:	2230      	movs	r2, #48	@ 0x30
 800b4ce:	f88a 2000 	strb.w	r2, [sl]
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	3201      	adds	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
 800b4d8:	e7bd      	b.n	800b456 <_dtoa_r+0x65e>
 800b4da:	4b7b      	ldr	r3, [pc, #492]	@ (800b6c8 <_dtoa_r+0x8d0>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f7f5 f893 	bl	8000608 <__aeabi_dmul>
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	f7f5 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f43f aebb 	beq.w	800b26a <_dtoa_r+0x472>
 800b4f4:	e6f0      	b.n	800b2d8 <_dtoa_r+0x4e0>
 800b4f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	f000 80db 	beq.w	800b6b4 <_dtoa_r+0x8bc>
 800b4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b500:	2a01      	cmp	r2, #1
 800b502:	f300 80bf 	bgt.w	800b684 <_dtoa_r+0x88c>
 800b506:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b508:	2a00      	cmp	r2, #0
 800b50a:	f000 80b7 	beq.w	800b67c <_dtoa_r+0x884>
 800b50e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b512:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b514:	4646      	mov	r6, r8
 800b516:	9a08      	ldr	r2, [sp, #32]
 800b518:	2101      	movs	r1, #1
 800b51a:	441a      	add	r2, r3
 800b51c:	4658      	mov	r0, fp
 800b51e:	4498      	add	r8, r3
 800b520:	9208      	str	r2, [sp, #32]
 800b522:	f000 fc21 	bl	800bd68 <__i2b>
 800b526:	4605      	mov	r5, r0
 800b528:	b15e      	cbz	r6, 800b542 <_dtoa_r+0x74a>
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	dd08      	ble.n	800b542 <_dtoa_r+0x74a>
 800b530:	42b3      	cmp	r3, r6
 800b532:	9a08      	ldr	r2, [sp, #32]
 800b534:	bfa8      	it	ge
 800b536:	4633      	movge	r3, r6
 800b538:	eba8 0803 	sub.w	r8, r8, r3
 800b53c:	1af6      	subs	r6, r6, r3
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	9308      	str	r3, [sp, #32]
 800b542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b544:	b1f3      	cbz	r3, 800b584 <_dtoa_r+0x78c>
 800b546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80b7 	beq.w	800b6bc <_dtoa_r+0x8c4>
 800b54e:	b18c      	cbz	r4, 800b574 <_dtoa_r+0x77c>
 800b550:	4629      	mov	r1, r5
 800b552:	4622      	mov	r2, r4
 800b554:	4658      	mov	r0, fp
 800b556:	f000 fcc7 	bl	800bee8 <__pow5mult>
 800b55a:	464a      	mov	r2, r9
 800b55c:	4601      	mov	r1, r0
 800b55e:	4605      	mov	r5, r0
 800b560:	4658      	mov	r0, fp
 800b562:	f000 fc17 	bl	800bd94 <__multiply>
 800b566:	4649      	mov	r1, r9
 800b568:	9004      	str	r0, [sp, #16]
 800b56a:	4658      	mov	r0, fp
 800b56c:	f000 fb48 	bl	800bc00 <_Bfree>
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	4699      	mov	r9, r3
 800b574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b576:	1b1a      	subs	r2, r3, r4
 800b578:	d004      	beq.n	800b584 <_dtoa_r+0x78c>
 800b57a:	4649      	mov	r1, r9
 800b57c:	4658      	mov	r0, fp
 800b57e:	f000 fcb3 	bl	800bee8 <__pow5mult>
 800b582:	4681      	mov	r9, r0
 800b584:	2101      	movs	r1, #1
 800b586:	4658      	mov	r0, fp
 800b588:	f000 fbee 	bl	800bd68 <__i2b>
 800b58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b58e:	4604      	mov	r4, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 81cf 	beq.w	800b934 <_dtoa_r+0xb3c>
 800b596:	461a      	mov	r2, r3
 800b598:	4601      	mov	r1, r0
 800b59a:	4658      	mov	r0, fp
 800b59c:	f000 fca4 	bl	800bee8 <__pow5mult>
 800b5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	f300 8095 	bgt.w	800b6d4 <_dtoa_r+0x8dc>
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f040 8087 	bne.w	800b6c0 <_dtoa_r+0x8c8>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f040 8089 	bne.w	800b6d0 <_dtoa_r+0x8d8>
 800b5be:	9b03      	ldr	r3, [sp, #12]
 800b5c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5c4:	0d1b      	lsrs	r3, r3, #20
 800b5c6:	051b      	lsls	r3, r3, #20
 800b5c8:	b12b      	cbz	r3, 800b5d6 <_dtoa_r+0x7de>
 800b5ca:	9b08      	ldr	r3, [sp, #32]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	9308      	str	r3, [sp, #32]
 800b5d0:	f108 0801 	add.w	r8, r8, #1
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 81b0 	beq.w	800b940 <_dtoa_r+0xb48>
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5e6:	6918      	ldr	r0, [r3, #16]
 800b5e8:	f000 fb72 	bl	800bcd0 <__hi0bits>
 800b5ec:	f1c0 0020 	rsb	r0, r0, #32
 800b5f0:	9b08      	ldr	r3, [sp, #32]
 800b5f2:	4418      	add	r0, r3
 800b5f4:	f010 001f 	ands.w	r0, r0, #31
 800b5f8:	d077      	beq.n	800b6ea <_dtoa_r+0x8f2>
 800b5fa:	f1c0 0320 	rsb	r3, r0, #32
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	dd6b      	ble.n	800b6da <_dtoa_r+0x8e2>
 800b602:	9b08      	ldr	r3, [sp, #32]
 800b604:	f1c0 001c 	rsb	r0, r0, #28
 800b608:	4403      	add	r3, r0
 800b60a:	4480      	add	r8, r0
 800b60c:	4406      	add	r6, r0
 800b60e:	9308      	str	r3, [sp, #32]
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	dd05      	ble.n	800b622 <_dtoa_r+0x82a>
 800b616:	4649      	mov	r1, r9
 800b618:	4642      	mov	r2, r8
 800b61a:	4658      	mov	r0, fp
 800b61c:	f000 fcbe 	bl	800bf9c <__lshift>
 800b620:	4681      	mov	r9, r0
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	2b00      	cmp	r3, #0
 800b626:	dd05      	ble.n	800b634 <_dtoa_r+0x83c>
 800b628:	4621      	mov	r1, r4
 800b62a:	461a      	mov	r2, r3
 800b62c:	4658      	mov	r0, fp
 800b62e:	f000 fcb5 	bl	800bf9c <__lshift>
 800b632:	4604      	mov	r4, r0
 800b634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b636:	2b00      	cmp	r3, #0
 800b638:	d059      	beq.n	800b6ee <_dtoa_r+0x8f6>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4648      	mov	r0, r9
 800b63e:	f000 fd19 	bl	800c074 <__mcmp>
 800b642:	2800      	cmp	r0, #0
 800b644:	da53      	bge.n	800b6ee <_dtoa_r+0x8f6>
 800b646:	1e7b      	subs	r3, r7, #1
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	4649      	mov	r1, r9
 800b64c:	2300      	movs	r3, #0
 800b64e:	220a      	movs	r2, #10
 800b650:	4658      	mov	r0, fp
 800b652:	f000 faf7 	bl	800bc44 <__multadd>
 800b656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b658:	4681      	mov	r9, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f000 8172 	beq.w	800b944 <_dtoa_r+0xb4c>
 800b660:	2300      	movs	r3, #0
 800b662:	4629      	mov	r1, r5
 800b664:	220a      	movs	r2, #10
 800b666:	4658      	mov	r0, fp
 800b668:	f000 faec 	bl	800bc44 <__multadd>
 800b66c:	9b00      	ldr	r3, [sp, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	4605      	mov	r5, r0
 800b672:	dc67      	bgt.n	800b744 <_dtoa_r+0x94c>
 800b674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b676:	2b02      	cmp	r3, #2
 800b678:	dc41      	bgt.n	800b6fe <_dtoa_r+0x906>
 800b67a:	e063      	b.n	800b744 <_dtoa_r+0x94c>
 800b67c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b67e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b682:	e746      	b.n	800b512 <_dtoa_r+0x71a>
 800b684:	9b07      	ldr	r3, [sp, #28]
 800b686:	1e5c      	subs	r4, r3, #1
 800b688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b68a:	42a3      	cmp	r3, r4
 800b68c:	bfbf      	itttt	lt
 800b68e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b690:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b692:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b694:	1ae3      	sublt	r3, r4, r3
 800b696:	bfb4      	ite	lt
 800b698:	18d2      	addlt	r2, r2, r3
 800b69a:	1b1c      	subge	r4, r3, r4
 800b69c:	9b07      	ldr	r3, [sp, #28]
 800b69e:	bfbc      	itt	lt
 800b6a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b6a2:	2400      	movlt	r4, #0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bfb5      	itete	lt
 800b6a8:	eba8 0603 	sublt.w	r6, r8, r3
 800b6ac:	9b07      	ldrge	r3, [sp, #28]
 800b6ae:	2300      	movlt	r3, #0
 800b6b0:	4646      	movge	r6, r8
 800b6b2:	e730      	b.n	800b516 <_dtoa_r+0x71e>
 800b6b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b6b8:	4646      	mov	r6, r8
 800b6ba:	e735      	b.n	800b528 <_dtoa_r+0x730>
 800b6bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6be:	e75c      	b.n	800b57a <_dtoa_r+0x782>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e788      	b.n	800b5d6 <_dtoa_r+0x7de>
 800b6c4:	3fe00000 	.word	0x3fe00000
 800b6c8:	40240000 	.word	0x40240000
 800b6cc:	40140000 	.word	0x40140000
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	e780      	b.n	800b5d6 <_dtoa_r+0x7de>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6d8:	e782      	b.n	800b5e0 <_dtoa_r+0x7e8>
 800b6da:	d099      	beq.n	800b610 <_dtoa_r+0x818>
 800b6dc:	9a08      	ldr	r2, [sp, #32]
 800b6de:	331c      	adds	r3, #28
 800b6e0:	441a      	add	r2, r3
 800b6e2:	4498      	add	r8, r3
 800b6e4:	441e      	add	r6, r3
 800b6e6:	9208      	str	r2, [sp, #32]
 800b6e8:	e792      	b.n	800b610 <_dtoa_r+0x818>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	e7f6      	b.n	800b6dc <_dtoa_r+0x8e4>
 800b6ee:	9b07      	ldr	r3, [sp, #28]
 800b6f0:	9704      	str	r7, [sp, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	dc20      	bgt.n	800b738 <_dtoa_r+0x940>
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	dd1e      	ble.n	800b73c <_dtoa_r+0x944>
 800b6fe:	9b00      	ldr	r3, [sp, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	f47f aec0 	bne.w	800b486 <_dtoa_r+0x68e>
 800b706:	4621      	mov	r1, r4
 800b708:	2205      	movs	r2, #5
 800b70a:	4658      	mov	r0, fp
 800b70c:	f000 fa9a 	bl	800bc44 <__multadd>
 800b710:	4601      	mov	r1, r0
 800b712:	4604      	mov	r4, r0
 800b714:	4648      	mov	r0, r9
 800b716:	f000 fcad 	bl	800c074 <__mcmp>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f77f aeb3 	ble.w	800b486 <_dtoa_r+0x68e>
 800b720:	4656      	mov	r6, sl
 800b722:	2331      	movs	r3, #49	@ 0x31
 800b724:	f806 3b01 	strb.w	r3, [r6], #1
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	3301      	adds	r3, #1
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	e6ae      	b.n	800b48e <_dtoa_r+0x696>
 800b730:	9c07      	ldr	r4, [sp, #28]
 800b732:	9704      	str	r7, [sp, #16]
 800b734:	4625      	mov	r5, r4
 800b736:	e7f3      	b.n	800b720 <_dtoa_r+0x928>
 800b738:	9b07      	ldr	r3, [sp, #28]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 8104 	beq.w	800b94c <_dtoa_r+0xb54>
 800b744:	2e00      	cmp	r6, #0
 800b746:	dd05      	ble.n	800b754 <_dtoa_r+0x95c>
 800b748:	4629      	mov	r1, r5
 800b74a:	4632      	mov	r2, r6
 800b74c:	4658      	mov	r0, fp
 800b74e:	f000 fc25 	bl	800bf9c <__lshift>
 800b752:	4605      	mov	r5, r0
 800b754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b756:	2b00      	cmp	r3, #0
 800b758:	d05a      	beq.n	800b810 <_dtoa_r+0xa18>
 800b75a:	6869      	ldr	r1, [r5, #4]
 800b75c:	4658      	mov	r0, fp
 800b75e:	f000 fa0f 	bl	800bb80 <_Balloc>
 800b762:	4606      	mov	r6, r0
 800b764:	b928      	cbnz	r0, 800b772 <_dtoa_r+0x97a>
 800b766:	4b84      	ldr	r3, [pc, #528]	@ (800b978 <_dtoa_r+0xb80>)
 800b768:	4602      	mov	r2, r0
 800b76a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b76e:	f7ff bb5a 	b.w	800ae26 <_dtoa_r+0x2e>
 800b772:	692a      	ldr	r2, [r5, #16]
 800b774:	3202      	adds	r2, #2
 800b776:	0092      	lsls	r2, r2, #2
 800b778:	f105 010c 	add.w	r1, r5, #12
 800b77c:	300c      	adds	r0, #12
 800b77e:	f7ff faa4 	bl	800acca <memcpy>
 800b782:	2201      	movs	r2, #1
 800b784:	4631      	mov	r1, r6
 800b786:	4658      	mov	r0, fp
 800b788:	f000 fc08 	bl	800bf9c <__lshift>
 800b78c:	f10a 0301 	add.w	r3, sl, #1
 800b790:	9307      	str	r3, [sp, #28]
 800b792:	9b00      	ldr	r3, [sp, #0]
 800b794:	4453      	add	r3, sl
 800b796:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	462f      	mov	r7, r5
 800b7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	9b07      	ldr	r3, [sp, #28]
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	4648      	mov	r0, r9
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	f7ff fa9a 	bl	800ace6 <quorem>
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	9002      	str	r0, [sp, #8]
 800b7b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7ba:	4648      	mov	r0, r9
 800b7bc:	f000 fc5a 	bl	800c074 <__mcmp>
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	9008      	str	r0, [sp, #32]
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4658      	mov	r0, fp
 800b7c8:	f000 fc70 	bl	800c0ac <__mdiff>
 800b7cc:	68c2      	ldr	r2, [r0, #12]
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	bb02      	cbnz	r2, 800b814 <_dtoa_r+0xa1c>
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	4648      	mov	r0, r9
 800b7d6:	f000 fc4d 	bl	800c074 <__mcmp>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4631      	mov	r1, r6
 800b7de:	4658      	mov	r0, fp
 800b7e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7e2:	f000 fa0d 	bl	800bc00 <_Bfree>
 800b7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7ea:	9e07      	ldr	r6, [sp, #28]
 800b7ec:	ea43 0102 	orr.w	r1, r3, r2
 800b7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7f2:	4319      	orrs	r1, r3
 800b7f4:	d110      	bne.n	800b818 <_dtoa_r+0xa20>
 800b7f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7fa:	d029      	beq.n	800b850 <_dtoa_r+0xa58>
 800b7fc:	9b08      	ldr	r3, [sp, #32]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd02      	ble.n	800b808 <_dtoa_r+0xa10>
 800b802:	9b02      	ldr	r3, [sp, #8]
 800b804:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b808:	9b00      	ldr	r3, [sp, #0]
 800b80a:	f883 8000 	strb.w	r8, [r3]
 800b80e:	e63f      	b.n	800b490 <_dtoa_r+0x698>
 800b810:	4628      	mov	r0, r5
 800b812:	e7bb      	b.n	800b78c <_dtoa_r+0x994>
 800b814:	2201      	movs	r2, #1
 800b816:	e7e1      	b.n	800b7dc <_dtoa_r+0x9e4>
 800b818:	9b08      	ldr	r3, [sp, #32]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	db04      	blt.n	800b828 <_dtoa_r+0xa30>
 800b81e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b820:	430b      	orrs	r3, r1
 800b822:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b824:	430b      	orrs	r3, r1
 800b826:	d120      	bne.n	800b86a <_dtoa_r+0xa72>
 800b828:	2a00      	cmp	r2, #0
 800b82a:	dded      	ble.n	800b808 <_dtoa_r+0xa10>
 800b82c:	4649      	mov	r1, r9
 800b82e:	2201      	movs	r2, #1
 800b830:	4658      	mov	r0, fp
 800b832:	f000 fbb3 	bl	800bf9c <__lshift>
 800b836:	4621      	mov	r1, r4
 800b838:	4681      	mov	r9, r0
 800b83a:	f000 fc1b 	bl	800c074 <__mcmp>
 800b83e:	2800      	cmp	r0, #0
 800b840:	dc03      	bgt.n	800b84a <_dtoa_r+0xa52>
 800b842:	d1e1      	bne.n	800b808 <_dtoa_r+0xa10>
 800b844:	f018 0f01 	tst.w	r8, #1
 800b848:	d0de      	beq.n	800b808 <_dtoa_r+0xa10>
 800b84a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b84e:	d1d8      	bne.n	800b802 <_dtoa_r+0xa0a>
 800b850:	9a00      	ldr	r2, [sp, #0]
 800b852:	2339      	movs	r3, #57	@ 0x39
 800b854:	7013      	strb	r3, [r2, #0]
 800b856:	4633      	mov	r3, r6
 800b858:	461e      	mov	r6, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b860:	2a39      	cmp	r2, #57	@ 0x39
 800b862:	d052      	beq.n	800b90a <_dtoa_r+0xb12>
 800b864:	3201      	adds	r2, #1
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	e612      	b.n	800b490 <_dtoa_r+0x698>
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	dd07      	ble.n	800b87e <_dtoa_r+0xa86>
 800b86e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b872:	d0ed      	beq.n	800b850 <_dtoa_r+0xa58>
 800b874:	9a00      	ldr	r2, [sp, #0]
 800b876:	f108 0301 	add.w	r3, r8, #1
 800b87a:	7013      	strb	r3, [r2, #0]
 800b87c:	e608      	b.n	800b490 <_dtoa_r+0x698>
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	9a07      	ldr	r2, [sp, #28]
 800b882:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b888:	4293      	cmp	r3, r2
 800b88a:	d028      	beq.n	800b8de <_dtoa_r+0xae6>
 800b88c:	4649      	mov	r1, r9
 800b88e:	2300      	movs	r3, #0
 800b890:	220a      	movs	r2, #10
 800b892:	4658      	mov	r0, fp
 800b894:	f000 f9d6 	bl	800bc44 <__multadd>
 800b898:	42af      	cmp	r7, r5
 800b89a:	4681      	mov	r9, r0
 800b89c:	f04f 0300 	mov.w	r3, #0
 800b8a0:	f04f 020a 	mov.w	r2, #10
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	4658      	mov	r0, fp
 800b8a8:	d107      	bne.n	800b8ba <_dtoa_r+0xac2>
 800b8aa:	f000 f9cb 	bl	800bc44 <__multadd>
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	9b07      	ldr	r3, [sp, #28]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	9307      	str	r3, [sp, #28]
 800b8b8:	e774      	b.n	800b7a4 <_dtoa_r+0x9ac>
 800b8ba:	f000 f9c3 	bl	800bc44 <__multadd>
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	220a      	movs	r2, #10
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	f000 f9bc 	bl	800bc44 <__multadd>
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	e7f0      	b.n	800b8b2 <_dtoa_r+0xaba>
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bfcc      	ite	gt
 800b8d6:	461e      	movgt	r6, r3
 800b8d8:	2601      	movle	r6, #1
 800b8da:	4456      	add	r6, sl
 800b8dc:	2700      	movs	r7, #0
 800b8de:	4649      	mov	r1, r9
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	4658      	mov	r0, fp
 800b8e4:	f000 fb5a 	bl	800bf9c <__lshift>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4681      	mov	r9, r0
 800b8ec:	f000 fbc2 	bl	800c074 <__mcmp>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	dcb0      	bgt.n	800b856 <_dtoa_r+0xa5e>
 800b8f4:	d102      	bne.n	800b8fc <_dtoa_r+0xb04>
 800b8f6:	f018 0f01 	tst.w	r8, #1
 800b8fa:	d1ac      	bne.n	800b856 <_dtoa_r+0xa5e>
 800b8fc:	4633      	mov	r3, r6
 800b8fe:	461e      	mov	r6, r3
 800b900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b904:	2a30      	cmp	r2, #48	@ 0x30
 800b906:	d0fa      	beq.n	800b8fe <_dtoa_r+0xb06>
 800b908:	e5c2      	b.n	800b490 <_dtoa_r+0x698>
 800b90a:	459a      	cmp	sl, r3
 800b90c:	d1a4      	bne.n	800b858 <_dtoa_r+0xa60>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	3301      	adds	r3, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	2331      	movs	r3, #49	@ 0x31
 800b916:	f88a 3000 	strb.w	r3, [sl]
 800b91a:	e5b9      	b.n	800b490 <_dtoa_r+0x698>
 800b91c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b91e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b97c <_dtoa_r+0xb84>
 800b922:	b11b      	cbz	r3, 800b92c <_dtoa_r+0xb34>
 800b924:	f10a 0308 	add.w	r3, sl, #8
 800b928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	4650      	mov	r0, sl
 800b92e:	b019      	add	sp, #100	@ 0x64
 800b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b936:	2b01      	cmp	r3, #1
 800b938:	f77f ae37 	ble.w	800b5aa <_dtoa_r+0x7b2>
 800b93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b93e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b940:	2001      	movs	r0, #1
 800b942:	e655      	b.n	800b5f0 <_dtoa_r+0x7f8>
 800b944:	9b00      	ldr	r3, [sp, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f77f aed6 	ble.w	800b6f8 <_dtoa_r+0x900>
 800b94c:	4656      	mov	r6, sl
 800b94e:	4621      	mov	r1, r4
 800b950:	4648      	mov	r0, r9
 800b952:	f7ff f9c8 	bl	800ace6 <quorem>
 800b956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b95a:	f806 8b01 	strb.w	r8, [r6], #1
 800b95e:	9b00      	ldr	r3, [sp, #0]
 800b960:	eba6 020a 	sub.w	r2, r6, sl
 800b964:	4293      	cmp	r3, r2
 800b966:	ddb3      	ble.n	800b8d0 <_dtoa_r+0xad8>
 800b968:	4649      	mov	r1, r9
 800b96a:	2300      	movs	r3, #0
 800b96c:	220a      	movs	r2, #10
 800b96e:	4658      	mov	r0, fp
 800b970:	f000 f968 	bl	800bc44 <__multadd>
 800b974:	4681      	mov	r9, r0
 800b976:	e7ea      	b.n	800b94e <_dtoa_r+0xb56>
 800b978:	0800f420 	.word	0x0800f420
 800b97c:	0800f3a4 	.word	0x0800f3a4

0800b980 <_free_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4605      	mov	r5, r0
 800b984:	2900      	cmp	r1, #0
 800b986:	d041      	beq.n	800ba0c <_free_r+0x8c>
 800b988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98c:	1f0c      	subs	r4, r1, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfb8      	it	lt
 800b992:	18e4      	addlt	r4, r4, r3
 800b994:	f000 f8e8 	bl	800bb68 <__malloc_lock>
 800b998:	4a1d      	ldr	r2, [pc, #116]	@ (800ba10 <_free_r+0x90>)
 800b99a:	6813      	ldr	r3, [r2, #0]
 800b99c:	b933      	cbnz	r3, 800b9ac <_free_r+0x2c>
 800b99e:	6063      	str	r3, [r4, #4]
 800b9a0:	6014      	str	r4, [r2, #0]
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9a8:	f000 b8e4 	b.w	800bb74 <__malloc_unlock>
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	d908      	bls.n	800b9c2 <_free_r+0x42>
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	1821      	adds	r1, r4, r0
 800b9b4:	428b      	cmp	r3, r1
 800b9b6:	bf01      	itttt	eq
 800b9b8:	6819      	ldreq	r1, [r3, #0]
 800b9ba:	685b      	ldreq	r3, [r3, #4]
 800b9bc:	1809      	addeq	r1, r1, r0
 800b9be:	6021      	streq	r1, [r4, #0]
 800b9c0:	e7ed      	b.n	800b99e <_free_r+0x1e>
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	b10b      	cbz	r3, 800b9cc <_free_r+0x4c>
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	d9fa      	bls.n	800b9c2 <_free_r+0x42>
 800b9cc:	6811      	ldr	r1, [r2, #0]
 800b9ce:	1850      	adds	r0, r2, r1
 800b9d0:	42a0      	cmp	r0, r4
 800b9d2:	d10b      	bne.n	800b9ec <_free_r+0x6c>
 800b9d4:	6820      	ldr	r0, [r4, #0]
 800b9d6:	4401      	add	r1, r0
 800b9d8:	1850      	adds	r0, r2, r1
 800b9da:	4283      	cmp	r3, r0
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	d1e0      	bne.n	800b9a2 <_free_r+0x22>
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	6053      	str	r3, [r2, #4]
 800b9e6:	4408      	add	r0, r1
 800b9e8:	6010      	str	r0, [r2, #0]
 800b9ea:	e7da      	b.n	800b9a2 <_free_r+0x22>
 800b9ec:	d902      	bls.n	800b9f4 <_free_r+0x74>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	e7d6      	b.n	800b9a2 <_free_r+0x22>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	1821      	adds	r1, r4, r0
 800b9f8:	428b      	cmp	r3, r1
 800b9fa:	bf04      	itt	eq
 800b9fc:	6819      	ldreq	r1, [r3, #0]
 800b9fe:	685b      	ldreq	r3, [r3, #4]
 800ba00:	6063      	str	r3, [r4, #4]
 800ba02:	bf04      	itt	eq
 800ba04:	1809      	addeq	r1, r1, r0
 800ba06:	6021      	streq	r1, [r4, #0]
 800ba08:	6054      	str	r4, [r2, #4]
 800ba0a:	e7ca      	b.n	800b9a2 <_free_r+0x22>
 800ba0c:	bd38      	pop	{r3, r4, r5, pc}
 800ba0e:	bf00      	nop
 800ba10:	20000788 	.word	0x20000788

0800ba14 <malloc>:
 800ba14:	4b02      	ldr	r3, [pc, #8]	@ (800ba20 <malloc+0xc>)
 800ba16:	4601      	mov	r1, r0
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	f000 b825 	b.w	800ba68 <_malloc_r>
 800ba1e:	bf00      	nop
 800ba20:	20000034 	.word	0x20000034

0800ba24 <sbrk_aligned>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	4e0f      	ldr	r6, [pc, #60]	@ (800ba64 <sbrk_aligned+0x40>)
 800ba28:	460c      	mov	r4, r1
 800ba2a:	6831      	ldr	r1, [r6, #0]
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	b911      	cbnz	r1, 800ba36 <sbrk_aligned+0x12>
 800ba30:	f000 fe46 	bl	800c6c0 <_sbrk_r>
 800ba34:	6030      	str	r0, [r6, #0]
 800ba36:	4621      	mov	r1, r4
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f000 fe41 	bl	800c6c0 <_sbrk_r>
 800ba3e:	1c43      	adds	r3, r0, #1
 800ba40:	d103      	bne.n	800ba4a <sbrk_aligned+0x26>
 800ba42:	f04f 34ff 	mov.w	r4, #4294967295
 800ba46:	4620      	mov	r0, r4
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	1cc4      	adds	r4, r0, #3
 800ba4c:	f024 0403 	bic.w	r4, r4, #3
 800ba50:	42a0      	cmp	r0, r4
 800ba52:	d0f8      	beq.n	800ba46 <sbrk_aligned+0x22>
 800ba54:	1a21      	subs	r1, r4, r0
 800ba56:	4628      	mov	r0, r5
 800ba58:	f000 fe32 	bl	800c6c0 <_sbrk_r>
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d1f2      	bne.n	800ba46 <sbrk_aligned+0x22>
 800ba60:	e7ef      	b.n	800ba42 <sbrk_aligned+0x1e>
 800ba62:	bf00      	nop
 800ba64:	20000784 	.word	0x20000784

0800ba68 <_malloc_r>:
 800ba68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba6c:	1ccd      	adds	r5, r1, #3
 800ba6e:	f025 0503 	bic.w	r5, r5, #3
 800ba72:	3508      	adds	r5, #8
 800ba74:	2d0c      	cmp	r5, #12
 800ba76:	bf38      	it	cc
 800ba78:	250c      	movcc	r5, #12
 800ba7a:	2d00      	cmp	r5, #0
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	db01      	blt.n	800ba84 <_malloc_r+0x1c>
 800ba80:	42a9      	cmp	r1, r5
 800ba82:	d904      	bls.n	800ba8e <_malloc_r+0x26>
 800ba84:	230c      	movs	r3, #12
 800ba86:	6033      	str	r3, [r6, #0]
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb64 <_malloc_r+0xfc>
 800ba92:	f000 f869 	bl	800bb68 <__malloc_lock>
 800ba96:	f8d8 3000 	ldr.w	r3, [r8]
 800ba9a:	461c      	mov	r4, r3
 800ba9c:	bb44      	cbnz	r4, 800baf0 <_malloc_r+0x88>
 800ba9e:	4629      	mov	r1, r5
 800baa0:	4630      	mov	r0, r6
 800baa2:	f7ff ffbf 	bl	800ba24 <sbrk_aligned>
 800baa6:	1c43      	adds	r3, r0, #1
 800baa8:	4604      	mov	r4, r0
 800baaa:	d158      	bne.n	800bb5e <_malloc_r+0xf6>
 800baac:	f8d8 4000 	ldr.w	r4, [r8]
 800bab0:	4627      	mov	r7, r4
 800bab2:	2f00      	cmp	r7, #0
 800bab4:	d143      	bne.n	800bb3e <_malloc_r+0xd6>
 800bab6:	2c00      	cmp	r4, #0
 800bab8:	d04b      	beq.n	800bb52 <_malloc_r+0xea>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	4639      	mov	r1, r7
 800babe:	4630      	mov	r0, r6
 800bac0:	eb04 0903 	add.w	r9, r4, r3
 800bac4:	f000 fdfc 	bl	800c6c0 <_sbrk_r>
 800bac8:	4581      	cmp	r9, r0
 800baca:	d142      	bne.n	800bb52 <_malloc_r+0xea>
 800bacc:	6821      	ldr	r1, [r4, #0]
 800bace:	1a6d      	subs	r5, r5, r1
 800bad0:	4629      	mov	r1, r5
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7ff ffa6 	bl	800ba24 <sbrk_aligned>
 800bad8:	3001      	adds	r0, #1
 800bada:	d03a      	beq.n	800bb52 <_malloc_r+0xea>
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	442b      	add	r3, r5
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	f8d8 3000 	ldr.w	r3, [r8]
 800bae6:	685a      	ldr	r2, [r3, #4]
 800bae8:	bb62      	cbnz	r2, 800bb44 <_malloc_r+0xdc>
 800baea:	f8c8 7000 	str.w	r7, [r8]
 800baee:	e00f      	b.n	800bb10 <_malloc_r+0xa8>
 800baf0:	6822      	ldr	r2, [r4, #0]
 800baf2:	1b52      	subs	r2, r2, r5
 800baf4:	d420      	bmi.n	800bb38 <_malloc_r+0xd0>
 800baf6:	2a0b      	cmp	r2, #11
 800baf8:	d917      	bls.n	800bb2a <_malloc_r+0xc2>
 800bafa:	1961      	adds	r1, r4, r5
 800bafc:	42a3      	cmp	r3, r4
 800bafe:	6025      	str	r5, [r4, #0]
 800bb00:	bf18      	it	ne
 800bb02:	6059      	strne	r1, [r3, #4]
 800bb04:	6863      	ldr	r3, [r4, #4]
 800bb06:	bf08      	it	eq
 800bb08:	f8c8 1000 	streq.w	r1, [r8]
 800bb0c:	5162      	str	r2, [r4, r5]
 800bb0e:	604b      	str	r3, [r1, #4]
 800bb10:	4630      	mov	r0, r6
 800bb12:	f000 f82f 	bl	800bb74 <__malloc_unlock>
 800bb16:	f104 000b 	add.w	r0, r4, #11
 800bb1a:	1d23      	adds	r3, r4, #4
 800bb1c:	f020 0007 	bic.w	r0, r0, #7
 800bb20:	1ac2      	subs	r2, r0, r3
 800bb22:	bf1c      	itt	ne
 800bb24:	1a1b      	subne	r3, r3, r0
 800bb26:	50a3      	strne	r3, [r4, r2]
 800bb28:	e7af      	b.n	800ba8a <_malloc_r+0x22>
 800bb2a:	6862      	ldr	r2, [r4, #4]
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	bf0c      	ite	eq
 800bb30:	f8c8 2000 	streq.w	r2, [r8]
 800bb34:	605a      	strne	r2, [r3, #4]
 800bb36:	e7eb      	b.n	800bb10 <_malloc_r+0xa8>
 800bb38:	4623      	mov	r3, r4
 800bb3a:	6864      	ldr	r4, [r4, #4]
 800bb3c:	e7ae      	b.n	800ba9c <_malloc_r+0x34>
 800bb3e:	463c      	mov	r4, r7
 800bb40:	687f      	ldr	r7, [r7, #4]
 800bb42:	e7b6      	b.n	800bab2 <_malloc_r+0x4a>
 800bb44:	461a      	mov	r2, r3
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d1fb      	bne.n	800bb44 <_malloc_r+0xdc>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	6053      	str	r3, [r2, #4]
 800bb50:	e7de      	b.n	800bb10 <_malloc_r+0xa8>
 800bb52:	230c      	movs	r3, #12
 800bb54:	6033      	str	r3, [r6, #0]
 800bb56:	4630      	mov	r0, r6
 800bb58:	f000 f80c 	bl	800bb74 <__malloc_unlock>
 800bb5c:	e794      	b.n	800ba88 <_malloc_r+0x20>
 800bb5e:	6005      	str	r5, [r0, #0]
 800bb60:	e7d6      	b.n	800bb10 <_malloc_r+0xa8>
 800bb62:	bf00      	nop
 800bb64:	20000788 	.word	0x20000788

0800bb68 <__malloc_lock>:
 800bb68:	4801      	ldr	r0, [pc, #4]	@ (800bb70 <__malloc_lock+0x8>)
 800bb6a:	f7ff b8ac 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800bb6e:	bf00      	nop
 800bb70:	20000780 	.word	0x20000780

0800bb74 <__malloc_unlock>:
 800bb74:	4801      	ldr	r0, [pc, #4]	@ (800bb7c <__malloc_unlock+0x8>)
 800bb76:	f7ff b8a7 	b.w	800acc8 <__retarget_lock_release_recursive>
 800bb7a:	bf00      	nop
 800bb7c:	20000780 	.word	0x20000780

0800bb80 <_Balloc>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	69c6      	ldr	r6, [r0, #28]
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	b976      	cbnz	r6, 800bba8 <_Balloc+0x28>
 800bb8a:	2010      	movs	r0, #16
 800bb8c:	f7ff ff42 	bl	800ba14 <malloc>
 800bb90:	4602      	mov	r2, r0
 800bb92:	61e0      	str	r0, [r4, #28]
 800bb94:	b920      	cbnz	r0, 800bba0 <_Balloc+0x20>
 800bb96:	4b18      	ldr	r3, [pc, #96]	@ (800bbf8 <_Balloc+0x78>)
 800bb98:	4818      	ldr	r0, [pc, #96]	@ (800bbfc <_Balloc+0x7c>)
 800bb9a:	216b      	movs	r1, #107	@ 0x6b
 800bb9c:	f000 fda0 	bl	800c6e0 <__assert_func>
 800bba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bba4:	6006      	str	r6, [r0, #0]
 800bba6:	60c6      	str	r6, [r0, #12]
 800bba8:	69e6      	ldr	r6, [r4, #28]
 800bbaa:	68f3      	ldr	r3, [r6, #12]
 800bbac:	b183      	cbz	r3, 800bbd0 <_Balloc+0x50>
 800bbae:	69e3      	ldr	r3, [r4, #28]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbb6:	b9b8      	cbnz	r0, 800bbe8 <_Balloc+0x68>
 800bbb8:	2101      	movs	r1, #1
 800bbba:	fa01 f605 	lsl.w	r6, r1, r5
 800bbbe:	1d72      	adds	r2, r6, #5
 800bbc0:	0092      	lsls	r2, r2, #2
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f000 fdaa 	bl	800c71c <_calloc_r>
 800bbc8:	b160      	cbz	r0, 800bbe4 <_Balloc+0x64>
 800bbca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbce:	e00e      	b.n	800bbee <_Balloc+0x6e>
 800bbd0:	2221      	movs	r2, #33	@ 0x21
 800bbd2:	2104      	movs	r1, #4
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f000 fda1 	bl	800c71c <_calloc_r>
 800bbda:	69e3      	ldr	r3, [r4, #28]
 800bbdc:	60f0      	str	r0, [r6, #12]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e4      	bne.n	800bbae <_Balloc+0x2e>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	6802      	ldr	r2, [r0, #0]
 800bbea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbf4:	e7f7      	b.n	800bbe6 <_Balloc+0x66>
 800bbf6:	bf00      	nop
 800bbf8:	0800f3b1 	.word	0x0800f3b1
 800bbfc:	0800f431 	.word	0x0800f431

0800bc00 <_Bfree>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	69c6      	ldr	r6, [r0, #28]
 800bc04:	4605      	mov	r5, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	b976      	cbnz	r6, 800bc28 <_Bfree+0x28>
 800bc0a:	2010      	movs	r0, #16
 800bc0c:	f7ff ff02 	bl	800ba14 <malloc>
 800bc10:	4602      	mov	r2, r0
 800bc12:	61e8      	str	r0, [r5, #28]
 800bc14:	b920      	cbnz	r0, 800bc20 <_Bfree+0x20>
 800bc16:	4b09      	ldr	r3, [pc, #36]	@ (800bc3c <_Bfree+0x3c>)
 800bc18:	4809      	ldr	r0, [pc, #36]	@ (800bc40 <_Bfree+0x40>)
 800bc1a:	218f      	movs	r1, #143	@ 0x8f
 800bc1c:	f000 fd60 	bl	800c6e0 <__assert_func>
 800bc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc24:	6006      	str	r6, [r0, #0]
 800bc26:	60c6      	str	r6, [r0, #12]
 800bc28:	b13c      	cbz	r4, 800bc3a <_Bfree+0x3a>
 800bc2a:	69eb      	ldr	r3, [r5, #28]
 800bc2c:	6862      	ldr	r2, [r4, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc34:	6021      	str	r1, [r4, #0]
 800bc36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
 800bc3c:	0800f3b1 	.word	0x0800f3b1
 800bc40:	0800f431 	.word	0x0800f431

0800bc44 <__multadd>:
 800bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	690d      	ldr	r5, [r1, #16]
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	461e      	mov	r6, r3
 800bc50:	f101 0c14 	add.w	ip, r1, #20
 800bc54:	2000      	movs	r0, #0
 800bc56:	f8dc 3000 	ldr.w	r3, [ip]
 800bc5a:	b299      	uxth	r1, r3
 800bc5c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc60:	0c1e      	lsrs	r6, r3, #16
 800bc62:	0c0b      	lsrs	r3, r1, #16
 800bc64:	fb02 3306 	mla	r3, r2, r6, r3
 800bc68:	b289      	uxth	r1, r1
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc70:	4285      	cmp	r5, r0
 800bc72:	f84c 1b04 	str.w	r1, [ip], #4
 800bc76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc7a:	dcec      	bgt.n	800bc56 <__multadd+0x12>
 800bc7c:	b30e      	cbz	r6, 800bcc2 <__multadd+0x7e>
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	42ab      	cmp	r3, r5
 800bc82:	dc19      	bgt.n	800bcb8 <__multadd+0x74>
 800bc84:	6861      	ldr	r1, [r4, #4]
 800bc86:	4638      	mov	r0, r7
 800bc88:	3101      	adds	r1, #1
 800bc8a:	f7ff ff79 	bl	800bb80 <_Balloc>
 800bc8e:	4680      	mov	r8, r0
 800bc90:	b928      	cbnz	r0, 800bc9e <__multadd+0x5a>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc8 <__multadd+0x84>)
 800bc96:	480d      	ldr	r0, [pc, #52]	@ (800bccc <__multadd+0x88>)
 800bc98:	21ba      	movs	r1, #186	@ 0xba
 800bc9a:	f000 fd21 	bl	800c6e0 <__assert_func>
 800bc9e:	6922      	ldr	r2, [r4, #16]
 800bca0:	3202      	adds	r2, #2
 800bca2:	f104 010c 	add.w	r1, r4, #12
 800bca6:	0092      	lsls	r2, r2, #2
 800bca8:	300c      	adds	r0, #12
 800bcaa:	f7ff f80e 	bl	800acca <memcpy>
 800bcae:	4621      	mov	r1, r4
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	f7ff ffa5 	bl	800bc00 <_Bfree>
 800bcb6:	4644      	mov	r4, r8
 800bcb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	615e      	str	r6, [r3, #20]
 800bcc0:	6125      	str	r5, [r4, #16]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc8:	0800f420 	.word	0x0800f420
 800bccc:	0800f431 	.word	0x0800f431

0800bcd0 <__hi0bits>:
 800bcd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	bf36      	itet	cc
 800bcd8:	0403      	lslcc	r3, r0, #16
 800bcda:	2000      	movcs	r0, #0
 800bcdc:	2010      	movcc	r0, #16
 800bcde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bce2:	bf3c      	itt	cc
 800bce4:	021b      	lslcc	r3, r3, #8
 800bce6:	3008      	addcc	r0, #8
 800bce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bcec:	bf3c      	itt	cc
 800bcee:	011b      	lslcc	r3, r3, #4
 800bcf0:	3004      	addcc	r0, #4
 800bcf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf6:	bf3c      	itt	cc
 800bcf8:	009b      	lslcc	r3, r3, #2
 800bcfa:	3002      	addcc	r0, #2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	db05      	blt.n	800bd0c <__hi0bits+0x3c>
 800bd00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd04:	f100 0001 	add.w	r0, r0, #1
 800bd08:	bf08      	it	eq
 800bd0a:	2020      	moveq	r0, #32
 800bd0c:	4770      	bx	lr

0800bd0e <__lo0bits>:
 800bd0e:	6803      	ldr	r3, [r0, #0]
 800bd10:	4602      	mov	r2, r0
 800bd12:	f013 0007 	ands.w	r0, r3, #7
 800bd16:	d00b      	beq.n	800bd30 <__lo0bits+0x22>
 800bd18:	07d9      	lsls	r1, r3, #31
 800bd1a:	d421      	bmi.n	800bd60 <__lo0bits+0x52>
 800bd1c:	0798      	lsls	r0, r3, #30
 800bd1e:	bf49      	itett	mi
 800bd20:	085b      	lsrmi	r3, r3, #1
 800bd22:	089b      	lsrpl	r3, r3, #2
 800bd24:	2001      	movmi	r0, #1
 800bd26:	6013      	strmi	r3, [r2, #0]
 800bd28:	bf5c      	itt	pl
 800bd2a:	6013      	strpl	r3, [r2, #0]
 800bd2c:	2002      	movpl	r0, #2
 800bd2e:	4770      	bx	lr
 800bd30:	b299      	uxth	r1, r3
 800bd32:	b909      	cbnz	r1, 800bd38 <__lo0bits+0x2a>
 800bd34:	0c1b      	lsrs	r3, r3, #16
 800bd36:	2010      	movs	r0, #16
 800bd38:	b2d9      	uxtb	r1, r3
 800bd3a:	b909      	cbnz	r1, 800bd40 <__lo0bits+0x32>
 800bd3c:	3008      	adds	r0, #8
 800bd3e:	0a1b      	lsrs	r3, r3, #8
 800bd40:	0719      	lsls	r1, r3, #28
 800bd42:	bf04      	itt	eq
 800bd44:	091b      	lsreq	r3, r3, #4
 800bd46:	3004      	addeq	r0, #4
 800bd48:	0799      	lsls	r1, r3, #30
 800bd4a:	bf04      	itt	eq
 800bd4c:	089b      	lsreq	r3, r3, #2
 800bd4e:	3002      	addeq	r0, #2
 800bd50:	07d9      	lsls	r1, r3, #31
 800bd52:	d403      	bmi.n	800bd5c <__lo0bits+0x4e>
 800bd54:	085b      	lsrs	r3, r3, #1
 800bd56:	f100 0001 	add.w	r0, r0, #1
 800bd5a:	d003      	beq.n	800bd64 <__lo0bits+0x56>
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	4770      	bx	lr
 800bd60:	2000      	movs	r0, #0
 800bd62:	4770      	bx	lr
 800bd64:	2020      	movs	r0, #32
 800bd66:	4770      	bx	lr

0800bd68 <__i2b>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	f7ff ff07 	bl	800bb80 <_Balloc>
 800bd72:	4602      	mov	r2, r0
 800bd74:	b928      	cbnz	r0, 800bd82 <__i2b+0x1a>
 800bd76:	4b05      	ldr	r3, [pc, #20]	@ (800bd8c <__i2b+0x24>)
 800bd78:	4805      	ldr	r0, [pc, #20]	@ (800bd90 <__i2b+0x28>)
 800bd7a:	f240 1145 	movw	r1, #325	@ 0x145
 800bd7e:	f000 fcaf 	bl	800c6e0 <__assert_func>
 800bd82:	2301      	movs	r3, #1
 800bd84:	6144      	str	r4, [r0, #20]
 800bd86:	6103      	str	r3, [r0, #16]
 800bd88:	bd10      	pop	{r4, pc}
 800bd8a:	bf00      	nop
 800bd8c:	0800f420 	.word	0x0800f420
 800bd90:	0800f431 	.word	0x0800f431

0800bd94 <__multiply>:
 800bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	4614      	mov	r4, r2
 800bd9a:	690a      	ldr	r2, [r1, #16]
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	bfa8      	it	ge
 800bda2:	4623      	movge	r3, r4
 800bda4:	460f      	mov	r7, r1
 800bda6:	bfa4      	itt	ge
 800bda8:	460c      	movge	r4, r1
 800bdaa:	461f      	movge	r7, r3
 800bdac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bdb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bdb4:	68a3      	ldr	r3, [r4, #8]
 800bdb6:	6861      	ldr	r1, [r4, #4]
 800bdb8:	eb0a 0609 	add.w	r6, sl, r9
 800bdbc:	42b3      	cmp	r3, r6
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	bfb8      	it	lt
 800bdc2:	3101      	addlt	r1, #1
 800bdc4:	f7ff fedc 	bl	800bb80 <_Balloc>
 800bdc8:	b930      	cbnz	r0, 800bdd8 <__multiply+0x44>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	4b44      	ldr	r3, [pc, #272]	@ (800bee0 <__multiply+0x14c>)
 800bdce:	4845      	ldr	r0, [pc, #276]	@ (800bee4 <__multiply+0x150>)
 800bdd0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bdd4:	f000 fc84 	bl	800c6e0 <__assert_func>
 800bdd8:	f100 0514 	add.w	r5, r0, #20
 800bddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bde0:	462b      	mov	r3, r5
 800bde2:	2200      	movs	r2, #0
 800bde4:	4543      	cmp	r3, r8
 800bde6:	d321      	bcc.n	800be2c <__multiply+0x98>
 800bde8:	f107 0114 	add.w	r1, r7, #20
 800bdec:	f104 0214 	add.w	r2, r4, #20
 800bdf0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bdf4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bdf8:	9302      	str	r3, [sp, #8]
 800bdfa:	1b13      	subs	r3, r2, r4
 800bdfc:	3b15      	subs	r3, #21
 800bdfe:	f023 0303 	bic.w	r3, r3, #3
 800be02:	3304      	adds	r3, #4
 800be04:	f104 0715 	add.w	r7, r4, #21
 800be08:	42ba      	cmp	r2, r7
 800be0a:	bf38      	it	cc
 800be0c:	2304      	movcc	r3, #4
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	9103      	str	r1, [sp, #12]
 800be14:	428b      	cmp	r3, r1
 800be16:	d80c      	bhi.n	800be32 <__multiply+0x9e>
 800be18:	2e00      	cmp	r6, #0
 800be1a:	dd03      	ble.n	800be24 <__multiply+0x90>
 800be1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be20:	2b00      	cmp	r3, #0
 800be22:	d05b      	beq.n	800bedc <__multiply+0x148>
 800be24:	6106      	str	r6, [r0, #16]
 800be26:	b005      	add	sp, #20
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	f843 2b04 	str.w	r2, [r3], #4
 800be30:	e7d8      	b.n	800bde4 <__multiply+0x50>
 800be32:	f8b1 a000 	ldrh.w	sl, [r1]
 800be36:	f1ba 0f00 	cmp.w	sl, #0
 800be3a:	d024      	beq.n	800be86 <__multiply+0xf2>
 800be3c:	f104 0e14 	add.w	lr, r4, #20
 800be40:	46a9      	mov	r9, r5
 800be42:	f04f 0c00 	mov.w	ip, #0
 800be46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be4a:	f8d9 3000 	ldr.w	r3, [r9]
 800be4e:	fa1f fb87 	uxth.w	fp, r7
 800be52:	b29b      	uxth	r3, r3
 800be54:	fb0a 330b 	mla	r3, sl, fp, r3
 800be58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800be5c:	f8d9 7000 	ldr.w	r7, [r9]
 800be60:	4463      	add	r3, ip
 800be62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be66:	fb0a c70b 	mla	r7, sl, fp, ip
 800be6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800be6e:	b29b      	uxth	r3, r3
 800be70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800be74:	4572      	cmp	r2, lr
 800be76:	f849 3b04 	str.w	r3, [r9], #4
 800be7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be7e:	d8e2      	bhi.n	800be46 <__multiply+0xb2>
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	f845 c003 	str.w	ip, [r5, r3]
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800be8c:	3104      	adds	r1, #4
 800be8e:	f1b9 0f00 	cmp.w	r9, #0
 800be92:	d021      	beq.n	800bed8 <__multiply+0x144>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	f104 0c14 	add.w	ip, r4, #20
 800be9a:	46ae      	mov	lr, r5
 800be9c:	f04f 0a00 	mov.w	sl, #0
 800bea0:	f8bc b000 	ldrh.w	fp, [ip]
 800bea4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bea8:	fb09 770b 	mla	r7, r9, fp, r7
 800beac:	4457      	add	r7, sl
 800beae:	b29b      	uxth	r3, r3
 800beb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800beb4:	f84e 3b04 	str.w	r3, [lr], #4
 800beb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bec0:	f8be 3000 	ldrh.w	r3, [lr]
 800bec4:	fb09 330a 	mla	r3, r9, sl, r3
 800bec8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800becc:	4562      	cmp	r2, ip
 800bece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bed2:	d8e5      	bhi.n	800bea0 <__multiply+0x10c>
 800bed4:	9f01      	ldr	r7, [sp, #4]
 800bed6:	51eb      	str	r3, [r5, r7]
 800bed8:	3504      	adds	r5, #4
 800beda:	e799      	b.n	800be10 <__multiply+0x7c>
 800bedc:	3e01      	subs	r6, #1
 800bede:	e79b      	b.n	800be18 <__multiply+0x84>
 800bee0:	0800f420 	.word	0x0800f420
 800bee4:	0800f431 	.word	0x0800f431

0800bee8 <__pow5mult>:
 800bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beec:	4615      	mov	r5, r2
 800beee:	f012 0203 	ands.w	r2, r2, #3
 800bef2:	4607      	mov	r7, r0
 800bef4:	460e      	mov	r6, r1
 800bef6:	d007      	beq.n	800bf08 <__pow5mult+0x20>
 800bef8:	4c25      	ldr	r4, [pc, #148]	@ (800bf90 <__pow5mult+0xa8>)
 800befa:	3a01      	subs	r2, #1
 800befc:	2300      	movs	r3, #0
 800befe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf02:	f7ff fe9f 	bl	800bc44 <__multadd>
 800bf06:	4606      	mov	r6, r0
 800bf08:	10ad      	asrs	r5, r5, #2
 800bf0a:	d03d      	beq.n	800bf88 <__pow5mult+0xa0>
 800bf0c:	69fc      	ldr	r4, [r7, #28]
 800bf0e:	b97c      	cbnz	r4, 800bf30 <__pow5mult+0x48>
 800bf10:	2010      	movs	r0, #16
 800bf12:	f7ff fd7f 	bl	800ba14 <malloc>
 800bf16:	4602      	mov	r2, r0
 800bf18:	61f8      	str	r0, [r7, #28]
 800bf1a:	b928      	cbnz	r0, 800bf28 <__pow5mult+0x40>
 800bf1c:	4b1d      	ldr	r3, [pc, #116]	@ (800bf94 <__pow5mult+0xac>)
 800bf1e:	481e      	ldr	r0, [pc, #120]	@ (800bf98 <__pow5mult+0xb0>)
 800bf20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf24:	f000 fbdc 	bl	800c6e0 <__assert_func>
 800bf28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf2c:	6004      	str	r4, [r0, #0]
 800bf2e:	60c4      	str	r4, [r0, #12]
 800bf30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf38:	b94c      	cbnz	r4, 800bf4e <__pow5mult+0x66>
 800bf3a:	f240 2171 	movw	r1, #625	@ 0x271
 800bf3e:	4638      	mov	r0, r7
 800bf40:	f7ff ff12 	bl	800bd68 <__i2b>
 800bf44:	2300      	movs	r3, #0
 800bf46:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	6003      	str	r3, [r0, #0]
 800bf4e:	f04f 0900 	mov.w	r9, #0
 800bf52:	07eb      	lsls	r3, r5, #31
 800bf54:	d50a      	bpl.n	800bf6c <__pow5mult+0x84>
 800bf56:	4631      	mov	r1, r6
 800bf58:	4622      	mov	r2, r4
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7ff ff1a 	bl	800bd94 <__multiply>
 800bf60:	4631      	mov	r1, r6
 800bf62:	4680      	mov	r8, r0
 800bf64:	4638      	mov	r0, r7
 800bf66:	f7ff fe4b 	bl	800bc00 <_Bfree>
 800bf6a:	4646      	mov	r6, r8
 800bf6c:	106d      	asrs	r5, r5, #1
 800bf6e:	d00b      	beq.n	800bf88 <__pow5mult+0xa0>
 800bf70:	6820      	ldr	r0, [r4, #0]
 800bf72:	b938      	cbnz	r0, 800bf84 <__pow5mult+0x9c>
 800bf74:	4622      	mov	r2, r4
 800bf76:	4621      	mov	r1, r4
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7ff ff0b 	bl	800bd94 <__multiply>
 800bf7e:	6020      	str	r0, [r4, #0]
 800bf80:	f8c0 9000 	str.w	r9, [r0]
 800bf84:	4604      	mov	r4, r0
 800bf86:	e7e4      	b.n	800bf52 <__pow5mult+0x6a>
 800bf88:	4630      	mov	r0, r6
 800bf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf8e:	bf00      	nop
 800bf90:	0800f48c 	.word	0x0800f48c
 800bf94:	0800f3b1 	.word	0x0800f3b1
 800bf98:	0800f431 	.word	0x0800f431

0800bf9c <__lshift>:
 800bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	6849      	ldr	r1, [r1, #4]
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfaa:	68a3      	ldr	r3, [r4, #8]
 800bfac:	4607      	mov	r7, r0
 800bfae:	4691      	mov	r9, r2
 800bfb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfb4:	f108 0601 	add.w	r6, r8, #1
 800bfb8:	42b3      	cmp	r3, r6
 800bfba:	db0b      	blt.n	800bfd4 <__lshift+0x38>
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	f7ff fddf 	bl	800bb80 <_Balloc>
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	b948      	cbnz	r0, 800bfda <__lshift+0x3e>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4b28      	ldr	r3, [pc, #160]	@ (800c06c <__lshift+0xd0>)
 800bfca:	4829      	ldr	r0, [pc, #164]	@ (800c070 <__lshift+0xd4>)
 800bfcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bfd0:	f000 fb86 	bl	800c6e0 <__assert_func>
 800bfd4:	3101      	adds	r1, #1
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	e7ee      	b.n	800bfb8 <__lshift+0x1c>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f100 0114 	add.w	r1, r0, #20
 800bfe0:	f100 0210 	add.w	r2, r0, #16
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	4553      	cmp	r3, sl
 800bfe8:	db33      	blt.n	800c052 <__lshift+0xb6>
 800bfea:	6920      	ldr	r0, [r4, #16]
 800bfec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bff0:	f104 0314 	add.w	r3, r4, #20
 800bff4:	f019 091f 	ands.w	r9, r9, #31
 800bff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c000:	d02b      	beq.n	800c05a <__lshift+0xbe>
 800c002:	f1c9 0e20 	rsb	lr, r9, #32
 800c006:	468a      	mov	sl, r1
 800c008:	2200      	movs	r2, #0
 800c00a:	6818      	ldr	r0, [r3, #0]
 800c00c:	fa00 f009 	lsl.w	r0, r0, r9
 800c010:	4310      	orrs	r0, r2
 800c012:	f84a 0b04 	str.w	r0, [sl], #4
 800c016:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01a:	459c      	cmp	ip, r3
 800c01c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c020:	d8f3      	bhi.n	800c00a <__lshift+0x6e>
 800c022:	ebac 0304 	sub.w	r3, ip, r4
 800c026:	3b15      	subs	r3, #21
 800c028:	f023 0303 	bic.w	r3, r3, #3
 800c02c:	3304      	adds	r3, #4
 800c02e:	f104 0015 	add.w	r0, r4, #21
 800c032:	4584      	cmp	ip, r0
 800c034:	bf38      	it	cc
 800c036:	2304      	movcc	r3, #4
 800c038:	50ca      	str	r2, [r1, r3]
 800c03a:	b10a      	cbz	r2, 800c040 <__lshift+0xa4>
 800c03c:	f108 0602 	add.w	r6, r8, #2
 800c040:	3e01      	subs	r6, #1
 800c042:	4638      	mov	r0, r7
 800c044:	612e      	str	r6, [r5, #16]
 800c046:	4621      	mov	r1, r4
 800c048:	f7ff fdda 	bl	800bc00 <_Bfree>
 800c04c:	4628      	mov	r0, r5
 800c04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c052:	f842 0f04 	str.w	r0, [r2, #4]!
 800c056:	3301      	adds	r3, #1
 800c058:	e7c5      	b.n	800bfe6 <__lshift+0x4a>
 800c05a:	3904      	subs	r1, #4
 800c05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c060:	f841 2f04 	str.w	r2, [r1, #4]!
 800c064:	459c      	cmp	ip, r3
 800c066:	d8f9      	bhi.n	800c05c <__lshift+0xc0>
 800c068:	e7ea      	b.n	800c040 <__lshift+0xa4>
 800c06a:	bf00      	nop
 800c06c:	0800f420 	.word	0x0800f420
 800c070:	0800f431 	.word	0x0800f431

0800c074 <__mcmp>:
 800c074:	690a      	ldr	r2, [r1, #16]
 800c076:	4603      	mov	r3, r0
 800c078:	6900      	ldr	r0, [r0, #16]
 800c07a:	1a80      	subs	r0, r0, r2
 800c07c:	b530      	push	{r4, r5, lr}
 800c07e:	d10e      	bne.n	800c09e <__mcmp+0x2a>
 800c080:	3314      	adds	r3, #20
 800c082:	3114      	adds	r1, #20
 800c084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c08c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c094:	4295      	cmp	r5, r2
 800c096:	d003      	beq.n	800c0a0 <__mcmp+0x2c>
 800c098:	d205      	bcs.n	800c0a6 <__mcmp+0x32>
 800c09a:	f04f 30ff 	mov.w	r0, #4294967295
 800c09e:	bd30      	pop	{r4, r5, pc}
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	d3f3      	bcc.n	800c08c <__mcmp+0x18>
 800c0a4:	e7fb      	b.n	800c09e <__mcmp+0x2a>
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	e7f9      	b.n	800c09e <__mcmp+0x2a>
	...

0800c0ac <__mdiff>:
 800c0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4648      	mov	r0, r9
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	f7ff ffdb 	bl	800c074 <__mcmp>
 800c0be:	1e05      	subs	r5, r0, #0
 800c0c0:	d112      	bne.n	800c0e8 <__mdiff+0x3c>
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f7ff fd5b 	bl	800bb80 <_Balloc>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	b928      	cbnz	r0, 800c0da <__mdiff+0x2e>
 800c0ce:	4b3f      	ldr	r3, [pc, #252]	@ (800c1cc <__mdiff+0x120>)
 800c0d0:	f240 2137 	movw	r1, #567	@ 0x237
 800c0d4:	483e      	ldr	r0, [pc, #248]	@ (800c1d0 <__mdiff+0x124>)
 800c0d6:	f000 fb03 	bl	800c6e0 <__assert_func>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	b003      	add	sp, #12
 800c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e8:	bfbc      	itt	lt
 800c0ea:	464b      	movlt	r3, r9
 800c0ec:	46a1      	movlt	r9, r4
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c0f4:	bfba      	itte	lt
 800c0f6:	461c      	movlt	r4, r3
 800c0f8:	2501      	movlt	r5, #1
 800c0fa:	2500      	movge	r5, #0
 800c0fc:	f7ff fd40 	bl	800bb80 <_Balloc>
 800c100:	4602      	mov	r2, r0
 800c102:	b918      	cbnz	r0, 800c10c <__mdiff+0x60>
 800c104:	4b31      	ldr	r3, [pc, #196]	@ (800c1cc <__mdiff+0x120>)
 800c106:	f240 2145 	movw	r1, #581	@ 0x245
 800c10a:	e7e3      	b.n	800c0d4 <__mdiff+0x28>
 800c10c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c110:	6926      	ldr	r6, [r4, #16]
 800c112:	60c5      	str	r5, [r0, #12]
 800c114:	f109 0310 	add.w	r3, r9, #16
 800c118:	f109 0514 	add.w	r5, r9, #20
 800c11c:	f104 0e14 	add.w	lr, r4, #20
 800c120:	f100 0b14 	add.w	fp, r0, #20
 800c124:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c128:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c12c:	9301      	str	r3, [sp, #4]
 800c12e:	46d9      	mov	r9, fp
 800c130:	f04f 0c00 	mov.w	ip, #0
 800c134:	9b01      	ldr	r3, [sp, #4]
 800c136:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c13a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	fa1f f38a 	uxth.w	r3, sl
 800c144:	4619      	mov	r1, r3
 800c146:	b283      	uxth	r3, r0
 800c148:	1acb      	subs	r3, r1, r3
 800c14a:	0c00      	lsrs	r0, r0, #16
 800c14c:	4463      	add	r3, ip
 800c14e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c152:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c156:	b29b      	uxth	r3, r3
 800c158:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c15c:	4576      	cmp	r6, lr
 800c15e:	f849 3b04 	str.w	r3, [r9], #4
 800c162:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c166:	d8e5      	bhi.n	800c134 <__mdiff+0x88>
 800c168:	1b33      	subs	r3, r6, r4
 800c16a:	3b15      	subs	r3, #21
 800c16c:	f023 0303 	bic.w	r3, r3, #3
 800c170:	3415      	adds	r4, #21
 800c172:	3304      	adds	r3, #4
 800c174:	42a6      	cmp	r6, r4
 800c176:	bf38      	it	cc
 800c178:	2304      	movcc	r3, #4
 800c17a:	441d      	add	r5, r3
 800c17c:	445b      	add	r3, fp
 800c17e:	461e      	mov	r6, r3
 800c180:	462c      	mov	r4, r5
 800c182:	4544      	cmp	r4, r8
 800c184:	d30e      	bcc.n	800c1a4 <__mdiff+0xf8>
 800c186:	f108 0103 	add.w	r1, r8, #3
 800c18a:	1b49      	subs	r1, r1, r5
 800c18c:	f021 0103 	bic.w	r1, r1, #3
 800c190:	3d03      	subs	r5, #3
 800c192:	45a8      	cmp	r8, r5
 800c194:	bf38      	it	cc
 800c196:	2100      	movcc	r1, #0
 800c198:	440b      	add	r3, r1
 800c19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c19e:	b191      	cbz	r1, 800c1c6 <__mdiff+0x11a>
 800c1a0:	6117      	str	r7, [r2, #16]
 800c1a2:	e79d      	b.n	800c0e0 <__mdiff+0x34>
 800c1a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1a8:	46e6      	mov	lr, ip
 800c1aa:	0c08      	lsrs	r0, r1, #16
 800c1ac:	fa1c fc81 	uxtah	ip, ip, r1
 800c1b0:	4471      	add	r1, lr
 800c1b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c1b6:	b289      	uxth	r1, r1
 800c1b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1bc:	f846 1b04 	str.w	r1, [r6], #4
 800c1c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1c4:	e7dd      	b.n	800c182 <__mdiff+0xd6>
 800c1c6:	3f01      	subs	r7, #1
 800c1c8:	e7e7      	b.n	800c19a <__mdiff+0xee>
 800c1ca:	bf00      	nop
 800c1cc:	0800f420 	.word	0x0800f420
 800c1d0:	0800f431 	.word	0x0800f431

0800c1d4 <__d2b>:
 800c1d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1d8:	460f      	mov	r7, r1
 800c1da:	2101      	movs	r1, #1
 800c1dc:	ec59 8b10 	vmov	r8, r9, d0
 800c1e0:	4616      	mov	r6, r2
 800c1e2:	f7ff fccd 	bl	800bb80 <_Balloc>
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	b930      	cbnz	r0, 800c1f8 <__d2b+0x24>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	4b23      	ldr	r3, [pc, #140]	@ (800c27c <__d2b+0xa8>)
 800c1ee:	4824      	ldr	r0, [pc, #144]	@ (800c280 <__d2b+0xac>)
 800c1f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c1f4:	f000 fa74 	bl	800c6e0 <__assert_func>
 800c1f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c200:	b10d      	cbz	r5, 800c206 <__d2b+0x32>
 800c202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	f1b8 0300 	subs.w	r3, r8, #0
 800c20c:	d023      	beq.n	800c256 <__d2b+0x82>
 800c20e:	4668      	mov	r0, sp
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	f7ff fd7c 	bl	800bd0e <__lo0bits>
 800c216:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c21a:	b1d0      	cbz	r0, 800c252 <__d2b+0x7e>
 800c21c:	f1c0 0320 	rsb	r3, r0, #32
 800c220:	fa02 f303 	lsl.w	r3, r2, r3
 800c224:	430b      	orrs	r3, r1
 800c226:	40c2      	lsrs	r2, r0
 800c228:	6163      	str	r3, [r4, #20]
 800c22a:	9201      	str	r2, [sp, #4]
 800c22c:	9b01      	ldr	r3, [sp, #4]
 800c22e:	61a3      	str	r3, [r4, #24]
 800c230:	2b00      	cmp	r3, #0
 800c232:	bf0c      	ite	eq
 800c234:	2201      	moveq	r2, #1
 800c236:	2202      	movne	r2, #2
 800c238:	6122      	str	r2, [r4, #16]
 800c23a:	b1a5      	cbz	r5, 800c266 <__d2b+0x92>
 800c23c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c240:	4405      	add	r5, r0
 800c242:	603d      	str	r5, [r7, #0]
 800c244:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c248:	6030      	str	r0, [r6, #0]
 800c24a:	4620      	mov	r0, r4
 800c24c:	b003      	add	sp, #12
 800c24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c252:	6161      	str	r1, [r4, #20]
 800c254:	e7ea      	b.n	800c22c <__d2b+0x58>
 800c256:	a801      	add	r0, sp, #4
 800c258:	f7ff fd59 	bl	800bd0e <__lo0bits>
 800c25c:	9b01      	ldr	r3, [sp, #4]
 800c25e:	6163      	str	r3, [r4, #20]
 800c260:	3020      	adds	r0, #32
 800c262:	2201      	movs	r2, #1
 800c264:	e7e8      	b.n	800c238 <__d2b+0x64>
 800c266:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c26a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c26e:	6038      	str	r0, [r7, #0]
 800c270:	6918      	ldr	r0, [r3, #16]
 800c272:	f7ff fd2d 	bl	800bcd0 <__hi0bits>
 800c276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c27a:	e7e5      	b.n	800c248 <__d2b+0x74>
 800c27c:	0800f420 	.word	0x0800f420
 800c280:	0800f431 	.word	0x0800f431

0800c284 <__ssputs_r>:
 800c284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c288:	688e      	ldr	r6, [r1, #8]
 800c28a:	461f      	mov	r7, r3
 800c28c:	42be      	cmp	r6, r7
 800c28e:	680b      	ldr	r3, [r1, #0]
 800c290:	4682      	mov	sl, r0
 800c292:	460c      	mov	r4, r1
 800c294:	4690      	mov	r8, r2
 800c296:	d82d      	bhi.n	800c2f4 <__ssputs_r+0x70>
 800c298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c29c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2a0:	d026      	beq.n	800c2f0 <__ssputs_r+0x6c>
 800c2a2:	6965      	ldr	r5, [r4, #20]
 800c2a4:	6909      	ldr	r1, [r1, #16]
 800c2a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2aa:	eba3 0901 	sub.w	r9, r3, r1
 800c2ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2b2:	1c7b      	adds	r3, r7, #1
 800c2b4:	444b      	add	r3, r9
 800c2b6:	106d      	asrs	r5, r5, #1
 800c2b8:	429d      	cmp	r5, r3
 800c2ba:	bf38      	it	cc
 800c2bc:	461d      	movcc	r5, r3
 800c2be:	0553      	lsls	r3, r2, #21
 800c2c0:	d527      	bpl.n	800c312 <__ssputs_r+0x8e>
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7ff fbd0 	bl	800ba68 <_malloc_r>
 800c2c8:	4606      	mov	r6, r0
 800c2ca:	b360      	cbz	r0, 800c326 <__ssputs_r+0xa2>
 800c2cc:	6921      	ldr	r1, [r4, #16]
 800c2ce:	464a      	mov	r2, r9
 800c2d0:	f7fe fcfb 	bl	800acca <memcpy>
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	6126      	str	r6, [r4, #16]
 800c2e2:	6165      	str	r5, [r4, #20]
 800c2e4:	444e      	add	r6, r9
 800c2e6:	eba5 0509 	sub.w	r5, r5, r9
 800c2ea:	6026      	str	r6, [r4, #0]
 800c2ec:	60a5      	str	r5, [r4, #8]
 800c2ee:	463e      	mov	r6, r7
 800c2f0:	42be      	cmp	r6, r7
 800c2f2:	d900      	bls.n	800c2f6 <__ssputs_r+0x72>
 800c2f4:	463e      	mov	r6, r7
 800c2f6:	6820      	ldr	r0, [r4, #0]
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	4641      	mov	r1, r8
 800c2fc:	f000 f9c6 	bl	800c68c <memmove>
 800c300:	68a3      	ldr	r3, [r4, #8]
 800c302:	1b9b      	subs	r3, r3, r6
 800c304:	60a3      	str	r3, [r4, #8]
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	4433      	add	r3, r6
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	2000      	movs	r0, #0
 800c30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c312:	462a      	mov	r2, r5
 800c314:	f000 fa28 	bl	800c768 <_realloc_r>
 800c318:	4606      	mov	r6, r0
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d1e0      	bne.n	800c2e0 <__ssputs_r+0x5c>
 800c31e:	6921      	ldr	r1, [r4, #16]
 800c320:	4650      	mov	r0, sl
 800c322:	f7ff fb2d 	bl	800b980 <_free_r>
 800c326:	230c      	movs	r3, #12
 800c328:	f8ca 3000 	str.w	r3, [sl]
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	e7e9      	b.n	800c30e <__ssputs_r+0x8a>
	...

0800c33c <_svfiprintf_r>:
 800c33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c340:	4698      	mov	r8, r3
 800c342:	898b      	ldrh	r3, [r1, #12]
 800c344:	061b      	lsls	r3, r3, #24
 800c346:	b09d      	sub	sp, #116	@ 0x74
 800c348:	4607      	mov	r7, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	4614      	mov	r4, r2
 800c34e:	d510      	bpl.n	800c372 <_svfiprintf_r+0x36>
 800c350:	690b      	ldr	r3, [r1, #16]
 800c352:	b973      	cbnz	r3, 800c372 <_svfiprintf_r+0x36>
 800c354:	2140      	movs	r1, #64	@ 0x40
 800c356:	f7ff fb87 	bl	800ba68 <_malloc_r>
 800c35a:	6028      	str	r0, [r5, #0]
 800c35c:	6128      	str	r0, [r5, #16]
 800c35e:	b930      	cbnz	r0, 800c36e <_svfiprintf_r+0x32>
 800c360:	230c      	movs	r3, #12
 800c362:	603b      	str	r3, [r7, #0]
 800c364:	f04f 30ff 	mov.w	r0, #4294967295
 800c368:	b01d      	add	sp, #116	@ 0x74
 800c36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36e:	2340      	movs	r3, #64	@ 0x40
 800c370:	616b      	str	r3, [r5, #20]
 800c372:	2300      	movs	r3, #0
 800c374:	9309      	str	r3, [sp, #36]	@ 0x24
 800c376:	2320      	movs	r3, #32
 800c378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c380:	2330      	movs	r3, #48	@ 0x30
 800c382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c520 <_svfiprintf_r+0x1e4>
 800c386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c38a:	f04f 0901 	mov.w	r9, #1
 800c38e:	4623      	mov	r3, r4
 800c390:	469a      	mov	sl, r3
 800c392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c396:	b10a      	cbz	r2, 800c39c <_svfiprintf_r+0x60>
 800c398:	2a25      	cmp	r2, #37	@ 0x25
 800c39a:	d1f9      	bne.n	800c390 <_svfiprintf_r+0x54>
 800c39c:	ebba 0b04 	subs.w	fp, sl, r4
 800c3a0:	d00b      	beq.n	800c3ba <_svfiprintf_r+0x7e>
 800c3a2:	465b      	mov	r3, fp
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff ff6b 	bl	800c284 <__ssputs_r>
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	f000 80a7 	beq.w	800c502 <_svfiprintf_r+0x1c6>
 800c3b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b6:	445a      	add	r2, fp
 800c3b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 809f 	beq.w	800c502 <_svfiprintf_r+0x1c6>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ce:	f10a 0a01 	add.w	sl, sl, #1
 800c3d2:	9304      	str	r3, [sp, #16]
 800c3d4:	9307      	str	r3, [sp, #28]
 800c3d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3da:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3dc:	4654      	mov	r4, sl
 800c3de:	2205      	movs	r2, #5
 800c3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e4:	484e      	ldr	r0, [pc, #312]	@ (800c520 <_svfiprintf_r+0x1e4>)
 800c3e6:	f7f3 fefb 	bl	80001e0 <memchr>
 800c3ea:	9a04      	ldr	r2, [sp, #16]
 800c3ec:	b9d8      	cbnz	r0, 800c426 <_svfiprintf_r+0xea>
 800c3ee:	06d0      	lsls	r0, r2, #27
 800c3f0:	bf44      	itt	mi
 800c3f2:	2320      	movmi	r3, #32
 800c3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3f8:	0711      	lsls	r1, r2, #28
 800c3fa:	bf44      	itt	mi
 800c3fc:	232b      	movmi	r3, #43	@ 0x2b
 800c3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c402:	f89a 3000 	ldrb.w	r3, [sl]
 800c406:	2b2a      	cmp	r3, #42	@ 0x2a
 800c408:	d015      	beq.n	800c436 <_svfiprintf_r+0xfa>
 800c40a:	9a07      	ldr	r2, [sp, #28]
 800c40c:	4654      	mov	r4, sl
 800c40e:	2000      	movs	r0, #0
 800c410:	f04f 0c0a 	mov.w	ip, #10
 800c414:	4621      	mov	r1, r4
 800c416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c41a:	3b30      	subs	r3, #48	@ 0x30
 800c41c:	2b09      	cmp	r3, #9
 800c41e:	d94b      	bls.n	800c4b8 <_svfiprintf_r+0x17c>
 800c420:	b1b0      	cbz	r0, 800c450 <_svfiprintf_r+0x114>
 800c422:	9207      	str	r2, [sp, #28]
 800c424:	e014      	b.n	800c450 <_svfiprintf_r+0x114>
 800c426:	eba0 0308 	sub.w	r3, r0, r8
 800c42a:	fa09 f303 	lsl.w	r3, r9, r3
 800c42e:	4313      	orrs	r3, r2
 800c430:	9304      	str	r3, [sp, #16]
 800c432:	46a2      	mov	sl, r4
 800c434:	e7d2      	b.n	800c3dc <_svfiprintf_r+0xa0>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	1d19      	adds	r1, r3, #4
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	9103      	str	r1, [sp, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bfbb      	ittet	lt
 800c442:	425b      	neglt	r3, r3
 800c444:	f042 0202 	orrlt.w	r2, r2, #2
 800c448:	9307      	strge	r3, [sp, #28]
 800c44a:	9307      	strlt	r3, [sp, #28]
 800c44c:	bfb8      	it	lt
 800c44e:	9204      	strlt	r2, [sp, #16]
 800c450:	7823      	ldrb	r3, [r4, #0]
 800c452:	2b2e      	cmp	r3, #46	@ 0x2e
 800c454:	d10a      	bne.n	800c46c <_svfiprintf_r+0x130>
 800c456:	7863      	ldrb	r3, [r4, #1]
 800c458:	2b2a      	cmp	r3, #42	@ 0x2a
 800c45a:	d132      	bne.n	800c4c2 <_svfiprintf_r+0x186>
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	1d1a      	adds	r2, r3, #4
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	9203      	str	r2, [sp, #12]
 800c464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c468:	3402      	adds	r4, #2
 800c46a:	9305      	str	r3, [sp, #20]
 800c46c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c530 <_svfiprintf_r+0x1f4>
 800c470:	7821      	ldrb	r1, [r4, #0]
 800c472:	2203      	movs	r2, #3
 800c474:	4650      	mov	r0, sl
 800c476:	f7f3 feb3 	bl	80001e0 <memchr>
 800c47a:	b138      	cbz	r0, 800c48c <_svfiprintf_r+0x150>
 800c47c:	9b04      	ldr	r3, [sp, #16]
 800c47e:	eba0 000a 	sub.w	r0, r0, sl
 800c482:	2240      	movs	r2, #64	@ 0x40
 800c484:	4082      	lsls	r2, r0
 800c486:	4313      	orrs	r3, r2
 800c488:	3401      	adds	r4, #1
 800c48a:	9304      	str	r3, [sp, #16]
 800c48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c490:	4824      	ldr	r0, [pc, #144]	@ (800c524 <_svfiprintf_r+0x1e8>)
 800c492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c496:	2206      	movs	r2, #6
 800c498:	f7f3 fea2 	bl	80001e0 <memchr>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d036      	beq.n	800c50e <_svfiprintf_r+0x1d2>
 800c4a0:	4b21      	ldr	r3, [pc, #132]	@ (800c528 <_svfiprintf_r+0x1ec>)
 800c4a2:	bb1b      	cbnz	r3, 800c4ec <_svfiprintf_r+0x1b0>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	3307      	adds	r3, #7
 800c4a8:	f023 0307 	bic.w	r3, r3, #7
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	9303      	str	r3, [sp, #12]
 800c4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b2:	4433      	add	r3, r6
 800c4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4b6:	e76a      	b.n	800c38e <_svfiprintf_r+0x52>
 800c4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4bc:	460c      	mov	r4, r1
 800c4be:	2001      	movs	r0, #1
 800c4c0:	e7a8      	b.n	800c414 <_svfiprintf_r+0xd8>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	3401      	adds	r4, #1
 800c4c6:	9305      	str	r3, [sp, #20]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	f04f 0c0a 	mov.w	ip, #10
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d4:	3a30      	subs	r2, #48	@ 0x30
 800c4d6:	2a09      	cmp	r2, #9
 800c4d8:	d903      	bls.n	800c4e2 <_svfiprintf_r+0x1a6>
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0c6      	beq.n	800c46c <_svfiprintf_r+0x130>
 800c4de:	9105      	str	r1, [sp, #20]
 800c4e0:	e7c4      	b.n	800c46c <_svfiprintf_r+0x130>
 800c4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e7f0      	b.n	800c4ce <_svfiprintf_r+0x192>
 800c4ec:	ab03      	add	r3, sp, #12
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c52c <_svfiprintf_r+0x1f0>)
 800c4f4:	a904      	add	r1, sp, #16
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	f7fd fe8a 	bl	800a210 <_printf_float>
 800c4fc:	1c42      	adds	r2, r0, #1
 800c4fe:	4606      	mov	r6, r0
 800c500:	d1d6      	bne.n	800c4b0 <_svfiprintf_r+0x174>
 800c502:	89ab      	ldrh	r3, [r5, #12]
 800c504:	065b      	lsls	r3, r3, #25
 800c506:	f53f af2d 	bmi.w	800c364 <_svfiprintf_r+0x28>
 800c50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c50c:	e72c      	b.n	800c368 <_svfiprintf_r+0x2c>
 800c50e:	ab03      	add	r3, sp, #12
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	462a      	mov	r2, r5
 800c514:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <_svfiprintf_r+0x1f0>)
 800c516:	a904      	add	r1, sp, #16
 800c518:	4638      	mov	r0, r7
 800c51a:	f7fe f911 	bl	800a740 <_printf_i>
 800c51e:	e7ed      	b.n	800c4fc <_svfiprintf_r+0x1c0>
 800c520:	0800f588 	.word	0x0800f588
 800c524:	0800f592 	.word	0x0800f592
 800c528:	0800a211 	.word	0x0800a211
 800c52c:	0800c285 	.word	0x0800c285
 800c530:	0800f58e 	.word	0x0800f58e

0800c534 <__sflush_r>:
 800c534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53c:	0716      	lsls	r6, r2, #28
 800c53e:	4605      	mov	r5, r0
 800c540:	460c      	mov	r4, r1
 800c542:	d454      	bmi.n	800c5ee <__sflush_r+0xba>
 800c544:	684b      	ldr	r3, [r1, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	dc02      	bgt.n	800c550 <__sflush_r+0x1c>
 800c54a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dd48      	ble.n	800c5e2 <__sflush_r+0xae>
 800c550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c552:	2e00      	cmp	r6, #0
 800c554:	d045      	beq.n	800c5e2 <__sflush_r+0xae>
 800c556:	2300      	movs	r3, #0
 800c558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c55c:	682f      	ldr	r7, [r5, #0]
 800c55e:	6a21      	ldr	r1, [r4, #32]
 800c560:	602b      	str	r3, [r5, #0]
 800c562:	d030      	beq.n	800c5c6 <__sflush_r+0x92>
 800c564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	0759      	lsls	r1, r3, #29
 800c56a:	d505      	bpl.n	800c578 <__sflush_r+0x44>
 800c56c:	6863      	ldr	r3, [r4, #4]
 800c56e:	1ad2      	subs	r2, r2, r3
 800c570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c572:	b10b      	cbz	r3, 800c578 <__sflush_r+0x44>
 800c574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c576:	1ad2      	subs	r2, r2, r3
 800c578:	2300      	movs	r3, #0
 800c57a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c57c:	6a21      	ldr	r1, [r4, #32]
 800c57e:	4628      	mov	r0, r5
 800c580:	47b0      	blx	r6
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	d106      	bne.n	800c596 <__sflush_r+0x62>
 800c588:	6829      	ldr	r1, [r5, #0]
 800c58a:	291d      	cmp	r1, #29
 800c58c:	d82b      	bhi.n	800c5e6 <__sflush_r+0xb2>
 800c58e:	4a2a      	ldr	r2, [pc, #168]	@ (800c638 <__sflush_r+0x104>)
 800c590:	410a      	asrs	r2, r1
 800c592:	07d6      	lsls	r6, r2, #31
 800c594:	d427      	bmi.n	800c5e6 <__sflush_r+0xb2>
 800c596:	2200      	movs	r2, #0
 800c598:	6062      	str	r2, [r4, #4]
 800c59a:	04d9      	lsls	r1, r3, #19
 800c59c:	6922      	ldr	r2, [r4, #16]
 800c59e:	6022      	str	r2, [r4, #0]
 800c5a0:	d504      	bpl.n	800c5ac <__sflush_r+0x78>
 800c5a2:	1c42      	adds	r2, r0, #1
 800c5a4:	d101      	bne.n	800c5aa <__sflush_r+0x76>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	b903      	cbnz	r3, 800c5ac <__sflush_r+0x78>
 800c5aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5ae:	602f      	str	r7, [r5, #0]
 800c5b0:	b1b9      	cbz	r1, 800c5e2 <__sflush_r+0xae>
 800c5b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5b6:	4299      	cmp	r1, r3
 800c5b8:	d002      	beq.n	800c5c0 <__sflush_r+0x8c>
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f7ff f9e0 	bl	800b980 <_free_r>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5c4:	e00d      	b.n	800c5e2 <__sflush_r+0xae>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	47b0      	blx	r6
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	1c50      	adds	r0, r2, #1
 800c5d0:	d1c9      	bne.n	800c566 <__sflush_r+0x32>
 800c5d2:	682b      	ldr	r3, [r5, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0c6      	beq.n	800c566 <__sflush_r+0x32>
 800c5d8:	2b1d      	cmp	r3, #29
 800c5da:	d001      	beq.n	800c5e0 <__sflush_r+0xac>
 800c5dc:	2b16      	cmp	r3, #22
 800c5de:	d11e      	bne.n	800c61e <__sflush_r+0xea>
 800c5e0:	602f      	str	r7, [r5, #0]
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e022      	b.n	800c62c <__sflush_r+0xf8>
 800c5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ea:	b21b      	sxth	r3, r3
 800c5ec:	e01b      	b.n	800c626 <__sflush_r+0xf2>
 800c5ee:	690f      	ldr	r7, [r1, #16]
 800c5f0:	2f00      	cmp	r7, #0
 800c5f2:	d0f6      	beq.n	800c5e2 <__sflush_r+0xae>
 800c5f4:	0793      	lsls	r3, r2, #30
 800c5f6:	680e      	ldr	r6, [r1, #0]
 800c5f8:	bf08      	it	eq
 800c5fa:	694b      	ldreq	r3, [r1, #20]
 800c5fc:	600f      	str	r7, [r1, #0]
 800c5fe:	bf18      	it	ne
 800c600:	2300      	movne	r3, #0
 800c602:	eba6 0807 	sub.w	r8, r6, r7
 800c606:	608b      	str	r3, [r1, #8]
 800c608:	f1b8 0f00 	cmp.w	r8, #0
 800c60c:	dde9      	ble.n	800c5e2 <__sflush_r+0xae>
 800c60e:	6a21      	ldr	r1, [r4, #32]
 800c610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c612:	4643      	mov	r3, r8
 800c614:	463a      	mov	r2, r7
 800c616:	4628      	mov	r0, r5
 800c618:	47b0      	blx	r6
 800c61a:	2800      	cmp	r0, #0
 800c61c:	dc08      	bgt.n	800c630 <__sflush_r+0xfc>
 800c61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	4407      	add	r7, r0
 800c632:	eba8 0800 	sub.w	r8, r8, r0
 800c636:	e7e7      	b.n	800c608 <__sflush_r+0xd4>
 800c638:	dfbffffe 	.word	0xdfbffffe

0800c63c <_fflush_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	690b      	ldr	r3, [r1, #16]
 800c640:	4605      	mov	r5, r0
 800c642:	460c      	mov	r4, r1
 800c644:	b913      	cbnz	r3, 800c64c <_fflush_r+0x10>
 800c646:	2500      	movs	r5, #0
 800c648:	4628      	mov	r0, r5
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	b118      	cbz	r0, 800c656 <_fflush_r+0x1a>
 800c64e:	6a03      	ldr	r3, [r0, #32]
 800c650:	b90b      	cbnz	r3, 800c656 <_fflush_r+0x1a>
 800c652:	f7fe fa21 	bl	800aa98 <__sinit>
 800c656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0f3      	beq.n	800c646 <_fflush_r+0xa>
 800c65e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c660:	07d0      	lsls	r0, r2, #31
 800c662:	d404      	bmi.n	800c66e <_fflush_r+0x32>
 800c664:	0599      	lsls	r1, r3, #22
 800c666:	d402      	bmi.n	800c66e <_fflush_r+0x32>
 800c668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c66a:	f7fe fb2c 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800c66e:	4628      	mov	r0, r5
 800c670:	4621      	mov	r1, r4
 800c672:	f7ff ff5f 	bl	800c534 <__sflush_r>
 800c676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c678:	07da      	lsls	r2, r3, #31
 800c67a:	4605      	mov	r5, r0
 800c67c:	d4e4      	bmi.n	800c648 <_fflush_r+0xc>
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	059b      	lsls	r3, r3, #22
 800c682:	d4e1      	bmi.n	800c648 <_fflush_r+0xc>
 800c684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c686:	f7fe fb1f 	bl	800acc8 <__retarget_lock_release_recursive>
 800c68a:	e7dd      	b.n	800c648 <_fflush_r+0xc>

0800c68c <memmove>:
 800c68c:	4288      	cmp	r0, r1
 800c68e:	b510      	push	{r4, lr}
 800c690:	eb01 0402 	add.w	r4, r1, r2
 800c694:	d902      	bls.n	800c69c <memmove+0x10>
 800c696:	4284      	cmp	r4, r0
 800c698:	4623      	mov	r3, r4
 800c69a:	d807      	bhi.n	800c6ac <memmove+0x20>
 800c69c:	1e43      	subs	r3, r0, #1
 800c69e:	42a1      	cmp	r1, r4
 800c6a0:	d008      	beq.n	800c6b4 <memmove+0x28>
 800c6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6aa:	e7f8      	b.n	800c69e <memmove+0x12>
 800c6ac:	4402      	add	r2, r0
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	428a      	cmp	r2, r1
 800c6b2:	d100      	bne.n	800c6b6 <memmove+0x2a>
 800c6b4:	bd10      	pop	{r4, pc}
 800c6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6be:	e7f7      	b.n	800c6b0 <memmove+0x24>

0800c6c0 <_sbrk_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d06      	ldr	r5, [pc, #24]	@ (800c6dc <_sbrk_r+0x1c>)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	602b      	str	r3, [r5, #0]
 800c6cc:	f7f9 faee 	bl	8005cac <_sbrk>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_sbrk_r+0x1a>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_sbrk_r+0x1a>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	2000077c 	.word	0x2000077c

0800c6e0 <__assert_func>:
 800c6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b09      	ldr	r3, [pc, #36]	@ (800c70c <__assert_func+0x2c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	68d8      	ldr	r0, [r3, #12]
 800c6ee:	b954      	cbnz	r4, 800c706 <__assert_func+0x26>
 800c6f0:	4b07      	ldr	r3, [pc, #28]	@ (800c710 <__assert_func+0x30>)
 800c6f2:	461c      	mov	r4, r3
 800c6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6f8:	9100      	str	r1, [sp, #0]
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	4905      	ldr	r1, [pc, #20]	@ (800c714 <__assert_func+0x34>)
 800c6fe:	f000 f86f 	bl	800c7e0 <fiprintf>
 800c702:	f000 f87f 	bl	800c804 <abort>
 800c706:	4b04      	ldr	r3, [pc, #16]	@ (800c718 <__assert_func+0x38>)
 800c708:	e7f4      	b.n	800c6f4 <__assert_func+0x14>
 800c70a:	bf00      	nop
 800c70c:	20000034 	.word	0x20000034
 800c710:	0800f5de 	.word	0x0800f5de
 800c714:	0800f5b0 	.word	0x0800f5b0
 800c718:	0800f5a3 	.word	0x0800f5a3

0800c71c <_calloc_r>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	fba1 5402 	umull	r5, r4, r1, r2
 800c722:	b93c      	cbnz	r4, 800c734 <_calloc_r+0x18>
 800c724:	4629      	mov	r1, r5
 800c726:	f7ff f99f 	bl	800ba68 <_malloc_r>
 800c72a:	4606      	mov	r6, r0
 800c72c:	b928      	cbnz	r0, 800c73a <_calloc_r+0x1e>
 800c72e:	2600      	movs	r6, #0
 800c730:	4630      	mov	r0, r6
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	220c      	movs	r2, #12
 800c736:	6002      	str	r2, [r0, #0]
 800c738:	e7f9      	b.n	800c72e <_calloc_r+0x12>
 800c73a:	462a      	mov	r2, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	f7fe fa44 	bl	800abca <memset>
 800c742:	e7f5      	b.n	800c730 <_calloc_r+0x14>

0800c744 <__ascii_mbtowc>:
 800c744:	b082      	sub	sp, #8
 800c746:	b901      	cbnz	r1, 800c74a <__ascii_mbtowc+0x6>
 800c748:	a901      	add	r1, sp, #4
 800c74a:	b142      	cbz	r2, 800c75e <__ascii_mbtowc+0x1a>
 800c74c:	b14b      	cbz	r3, 800c762 <__ascii_mbtowc+0x1e>
 800c74e:	7813      	ldrb	r3, [r2, #0]
 800c750:	600b      	str	r3, [r1, #0]
 800c752:	7812      	ldrb	r2, [r2, #0]
 800c754:	1e10      	subs	r0, r2, #0
 800c756:	bf18      	it	ne
 800c758:	2001      	movne	r0, #1
 800c75a:	b002      	add	sp, #8
 800c75c:	4770      	bx	lr
 800c75e:	4610      	mov	r0, r2
 800c760:	e7fb      	b.n	800c75a <__ascii_mbtowc+0x16>
 800c762:	f06f 0001 	mvn.w	r0, #1
 800c766:	e7f8      	b.n	800c75a <__ascii_mbtowc+0x16>

0800c768 <_realloc_r>:
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	4680      	mov	r8, r0
 800c76e:	4615      	mov	r5, r2
 800c770:	460c      	mov	r4, r1
 800c772:	b921      	cbnz	r1, 800c77e <_realloc_r+0x16>
 800c774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	4611      	mov	r1, r2
 800c77a:	f7ff b975 	b.w	800ba68 <_malloc_r>
 800c77e:	b92a      	cbnz	r2, 800c78c <_realloc_r+0x24>
 800c780:	f7ff f8fe 	bl	800b980 <_free_r>
 800c784:	2400      	movs	r4, #0
 800c786:	4620      	mov	r0, r4
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	f000 f841 	bl	800c812 <_malloc_usable_size_r>
 800c790:	4285      	cmp	r5, r0
 800c792:	4606      	mov	r6, r0
 800c794:	d802      	bhi.n	800c79c <_realloc_r+0x34>
 800c796:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c79a:	d8f4      	bhi.n	800c786 <_realloc_r+0x1e>
 800c79c:	4629      	mov	r1, r5
 800c79e:	4640      	mov	r0, r8
 800c7a0:	f7ff f962 	bl	800ba68 <_malloc_r>
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d0ec      	beq.n	800c784 <_realloc_r+0x1c>
 800c7aa:	42b5      	cmp	r5, r6
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	bf28      	it	cs
 800c7b2:	4632      	movcs	r2, r6
 800c7b4:	f7fe fa89 	bl	800acca <memcpy>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	f7ff f8e0 	bl	800b980 <_free_r>
 800c7c0:	463c      	mov	r4, r7
 800c7c2:	e7e0      	b.n	800c786 <_realloc_r+0x1e>

0800c7c4 <__ascii_wctomb>:
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	4608      	mov	r0, r1
 800c7c8:	b141      	cbz	r1, 800c7dc <__ascii_wctomb+0x18>
 800c7ca:	2aff      	cmp	r2, #255	@ 0xff
 800c7cc:	d904      	bls.n	800c7d8 <__ascii_wctomb+0x14>
 800c7ce:	228a      	movs	r2, #138	@ 0x8a
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d6:	4770      	bx	lr
 800c7d8:	700a      	strb	r2, [r1, #0]
 800c7da:	2001      	movs	r0, #1
 800c7dc:	4770      	bx	lr
	...

0800c7e0 <fiprintf>:
 800c7e0:	b40e      	push	{r1, r2, r3}
 800c7e2:	b503      	push	{r0, r1, lr}
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	ab03      	add	r3, sp, #12
 800c7e8:	4805      	ldr	r0, [pc, #20]	@ (800c800 <fiprintf+0x20>)
 800c7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ee:	6800      	ldr	r0, [r0, #0]
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	f000 f83f 	bl	800c874 <_vfiprintf_r>
 800c7f6:	b002      	add	sp, #8
 800c7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7fc:	b003      	add	sp, #12
 800c7fe:	4770      	bx	lr
 800c800:	20000034 	.word	0x20000034

0800c804 <abort>:
 800c804:	b508      	push	{r3, lr}
 800c806:	2006      	movs	r0, #6
 800c808:	f000 fa08 	bl	800cc1c <raise>
 800c80c:	2001      	movs	r0, #1
 800c80e:	f7f9 f9d5 	bl	8005bbc <_exit>

0800c812 <_malloc_usable_size_r>:
 800c812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c816:	1f18      	subs	r0, r3, #4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	bfbc      	itt	lt
 800c81c:	580b      	ldrlt	r3, [r1, r0]
 800c81e:	18c0      	addlt	r0, r0, r3
 800c820:	4770      	bx	lr

0800c822 <__sfputc_r>:
 800c822:	6893      	ldr	r3, [r2, #8]
 800c824:	3b01      	subs	r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	b410      	push	{r4}
 800c82a:	6093      	str	r3, [r2, #8]
 800c82c:	da08      	bge.n	800c840 <__sfputc_r+0x1e>
 800c82e:	6994      	ldr	r4, [r2, #24]
 800c830:	42a3      	cmp	r3, r4
 800c832:	db01      	blt.n	800c838 <__sfputc_r+0x16>
 800c834:	290a      	cmp	r1, #10
 800c836:	d103      	bne.n	800c840 <__sfputc_r+0x1e>
 800c838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c83c:	f000 b932 	b.w	800caa4 <__swbuf_r>
 800c840:	6813      	ldr	r3, [r2, #0]
 800c842:	1c58      	adds	r0, r3, #1
 800c844:	6010      	str	r0, [r2, #0]
 800c846:	7019      	strb	r1, [r3, #0]
 800c848:	4608      	mov	r0, r1
 800c84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <__sfputs_r>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	4614      	mov	r4, r2
 800c858:	18d5      	adds	r5, r2, r3
 800c85a:	42ac      	cmp	r4, r5
 800c85c:	d101      	bne.n	800c862 <__sfputs_r+0x12>
 800c85e:	2000      	movs	r0, #0
 800c860:	e007      	b.n	800c872 <__sfputs_r+0x22>
 800c862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c866:	463a      	mov	r2, r7
 800c868:	4630      	mov	r0, r6
 800c86a:	f7ff ffda 	bl	800c822 <__sfputc_r>
 800c86e:	1c43      	adds	r3, r0, #1
 800c870:	d1f3      	bne.n	800c85a <__sfputs_r+0xa>
 800c872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c874 <_vfiprintf_r>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	460d      	mov	r5, r1
 800c87a:	b09d      	sub	sp, #116	@ 0x74
 800c87c:	4614      	mov	r4, r2
 800c87e:	4698      	mov	r8, r3
 800c880:	4606      	mov	r6, r0
 800c882:	b118      	cbz	r0, 800c88c <_vfiprintf_r+0x18>
 800c884:	6a03      	ldr	r3, [r0, #32]
 800c886:	b90b      	cbnz	r3, 800c88c <_vfiprintf_r+0x18>
 800c888:	f7fe f906 	bl	800aa98 <__sinit>
 800c88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c88e:	07d9      	lsls	r1, r3, #31
 800c890:	d405      	bmi.n	800c89e <_vfiprintf_r+0x2a>
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	059a      	lsls	r2, r3, #22
 800c896:	d402      	bmi.n	800c89e <_vfiprintf_r+0x2a>
 800c898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c89a:	f7fe fa14 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800c89e:	89ab      	ldrh	r3, [r5, #12]
 800c8a0:	071b      	lsls	r3, r3, #28
 800c8a2:	d501      	bpl.n	800c8a8 <_vfiprintf_r+0x34>
 800c8a4:	692b      	ldr	r3, [r5, #16]
 800c8a6:	b99b      	cbnz	r3, 800c8d0 <_vfiprintf_r+0x5c>
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f000 f938 	bl	800cb20 <__swsetup_r>
 800c8b0:	b170      	cbz	r0, 800c8d0 <_vfiprintf_r+0x5c>
 800c8b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8b4:	07dc      	lsls	r4, r3, #31
 800c8b6:	d504      	bpl.n	800c8c2 <_vfiprintf_r+0x4e>
 800c8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8bc:	b01d      	add	sp, #116	@ 0x74
 800c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c2:	89ab      	ldrh	r3, [r5, #12]
 800c8c4:	0598      	lsls	r0, r3, #22
 800c8c6:	d4f7      	bmi.n	800c8b8 <_vfiprintf_r+0x44>
 800c8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8ca:	f7fe f9fd 	bl	800acc8 <__retarget_lock_release_recursive>
 800c8ce:	e7f3      	b.n	800c8b8 <_vfiprintf_r+0x44>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8de:	2330      	movs	r3, #48	@ 0x30
 800c8e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca90 <_vfiprintf_r+0x21c>
 800c8e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8e8:	f04f 0901 	mov.w	r9, #1
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	469a      	mov	sl, r3
 800c8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f4:	b10a      	cbz	r2, 800c8fa <_vfiprintf_r+0x86>
 800c8f6:	2a25      	cmp	r2, #37	@ 0x25
 800c8f8:	d1f9      	bne.n	800c8ee <_vfiprintf_r+0x7a>
 800c8fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c8fe:	d00b      	beq.n	800c918 <_vfiprintf_r+0xa4>
 800c900:	465b      	mov	r3, fp
 800c902:	4622      	mov	r2, r4
 800c904:	4629      	mov	r1, r5
 800c906:	4630      	mov	r0, r6
 800c908:	f7ff ffa2 	bl	800c850 <__sfputs_r>
 800c90c:	3001      	adds	r0, #1
 800c90e:	f000 80a7 	beq.w	800ca60 <_vfiprintf_r+0x1ec>
 800c912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c914:	445a      	add	r2, fp
 800c916:	9209      	str	r2, [sp, #36]	@ 0x24
 800c918:	f89a 3000 	ldrb.w	r3, [sl]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 809f 	beq.w	800ca60 <_vfiprintf_r+0x1ec>
 800c922:	2300      	movs	r3, #0
 800c924:	f04f 32ff 	mov.w	r2, #4294967295
 800c928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92c:	f10a 0a01 	add.w	sl, sl, #1
 800c930:	9304      	str	r3, [sp, #16]
 800c932:	9307      	str	r3, [sp, #28]
 800c934:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c938:	931a      	str	r3, [sp, #104]	@ 0x68
 800c93a:	4654      	mov	r4, sl
 800c93c:	2205      	movs	r2, #5
 800c93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c942:	4853      	ldr	r0, [pc, #332]	@ (800ca90 <_vfiprintf_r+0x21c>)
 800c944:	f7f3 fc4c 	bl	80001e0 <memchr>
 800c948:	9a04      	ldr	r2, [sp, #16]
 800c94a:	b9d8      	cbnz	r0, 800c984 <_vfiprintf_r+0x110>
 800c94c:	06d1      	lsls	r1, r2, #27
 800c94e:	bf44      	itt	mi
 800c950:	2320      	movmi	r3, #32
 800c952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c956:	0713      	lsls	r3, r2, #28
 800c958:	bf44      	itt	mi
 800c95a:	232b      	movmi	r3, #43	@ 0x2b
 800c95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c960:	f89a 3000 	ldrb.w	r3, [sl]
 800c964:	2b2a      	cmp	r3, #42	@ 0x2a
 800c966:	d015      	beq.n	800c994 <_vfiprintf_r+0x120>
 800c968:	9a07      	ldr	r2, [sp, #28]
 800c96a:	4654      	mov	r4, sl
 800c96c:	2000      	movs	r0, #0
 800c96e:	f04f 0c0a 	mov.w	ip, #10
 800c972:	4621      	mov	r1, r4
 800c974:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c978:	3b30      	subs	r3, #48	@ 0x30
 800c97a:	2b09      	cmp	r3, #9
 800c97c:	d94b      	bls.n	800ca16 <_vfiprintf_r+0x1a2>
 800c97e:	b1b0      	cbz	r0, 800c9ae <_vfiprintf_r+0x13a>
 800c980:	9207      	str	r2, [sp, #28]
 800c982:	e014      	b.n	800c9ae <_vfiprintf_r+0x13a>
 800c984:	eba0 0308 	sub.w	r3, r0, r8
 800c988:	fa09 f303 	lsl.w	r3, r9, r3
 800c98c:	4313      	orrs	r3, r2
 800c98e:	9304      	str	r3, [sp, #16]
 800c990:	46a2      	mov	sl, r4
 800c992:	e7d2      	b.n	800c93a <_vfiprintf_r+0xc6>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	1d19      	adds	r1, r3, #4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	9103      	str	r1, [sp, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	bfbb      	ittet	lt
 800c9a0:	425b      	neglt	r3, r3
 800c9a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a6:	9307      	strge	r3, [sp, #28]
 800c9a8:	9307      	strlt	r3, [sp, #28]
 800c9aa:	bfb8      	it	lt
 800c9ac:	9204      	strlt	r2, [sp, #16]
 800c9ae:	7823      	ldrb	r3, [r4, #0]
 800c9b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9b2:	d10a      	bne.n	800c9ca <_vfiprintf_r+0x156>
 800c9b4:	7863      	ldrb	r3, [r4, #1]
 800c9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9b8:	d132      	bne.n	800ca20 <_vfiprintf_r+0x1ac>
 800c9ba:	9b03      	ldr	r3, [sp, #12]
 800c9bc:	1d1a      	adds	r2, r3, #4
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	9203      	str	r2, [sp, #12]
 800c9c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c9c6:	3402      	adds	r4, #2
 800c9c8:	9305      	str	r3, [sp, #20]
 800c9ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800caa0 <_vfiprintf_r+0x22c>
 800c9ce:	7821      	ldrb	r1, [r4, #0]
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	f7f3 fc04 	bl	80001e0 <memchr>
 800c9d8:	b138      	cbz	r0, 800c9ea <_vfiprintf_r+0x176>
 800c9da:	9b04      	ldr	r3, [sp, #16]
 800c9dc:	eba0 000a 	sub.w	r0, r0, sl
 800c9e0:	2240      	movs	r2, #64	@ 0x40
 800c9e2:	4082      	lsls	r2, r0
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	9304      	str	r3, [sp, #16]
 800c9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ee:	4829      	ldr	r0, [pc, #164]	@ (800ca94 <_vfiprintf_r+0x220>)
 800c9f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9f4:	2206      	movs	r2, #6
 800c9f6:	f7f3 fbf3 	bl	80001e0 <memchr>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d03f      	beq.n	800ca7e <_vfiprintf_r+0x20a>
 800c9fe:	4b26      	ldr	r3, [pc, #152]	@ (800ca98 <_vfiprintf_r+0x224>)
 800ca00:	bb1b      	cbnz	r3, 800ca4a <_vfiprintf_r+0x1d6>
 800ca02:	9b03      	ldr	r3, [sp, #12]
 800ca04:	3307      	adds	r3, #7
 800ca06:	f023 0307 	bic.w	r3, r3, #7
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	9303      	str	r3, [sp, #12]
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	443b      	add	r3, r7
 800ca12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca14:	e76a      	b.n	800c8ec <_vfiprintf_r+0x78>
 800ca16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	e7a8      	b.n	800c972 <_vfiprintf_r+0xfe>
 800ca20:	2300      	movs	r3, #0
 800ca22:	3401      	adds	r4, #1
 800ca24:	9305      	str	r3, [sp, #20]
 800ca26:	4619      	mov	r1, r3
 800ca28:	f04f 0c0a 	mov.w	ip, #10
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca32:	3a30      	subs	r2, #48	@ 0x30
 800ca34:	2a09      	cmp	r2, #9
 800ca36:	d903      	bls.n	800ca40 <_vfiprintf_r+0x1cc>
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d0c6      	beq.n	800c9ca <_vfiprintf_r+0x156>
 800ca3c:	9105      	str	r1, [sp, #20]
 800ca3e:	e7c4      	b.n	800c9ca <_vfiprintf_r+0x156>
 800ca40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca44:	4604      	mov	r4, r0
 800ca46:	2301      	movs	r3, #1
 800ca48:	e7f0      	b.n	800ca2c <_vfiprintf_r+0x1b8>
 800ca4a:	ab03      	add	r3, sp, #12
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	462a      	mov	r2, r5
 800ca50:	4b12      	ldr	r3, [pc, #72]	@ (800ca9c <_vfiprintf_r+0x228>)
 800ca52:	a904      	add	r1, sp, #16
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7fd fbdb 	bl	800a210 <_printf_float>
 800ca5a:	4607      	mov	r7, r0
 800ca5c:	1c78      	adds	r0, r7, #1
 800ca5e:	d1d6      	bne.n	800ca0e <_vfiprintf_r+0x19a>
 800ca60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca62:	07d9      	lsls	r1, r3, #31
 800ca64:	d405      	bmi.n	800ca72 <_vfiprintf_r+0x1fe>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	059a      	lsls	r2, r3, #22
 800ca6a:	d402      	bmi.n	800ca72 <_vfiprintf_r+0x1fe>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca6e:	f7fe f92b 	bl	800acc8 <__retarget_lock_release_recursive>
 800ca72:	89ab      	ldrh	r3, [r5, #12]
 800ca74:	065b      	lsls	r3, r3, #25
 800ca76:	f53f af1f 	bmi.w	800c8b8 <_vfiprintf_r+0x44>
 800ca7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca7c:	e71e      	b.n	800c8bc <_vfiprintf_r+0x48>
 800ca7e:	ab03      	add	r3, sp, #12
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	462a      	mov	r2, r5
 800ca84:	4b05      	ldr	r3, [pc, #20]	@ (800ca9c <_vfiprintf_r+0x228>)
 800ca86:	a904      	add	r1, sp, #16
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f7fd fe59 	bl	800a740 <_printf_i>
 800ca8e:	e7e4      	b.n	800ca5a <_vfiprintf_r+0x1e6>
 800ca90:	0800f588 	.word	0x0800f588
 800ca94:	0800f592 	.word	0x0800f592
 800ca98:	0800a211 	.word	0x0800a211
 800ca9c:	0800c851 	.word	0x0800c851
 800caa0:	0800f58e 	.word	0x0800f58e

0800caa4 <__swbuf_r>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	460e      	mov	r6, r1
 800caa8:	4614      	mov	r4, r2
 800caaa:	4605      	mov	r5, r0
 800caac:	b118      	cbz	r0, 800cab6 <__swbuf_r+0x12>
 800caae:	6a03      	ldr	r3, [r0, #32]
 800cab0:	b90b      	cbnz	r3, 800cab6 <__swbuf_r+0x12>
 800cab2:	f7fd fff1 	bl	800aa98 <__sinit>
 800cab6:	69a3      	ldr	r3, [r4, #24]
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	071a      	lsls	r2, r3, #28
 800cabe:	d501      	bpl.n	800cac4 <__swbuf_r+0x20>
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	b943      	cbnz	r3, 800cad6 <__swbuf_r+0x32>
 800cac4:	4621      	mov	r1, r4
 800cac6:	4628      	mov	r0, r5
 800cac8:	f000 f82a 	bl	800cb20 <__swsetup_r>
 800cacc:	b118      	cbz	r0, 800cad6 <__swbuf_r+0x32>
 800cace:	f04f 37ff 	mov.w	r7, #4294967295
 800cad2:	4638      	mov	r0, r7
 800cad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	6922      	ldr	r2, [r4, #16]
 800cada:	1a98      	subs	r0, r3, r2
 800cadc:	6963      	ldr	r3, [r4, #20]
 800cade:	b2f6      	uxtb	r6, r6
 800cae0:	4283      	cmp	r3, r0
 800cae2:	4637      	mov	r7, r6
 800cae4:	dc05      	bgt.n	800caf2 <__swbuf_r+0x4e>
 800cae6:	4621      	mov	r1, r4
 800cae8:	4628      	mov	r0, r5
 800caea:	f7ff fda7 	bl	800c63c <_fflush_r>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d1ed      	bne.n	800cace <__swbuf_r+0x2a>
 800caf2:	68a3      	ldr	r3, [r4, #8]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	60a3      	str	r3, [r4, #8]
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	6022      	str	r2, [r4, #0]
 800cafe:	701e      	strb	r6, [r3, #0]
 800cb00:	6962      	ldr	r2, [r4, #20]
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d004      	beq.n	800cb12 <__swbuf_r+0x6e>
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	07db      	lsls	r3, r3, #31
 800cb0c:	d5e1      	bpl.n	800cad2 <__swbuf_r+0x2e>
 800cb0e:	2e0a      	cmp	r6, #10
 800cb10:	d1df      	bne.n	800cad2 <__swbuf_r+0x2e>
 800cb12:	4621      	mov	r1, r4
 800cb14:	4628      	mov	r0, r5
 800cb16:	f7ff fd91 	bl	800c63c <_fflush_r>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d0d9      	beq.n	800cad2 <__swbuf_r+0x2e>
 800cb1e:	e7d6      	b.n	800cace <__swbuf_r+0x2a>

0800cb20 <__swsetup_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4b29      	ldr	r3, [pc, #164]	@ (800cbc8 <__swsetup_r+0xa8>)
 800cb24:	4605      	mov	r5, r0
 800cb26:	6818      	ldr	r0, [r3, #0]
 800cb28:	460c      	mov	r4, r1
 800cb2a:	b118      	cbz	r0, 800cb34 <__swsetup_r+0x14>
 800cb2c:	6a03      	ldr	r3, [r0, #32]
 800cb2e:	b90b      	cbnz	r3, 800cb34 <__swsetup_r+0x14>
 800cb30:	f7fd ffb2 	bl	800aa98 <__sinit>
 800cb34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb38:	0719      	lsls	r1, r3, #28
 800cb3a:	d422      	bmi.n	800cb82 <__swsetup_r+0x62>
 800cb3c:	06da      	lsls	r2, r3, #27
 800cb3e:	d407      	bmi.n	800cb50 <__swsetup_r+0x30>
 800cb40:	2209      	movs	r2, #9
 800cb42:	602a      	str	r2, [r5, #0]
 800cb44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4e:	e033      	b.n	800cbb8 <__swsetup_r+0x98>
 800cb50:	0758      	lsls	r0, r3, #29
 800cb52:	d512      	bpl.n	800cb7a <__swsetup_r+0x5a>
 800cb54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb56:	b141      	cbz	r1, 800cb6a <__swsetup_r+0x4a>
 800cb58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	d002      	beq.n	800cb66 <__swsetup_r+0x46>
 800cb60:	4628      	mov	r0, r5
 800cb62:	f7fe ff0d 	bl	800b980 <_free_r>
 800cb66:	2300      	movs	r3, #0
 800cb68:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb6a:	89a3      	ldrh	r3, [r4, #12]
 800cb6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb70:	81a3      	strh	r3, [r4, #12]
 800cb72:	2300      	movs	r3, #0
 800cb74:	6063      	str	r3, [r4, #4]
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f043 0308 	orr.w	r3, r3, #8
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	b94b      	cbnz	r3, 800cb9a <__swsetup_r+0x7a>
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb90:	d003      	beq.n	800cb9a <__swsetup_r+0x7a>
 800cb92:	4621      	mov	r1, r4
 800cb94:	4628      	mov	r0, r5
 800cb96:	f000 f883 	bl	800cca0 <__smakebuf_r>
 800cb9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9e:	f013 0201 	ands.w	r2, r3, #1
 800cba2:	d00a      	beq.n	800cbba <__swsetup_r+0x9a>
 800cba4:	2200      	movs	r2, #0
 800cba6:	60a2      	str	r2, [r4, #8]
 800cba8:	6962      	ldr	r2, [r4, #20]
 800cbaa:	4252      	negs	r2, r2
 800cbac:	61a2      	str	r2, [r4, #24]
 800cbae:	6922      	ldr	r2, [r4, #16]
 800cbb0:	b942      	cbnz	r2, 800cbc4 <__swsetup_r+0xa4>
 800cbb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbb6:	d1c5      	bne.n	800cb44 <__swsetup_r+0x24>
 800cbb8:	bd38      	pop	{r3, r4, r5, pc}
 800cbba:	0799      	lsls	r1, r3, #30
 800cbbc:	bf58      	it	pl
 800cbbe:	6962      	ldrpl	r2, [r4, #20]
 800cbc0:	60a2      	str	r2, [r4, #8]
 800cbc2:	e7f4      	b.n	800cbae <__swsetup_r+0x8e>
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e7f7      	b.n	800cbb8 <__swsetup_r+0x98>
 800cbc8:	20000034 	.word	0x20000034

0800cbcc <_raise_r>:
 800cbcc:	291f      	cmp	r1, #31
 800cbce:	b538      	push	{r3, r4, r5, lr}
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	d904      	bls.n	800cbe0 <_raise_r+0x14>
 800cbd6:	2316      	movs	r3, #22
 800cbd8:	6003      	str	r3, [r0, #0]
 800cbda:	f04f 30ff 	mov.w	r0, #4294967295
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cbe2:	b112      	cbz	r2, 800cbea <_raise_r+0x1e>
 800cbe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbe8:	b94b      	cbnz	r3, 800cbfe <_raise_r+0x32>
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 f830 	bl	800cc50 <_getpid_r>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbfa:	f000 b817 	b.w	800cc2c <_kill_r>
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d00a      	beq.n	800cc18 <_raise_r+0x4c>
 800cc02:	1c59      	adds	r1, r3, #1
 800cc04:	d103      	bne.n	800cc0e <_raise_r+0x42>
 800cc06:	2316      	movs	r3, #22
 800cc08:	6003      	str	r3, [r0, #0]
 800cc0a:	2001      	movs	r0, #1
 800cc0c:	e7e7      	b.n	800cbde <_raise_r+0x12>
 800cc0e:	2100      	movs	r1, #0
 800cc10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc14:	4620      	mov	r0, r4
 800cc16:	4798      	blx	r3
 800cc18:	2000      	movs	r0, #0
 800cc1a:	e7e0      	b.n	800cbde <_raise_r+0x12>

0800cc1c <raise>:
 800cc1c:	4b02      	ldr	r3, [pc, #8]	@ (800cc28 <raise+0xc>)
 800cc1e:	4601      	mov	r1, r0
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	f7ff bfd3 	b.w	800cbcc <_raise_r>
 800cc26:	bf00      	nop
 800cc28:	20000034 	.word	0x20000034

0800cc2c <_kill_r>:
 800cc2c:	b538      	push	{r3, r4, r5, lr}
 800cc2e:	4d07      	ldr	r5, [pc, #28]	@ (800cc4c <_kill_r+0x20>)
 800cc30:	2300      	movs	r3, #0
 800cc32:	4604      	mov	r4, r0
 800cc34:	4608      	mov	r0, r1
 800cc36:	4611      	mov	r1, r2
 800cc38:	602b      	str	r3, [r5, #0]
 800cc3a:	f7f8 ffaf 	bl	8005b9c <_kill>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	d102      	bne.n	800cc48 <_kill_r+0x1c>
 800cc42:	682b      	ldr	r3, [r5, #0]
 800cc44:	b103      	cbz	r3, 800cc48 <_kill_r+0x1c>
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	bf00      	nop
 800cc4c:	2000077c 	.word	0x2000077c

0800cc50 <_getpid_r>:
 800cc50:	f7f8 bf9c 	b.w	8005b8c <_getpid>

0800cc54 <__swhatbuf_r>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	460c      	mov	r4, r1
 800cc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5c:	2900      	cmp	r1, #0
 800cc5e:	b096      	sub	sp, #88	@ 0x58
 800cc60:	4615      	mov	r5, r2
 800cc62:	461e      	mov	r6, r3
 800cc64:	da0d      	bge.n	800cc82 <__swhatbuf_r+0x2e>
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc6c:	f04f 0100 	mov.w	r1, #0
 800cc70:	bf14      	ite	ne
 800cc72:	2340      	movne	r3, #64	@ 0x40
 800cc74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc78:	2000      	movs	r0, #0
 800cc7a:	6031      	str	r1, [r6, #0]
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	b016      	add	sp, #88	@ 0x58
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
 800cc82:	466a      	mov	r2, sp
 800cc84:	f000 f848 	bl	800cd18 <_fstat_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	dbec      	blt.n	800cc66 <__swhatbuf_r+0x12>
 800cc8c:	9901      	ldr	r1, [sp, #4]
 800cc8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc96:	4259      	negs	r1, r3
 800cc98:	4159      	adcs	r1, r3
 800cc9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc9e:	e7eb      	b.n	800cc78 <__swhatbuf_r+0x24>

0800cca0 <__smakebuf_r>:
 800cca0:	898b      	ldrh	r3, [r1, #12]
 800cca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cca4:	079d      	lsls	r5, r3, #30
 800cca6:	4606      	mov	r6, r0
 800cca8:	460c      	mov	r4, r1
 800ccaa:	d507      	bpl.n	800ccbc <__smakebuf_r+0x1c>
 800ccac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	6163      	str	r3, [r4, #20]
 800ccb8:	b003      	add	sp, #12
 800ccba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccbc:	ab01      	add	r3, sp, #4
 800ccbe:	466a      	mov	r2, sp
 800ccc0:	f7ff ffc8 	bl	800cc54 <__swhatbuf_r>
 800ccc4:	9f00      	ldr	r7, [sp, #0]
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	4639      	mov	r1, r7
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7fe fecc 	bl	800ba68 <_malloc_r>
 800ccd0:	b948      	cbnz	r0, 800cce6 <__smakebuf_r+0x46>
 800ccd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccd6:	059a      	lsls	r2, r3, #22
 800ccd8:	d4ee      	bmi.n	800ccb8 <__smakebuf_r+0x18>
 800ccda:	f023 0303 	bic.w	r3, r3, #3
 800ccde:	f043 0302 	orr.w	r3, r3, #2
 800cce2:	81a3      	strh	r3, [r4, #12]
 800cce4:	e7e2      	b.n	800ccac <__smakebuf_r+0xc>
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	6020      	str	r0, [r4, #0]
 800ccea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccee:	81a3      	strh	r3, [r4, #12]
 800ccf0:	9b01      	ldr	r3, [sp, #4]
 800ccf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ccf6:	b15b      	cbz	r3, 800cd10 <__smakebuf_r+0x70>
 800ccf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f000 f81d 	bl	800cd3c <_isatty_r>
 800cd02:	b128      	cbz	r0, 800cd10 <__smakebuf_r+0x70>
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	f023 0303 	bic.w	r3, r3, #3
 800cd0a:	f043 0301 	orr.w	r3, r3, #1
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	431d      	orrs	r5, r3
 800cd14:	81a5      	strh	r5, [r4, #12]
 800cd16:	e7cf      	b.n	800ccb8 <__smakebuf_r+0x18>

0800cd18 <_fstat_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4d07      	ldr	r5, [pc, #28]	@ (800cd38 <_fstat_r+0x20>)
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	4604      	mov	r4, r0
 800cd20:	4608      	mov	r0, r1
 800cd22:	4611      	mov	r1, r2
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	f7f8 ff99 	bl	8005c5c <_fstat>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	d102      	bne.n	800cd34 <_fstat_r+0x1c>
 800cd2e:	682b      	ldr	r3, [r5, #0]
 800cd30:	b103      	cbz	r3, 800cd34 <_fstat_r+0x1c>
 800cd32:	6023      	str	r3, [r4, #0]
 800cd34:	bd38      	pop	{r3, r4, r5, pc}
 800cd36:	bf00      	nop
 800cd38:	2000077c 	.word	0x2000077c

0800cd3c <_isatty_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d06      	ldr	r5, [pc, #24]	@ (800cd58 <_isatty_r+0x1c>)
 800cd40:	2300      	movs	r3, #0
 800cd42:	4604      	mov	r4, r0
 800cd44:	4608      	mov	r0, r1
 800cd46:	602b      	str	r3, [r5, #0]
 800cd48:	f7f8 ff98 	bl	8005c7c <_isatty>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_isatty_r+0x1a>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_isatty_r+0x1a>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	2000077c 	.word	0x2000077c

0800cd5c <_init>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	bf00      	nop
 800cd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd62:	bc08      	pop	{r3}
 800cd64:	469e      	mov	lr, r3
 800cd66:	4770      	bx	lr

0800cd68 <_fini>:
 800cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6a:	bf00      	nop
 800cd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6e:	bc08      	pop	{r3}
 800cd70:	469e      	mov	lr, r3
 800cd72:	4770      	bx	lr
